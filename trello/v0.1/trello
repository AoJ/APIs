/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'trello'})},
	'getAction': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{entities \}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities '])
			if (args['entities ']) delete args['entities ']
		}
		if (url.indexOf('[/entities ]') !== -1) {
			url = url.replace('[/entities ]', '/' + args['entities '])
			if (args['entities ']) delete args['entities ']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{memberCreator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['memberCreator'])
			if (args['memberCreator']) delete args['memberCreator']
		}
		if (url.indexOf('[/memberCreator]') !== -1) {
			url = url.replace('[/memberCreator]', '/' + args['memberCreator'])
			if (args['memberCreator']) delete args['memberCreator']
		}
		var rgx = new RegExp('\{memberCreator_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['memberCreator_fields'])
			if (args['memberCreator_fields']) delete args['memberCreator_fields']
		}
		if (url.indexOf('[/memberCreator_fields]') !== -1) {
			url = url.replace('[/memberCreator_fields]', '/' + args['memberCreator_fields'])
			if (args['memberCreator_fields']) delete args['memberCreator_fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/entities ]') !== -1) url = url.replace('[/entities ]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/memberCreator]') !== -1) url = url.replace('[/memberCreator]', '')
		if (url.indexOf('[/memberCreator_fields]') !== -1) url = url.replace('[/memberCreator_fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/board'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionBoardField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/board/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionCard': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/card'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionCardField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/card/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionEntities': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/entities'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionList': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/list'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionListField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/list/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionMember': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/member'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionMemberField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/member/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionMembercreator': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/membercreator'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionMembercretatorField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/membercreator/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/organization'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getActionOrganizationField': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}/organization/{field}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'putAction': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}text'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (args['values'] == null) throw new Error('values is a required parameter')
		var rgx = new RegExp('\{values\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/values]') !== -1) {
			url = url.replace('[/values]', '/' + args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		if (url.indexOf('[/values]') !== -1) url = url.replace('[/values]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'deleteAction': function(args, opts) {
		var url = 'https://api.trello.com/1//actions/{idAction}'
		args = args || {}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'getBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{actions \}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions '])
			if (args['actions ']) delete args['actions ']
		}
		if (url.indexOf('[/actions ]') !== -1) {
			url = url.replace('[/actions ]', '/' + args['actions '])
			if (args['actions ']) delete args['actions ']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_format'])
			if (args['actions_format']) delete args['actions_format']
		}
		if (url.indexOf('[/actions_format]') !== -1) {
			url = url.replace('[/actions_format]', '/' + args['actions_format'])
			if (args['actions_format']) delete args['actions_format']
		}
		var rgx = new RegExp('\{actions_since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		if (url.indexOf('[/actions_since]') !== -1) {
			url = url.replace('[/actions_since]', '/' + args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{card_attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_attachments'])
			if (args['card_attachments']) delete args['card_attachments']
		}
		if (url.indexOf('[/card_attachments]') !== -1) {
			url = url.replace('[/card_attachments]', '/' + args['card_attachments'])
			if (args['card_attachments']) delete args['card_attachments']
		}
		var rgx = new RegExp('\{card_attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_attachment_fields'])
			if (args['card_attachment_fields']) delete args['card_attachment_fields']
		}
		if (url.indexOf('[/card_attachment_fields]') !== -1) {
			url = url.replace('[/card_attachment_fields]', '/' + args['card_attachment_fields'])
			if (args['card_attachment_fields']) delete args['card_attachment_fields']
		}
		var rgx = new RegExp('\{lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lists'])
			if (args['lists']) delete args['lists']
		}
		if (url.indexOf('[/lists]') !== -1) {
			url = url.replace('[/lists]', '/' + args['lists'])
			if (args['lists']) delete args['lists']
		}
		var rgx = new RegExp('\{list_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		if (url.indexOf('[/list_fields]') !== -1) {
			url = url.replace('[/list_fields]', '/' + args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{membersInvited\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['membersInvited'])
			if (args['membersInvited']) delete args['membersInvited']
		}
		if (url.indexOf('[/membersInvited]') !== -1) {
			url = url.replace('[/membersInvited]', '/' + args['membersInvited'])
			if (args['membersInvited']) delete args['membersInvited']
		}
		var rgx = new RegExp('\{membersInvited_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['membersInvited_fields'])
			if (args['membersInvited_fields']) delete args['membersInvited_fields']
		}
		if (url.indexOf('[/membersInvited_fields]') !== -1) {
			url = url.replace('[/membersInvited_fields]', '/' + args['membersInvited_fields'])
			if (args['membersInvited_fields']) delete args['membersInvited_fields']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{checklist_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklist_fields'])
			if (args['checklist_fields']) delete args['checklist_fields']
		}
		if (url.indexOf('[/checklist_fields]') !== -1) {
			url = url.replace('[/checklist_fields]', '/' + args['checklist_fields'])
			if (args['checklist_fields']) delete args['checklist_fields']
		}
		var rgx = new RegExp('\{organization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization'])
			if (args['organization']) delete args['organization']
		}
		if (url.indexOf('[/organization]') !== -1) {
			url = url.replace('[/organization]', '/' + args['organization'])
			if (args['organization']) delete args['organization']
		}
		var rgx = new RegExp('\{organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		if (url.indexOf('[/organization_fields]') !== -1) {
			url = url.replace('[/organization_fields]', '/' + args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		var rgx = new RegExp('\{myPrefs\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['myPrefs'])
			if (args['myPrefs']) delete args['myPrefs']
		}
		if (url.indexOf('[/myPrefs]') !== -1) {
			url = url.replace('[/myPrefs]', '/' + args['myPrefs'])
			if (args['myPrefs']) delete args['myPrefs']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/actions ]') !== -1) url = url.replace('[/actions ]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_format]') !== -1) url = url.replace('[/actions_format]', '')
		if (url.indexOf('[/actions_since]') !== -1) url = url.replace('[/actions_since]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/card_attachments]') !== -1) url = url.replace('[/card_attachments]', '')
		if (url.indexOf('[/card_attachment_fields]') !== -1) url = url.replace('[/card_attachment_fields]', '')
		if (url.indexOf('[/lists]') !== -1) url = url.replace('[/lists]', '')
		if (url.indexOf('[/list_fields]') !== -1) url = url.replace('[/list_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/membersInvited]') !== -1) url = url.replace('[/membersInvited]', '')
		if (url.indexOf('[/membersInvited_fields]') !== -1) url = url.replace('[/membersInvited_fields]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/checklist_fields]') !== -1) url = url.replace('[/checklist_fields]', '')
		if (url.indexOf('[/organization]') !== -1) url = url.replace('[/organization]', '')
		if (url.indexOf('[/organization_fields]') !== -1) url = url.replace('[/organization_fields]', '')
		if (url.indexOf('[/myPrefs]') !== -1) url = url.replace('[/myPrefs]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardField': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/{field}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardAction': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/actions'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['entities'] == null) throw new Error('entities is a required parameter')
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (args['fields'] == null) throw new Error('fields is a required parameter')
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (args['limit'] == null) throw new Error('limit is a required parameter')
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['format'] == null) throw new Error('format is a required parameter')
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['since'] == null) throw new Error('since is a required parameter')
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (args['before'] == null) throw new Error('before is a required parameter')
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		if (args['page'] == null) throw new Error('page is a required parameter')
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (args['idModels'] == null) throw new Error('idModels is a required parameter')
		var rgx = new RegExp('\{idModels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idModels]') !== -1) {
			url = url.replace('[/idModels]', '/' + args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/idModels]') !== -1) url = url.replace('[/idModels]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardCards': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/cards'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['actions'] == null) throw new Error('actions is a required parameter')
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (args['attachments'] == null) throw new Error('attachments is a required parameter')
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (args['attachment_fields'] == null) throw new Error('attachment_fields is a required parameter')
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (args['members'] == null) throw new Error('members is a required parameter')
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		if (args['member_fields'] == null) throw new Error('member_fields is a required parameter')
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (args['checkItemStates'] == null) throw new Error('checkItemStates is a required parameter')
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (args['checklists'] == null) throw new Error('checklists is a required parameter')
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (args['fields'] == null) throw new Error('fields is a required parameter')
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardCardsFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/cards/{filter}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardByCardId': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/cards/{idCard}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['idCard'] == null) throw new Error('idCard is a required parameter')
		var rgx = new RegExp('\{idCard\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCard'])
			if (args['idCard']) delete args['idCard']
		}
		if (url.indexOf('[/idCard]') !== -1) {
			url = url.replace('[/idCard]', '/' + args['idCard'])
			if (args['idCard']) delete args['idCard']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checkItemState_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemState_fields'])
			if (args['checkItemState_fields']) delete args['checkItemState_fields']
		}
		if (url.indexOf('[/checkItemState_fields]') !== -1) {
			url = url.replace('[/checkItemState_fields]', '/' + args['checkItemState_fields'])
			if (args['checkItemState_fields']) delete args['checkItemState_fields']
		}
		var rgx = new RegExp('\{labels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['labels'])
			if (args['labels']) delete args['labels']
		}
		if (url.indexOf('[/labels]') !== -1) {
			url = url.replace('[/labels]', '/' + args['labels'])
			if (args['labels']) delete args['labels']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{checklist_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklist_fields'])
			if (args['checklist_fields']) delete args['checklist_fields']
		}
		if (url.indexOf('[/checklist_fields]') !== -1) {
			url = url.replace('[/checklist_fields]', '/' + args['checklist_fields'])
			if (args['checklist_fields']) delete args['checklist_fields']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/idCard]') !== -1) url = url.replace('[/idCard]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checkItemState_fields]') !== -1) url = url.replace('[/checkItemState_fields]', '')
		if (url.indexOf('[/labels]') !== -1) url = url.replace('[/labels]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/checklist_fields]') !== -1) url = url.replace('[/checklist_fields]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardChecklists': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/checklists'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{checkItems\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItems'])
			if (args['checkItems']) delete args['checkItems']
		}
		if (url.indexOf('[/checkItems]') !== -1) {
			url = url.replace('[/checkItems]', '/' + args['checkItems'])
			if (args['checkItems']) delete args['checkItems']
		}
		var rgx = new RegExp('\{checkItem_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItem_fields'])
			if (args['checkItem_fields']) delete args['checkItem_fields']
		}
		if (url.indexOf('[/checkItem_fields]') !== -1) {
			url = url.replace('[/checkItem_fields]', '/' + args['checkItem_fields'])
			if (args['checkItem_fields']) delete args['checkItem_fields']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/checkItems]') !== -1) url = url.replace('[/checkItems]', '')
		if (url.indexOf('[/checkItem_fields]') !== -1) url = url.replace('[/checkItem_fields]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardLists': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/lists'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardListsWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/lists/{filter}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardMembers': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/members'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (args['fields'] == null) throw new Error('fields is a required parameter')
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (args['activity'] == null) throw new Error('activity is a required parameter')
		var rgx = new RegExp('\{activity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['activity'])
			if (args['activity']) delete args['activity']
		}
		if (url.indexOf('[/activity]') !== -1) {
			url = url.replace('[/activity]', '/' + args['activity'])
			if (args['activity']) delete args['activity']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/activity]') !== -1) url = url.replace('[/activity]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardMembersWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/members/{filter}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardMemberWithCard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/members/{idMember}/cards'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{board\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board'])
			if (args['board']) delete args['board']
		}
		if (url.indexOf('[/board]') !== -1) {
			url = url.replace('[/board]', '/' + args['board'])
			if (args['board']) delete args['board']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{list\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list'])
			if (args['list']) delete args['list']
		}
		if (url.indexOf('[/list]') !== -1) {
			url = url.replace('[/list]', '/' + args['list'])
			if (args['list']) delete args['list']
		}
		var rgx = new RegExp('\{list_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		if (url.indexOf('[/list_fields]') !== -1) {
			url = url.replace('[/list_fields]', '/' + args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/board]') !== -1) url = url.replace('[/board]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/list]') !== -1) url = url.replace('[/list]', '')
		if (url.indexOf('[/list_fields]') !== -1) url = url.replace('[/list_fields]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardMemberInvited': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/membersInvited'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardMemberInvitedWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/membersInvited/{field}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardPrefs': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/myPrefs'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/organization'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getBoardOrganizationWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/organization/{field}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'createBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		var rgx = new RegExp('\{closed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['closed'])
			if (args['closed']) delete args['closed']
		}
		if (url.indexOf('[/closed]') !== -1) {
			url = url.replace('[/closed]', '/' + args['closed'])
			if (args['closed']) delete args['closed']
		}
		var rgx = new RegExp('\{subscribed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subscribed'])
			if (args['subscribed']) delete args['subscribed']
		}
		if (url.indexOf('[/subscribed]') !== -1) {
			url = url.replace('[/subscribed]', '/' + args['subscribed'])
			if (args['subscribed']) delete args['subscribed']
		}
		var rgx = new RegExp('\{idOrganization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrganization'])
			if (args['idOrganization']) delete args['idOrganization']
		}
		if (url.indexOf('[/idOrganization]') !== -1) {
			url = url.replace('[/idOrganization]', '/' + args['idOrganization'])
			if (args['idOrganization']) delete args['idOrganization']
		}
		var rgx = new RegExp('\{prefs/permissionLevel\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/permissionLevel'])
			if (args['prefs/permissionLevel']) delete args['prefs/permissionLevel']
		}
		if (url.indexOf('[/prefs/permissionLevel]') !== -1) {
			url = url.replace('[/prefs/permissionLevel]', '/' + args['prefs/permissionLevel'])
			if (args['prefs/permissionLevel']) delete args['prefs/permissionLevel']
		}
		var rgx = new RegExp('\{prefs/selfJoin\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/selfJoin'])
			if (args['prefs/selfJoin']) delete args['prefs/selfJoin']
		}
		if (url.indexOf('[/prefs/selfJoin]') !== -1) {
			url = url.replace('[/prefs/selfJoin]', '/' + args['prefs/selfJoin'])
			if (args['prefs/selfJoin']) delete args['prefs/selfJoin']
		}
		var rgx = new RegExp('\{prefs/cardCovers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/cardCovers'])
			if (args['prefs/cardCovers']) delete args['prefs/cardCovers']
		}
		if (url.indexOf('[/prefs/cardCovers]') !== -1) {
			url = url.replace('[/prefs/cardCovers]', '/' + args['prefs/cardCovers'])
			if (args['prefs/cardCovers']) delete args['prefs/cardCovers']
		}
		var rgx = new RegExp('\{prefs/invitations\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/invitations'])
			if (args['prefs/invitations']) delete args['prefs/invitations']
		}
		if (url.indexOf('[/prefs/invitations]') !== -1) {
			url = url.replace('[/prefs/invitations]', '/' + args['prefs/invitations'])
			if (args['prefs/invitations']) delete args['prefs/invitations']
		}
		var rgx = new RegExp('\{prefs/voting\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/voting'])
			if (args['prefs/voting']) delete args['prefs/voting']
		}
		if (url.indexOf('[/prefs/voting]') !== -1) {
			url = url.replace('[/prefs/voting]', '/' + args['prefs/voting'])
			if (args['prefs/voting']) delete args['prefs/voting']
		}
		var rgx = new RegExp('\{prefs/comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/comments'])
			if (args['prefs/comments']) delete args['prefs/comments']
		}
		if (url.indexOf('[/prefs/comments]') !== -1) {
			url = url.replace('[/prefs/comments]', '/' + args['prefs/comments'])
			if (args['prefs/comments']) delete args['prefs/comments']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		if (url.indexOf('[/closed]') !== -1) url = url.replace('[/closed]', '')
		if (url.indexOf('[/subscribed]') !== -1) url = url.replace('[/subscribed]', '')
		if (url.indexOf('[/idOrganization]') !== -1) url = url.replace('[/idOrganization]', '')
		if (url.indexOf('[/prefs/permissionLevel]') !== -1) url = url.replace('[/prefs/permissionLevel]', '')
		if (url.indexOf('[/prefs/selfJoin]') !== -1) url = url.replace('[/prefs/selfJoin]', '')
		if (url.indexOf('[/prefs/cardCovers]') !== -1) url = url.replace('[/prefs/cardCovers]', '')
		if (url.indexOf('[/prefs/invitations]') !== -1) url = url.replace('[/prefs/invitations]', '')
		if (url.indexOf('[/prefs/voting]') !== -1) url = url.replace('[/prefs/voting]', '')
		if (url.indexOf('[/prefs/comments]') !== -1) url = url.replace('[/prefs/comments]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'closedBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/closed'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putBoardDesc': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/desc'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putBoardOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/idOrganization'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardMember': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/members/{idMember}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'renameBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/name'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardPrefCardCovers': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/prefs/cardCovers'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardPrefComments': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/prefs/comments'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardPrefInvitations': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/prefs/invitations'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardPrefPermissionLevel': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/prefs/permissionLevel'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardPrefSelfJoin': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/prefs/selfjoin'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addBoardPrefVoting': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/prefs/voting'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'subscribedToABoard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/subscribed'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'postBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//boards'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		var rgx = new RegExp('\{idOrganization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrganization'])
			if (args['idOrganization']) delete args['idOrganization']
		}
		if (url.indexOf('[/idOrganization]') !== -1) {
			url = url.replace('[/idOrganization]', '/' + args['idOrganization'])
			if (args['idOrganization']) delete args['idOrganization']
		}
		var rgx = new RegExp('\{idBoardSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idBoardSource'])
			if (args['idBoardSource']) delete args['idBoardSource']
		}
		if (url.indexOf('[/idBoardSource]') !== -1) {
			url = url.replace('[/idBoardSource]', '/' + args['idBoardSource'])
			if (args['idBoardSource']) delete args['idBoardSource']
		}
		var rgx = new RegExp('\{keepFromSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['keepFromSource'])
			if (args['keepFromSource']) delete args['keepFromSource']
		}
		if (url.indexOf('[/keepFromSource]') !== -1) {
			url = url.replace('[/keepFromSource]', '/' + args['keepFromSource'])
			if (args['keepFromSource']) delete args['keepFromSource']
		}
		var rgx = new RegExp('\{prefs_permissionLevel\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs_permissionLevel'])
			if (args['prefs_permissionLevel']) delete args['prefs_permissionLevel']
		}
		if (url.indexOf('[/prefs_permissionLevel]') !== -1) {
			url = url.replace('[/prefs_permissionLevel]', '/' + args['prefs_permissionLevel'])
			if (args['prefs_permissionLevel']) delete args['prefs_permissionLevel']
		}
		var rgx = new RegExp('\{prefs_voting\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs_voting'])
			if (args['prefs_voting']) delete args['prefs_voting']
		}
		if (url.indexOf('[/prefs_voting]') !== -1) {
			url = url.replace('[/prefs_voting]', '/' + args['prefs_voting'])
			if (args['prefs_voting']) delete args['prefs_voting']
		}
		var rgx = new RegExp('\{prefs_comments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs_comments'])
			if (args['prefs_comments']) delete args['prefs_comments']
		}
		if (url.indexOf('[/prefs_comments]') !== -1) {
			url = url.replace('[/prefs_comments]', '/' + args['prefs_comments'])
			if (args['prefs_comments']) delete args['prefs_comments']
		}
		var rgx = new RegExp('\{prefs_invitations\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs_invitations'])
			if (args['prefs_invitations']) delete args['prefs_invitations']
		}
		if (url.indexOf('[/prefs_invitations]') !== -1) {
			url = url.replace('[/prefs_invitations]', '/' + args['prefs_invitations'])
			if (args['prefs_invitations']) delete args['prefs_invitations']
		}
		var rgx = new RegExp('\{prefs_selfJoin\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs_selfJoin'])
			if (args['prefs_selfJoin']) delete args['prefs_selfJoin']
		}
		if (url.indexOf('[/prefs_selfJoin]') !== -1) {
			url = url.replace('[/prefs_selfJoin]', '/' + args['prefs_selfJoin'])
			if (args['prefs_selfJoin']) delete args['prefs_selfJoin']
		}
		var rgx = new RegExp('\{prefs_cardCovers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs_cardCovers'])
			if (args['prefs_cardCovers']) delete args['prefs_cardCovers']
		}
		if (url.indexOf('[/prefs_cardCovers]') !== -1) {
			url = url.replace('[/prefs_cardCovers]', '/' + args['prefs_cardCovers'])
			if (args['prefs_cardCovers']) delete args['prefs_cardCovers']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		if (url.indexOf('[/idOrganization]') !== -1) url = url.replace('[/idOrganization]', '')
		if (url.indexOf('[/idBoardSource]') !== -1) url = url.replace('[/idBoardSource]', '')
		if (url.indexOf('[/keepFromSource]') !== -1) url = url.replace('[/keepFromSource]', '')
		if (url.indexOf('[/prefs_permissionLevel]') !== -1) url = url.replace('[/prefs_permissionLevel]', '')
		if (url.indexOf('[/prefs_voting]') !== -1) url = url.replace('[/prefs_voting]', '')
		if (url.indexOf('[/prefs_comments]') !== -1) url = url.replace('[/prefs_comments]', '')
		if (url.indexOf('[/prefs_invitations]') !== -1) url = url.replace('[/prefs_invitations]', '')
		if (url.indexOf('[/prefs_selfJoin]') !== -1) url = url.replace('[/prefs_selfJoin]', '')
		if (url.indexOf('[/prefs_cardCovers]') !== -1) url = url.replace('[/prefs_cardCovers]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postBoardChecklists': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/checklists'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postBoardInvitations': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/invitations'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'responseToBoardInvitations': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/invitations/{response}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['response'] == null) throw new Error('response is a required parameter')
		var rgx = new RegExp('\{response\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['response'])
			if (args['response']) delete args['response']
		}
		if (url.indexOf('[/response]') !== -1) {
			url = url.replace('[/response]', '/' + args['response'])
			if (args['response']) delete args['response']
		}
		var rgx = new RegExp('\{invitationTokens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['invitationTokens'])
			if (args['invitationTokens']) delete args['invitationTokens']
		}
		if (url.indexOf('[/invitationTokens]') !== -1) {
			url = url.replace('[/invitationTokens]', '/' + args['invitationTokens'])
			if (args['invitationTokens']) delete args['invitationTokens']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/response]') !== -1) url = url.replace('[/response]', '')
		if (url.indexOf('[/invitationTokens]') !== -1) url = url.replace('[/invitationTokens]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postBoardLists': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/lists'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'markBoardAsViewed': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/markAsViewed'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postBoardPrefs': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/myPrefs'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'deleteBoardInvitation': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/invitations/{idInvitation}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['idInvitation'] == null) throw new Error('idInvitation is a required parameter')
		var rgx = new RegExp('\{idInvitation\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idInvitation'])
			if (args['idInvitation']) delete args['idInvitation']
		}
		if (url.indexOf('[/idInvitation]') !== -1) {
			url = url.replace('[/idInvitation]', '/' + args['idInvitation'])
			if (args['idInvitation']) delete args['idInvitation']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/idInvitation]') !== -1) url = url.replace('[/idInvitation]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteBoardMember': function(args, opts) {
		var url = 'https://api.trello.com/1//boards/{board_id}/members/{idMember}'
		args = args || {}
		if (args['board_id'] == null) throw new Error('board_id is a required parameter')
		var rgx = new RegExp('\{board_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (url.indexOf('[/board_id]') !== -1) {
			url = url.replace('[/board_id]', '/' + args['board_id'])
			if (args['board_id']) delete args['board_id']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/board_id]') !== -1) url = url.replace('[/board_id]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'getCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checkItemState_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemState_fields'])
			if (args['checkItemState_fields']) delete args['checkItemState_fields']
		}
		if (url.indexOf('[/checkItemState_fields]') !== -1) {
			url = url.replace('[/checkItemState_fields]', '/' + args['checkItemState_fields'])
			if (args['checkItemState_fields']) delete args['checkItemState_fields']
		}
		var rgx = new RegExp('\{board\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board'])
			if (args['board']) delete args['board']
		}
		if (url.indexOf('[/board]') !== -1) {
			url = url.replace('[/board]', '/' + args['board'])
			if (args['board']) delete args['board']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{list\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list'])
			if (args['list']) delete args['list']
		}
		if (url.indexOf('[/list]') !== -1) {
			url = url.replace('[/list]', '/' + args['list'])
			if (args['list']) delete args['list']
		}
		var rgx = new RegExp('\{list_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		if (url.indexOf('[/list_fields]') !== -1) {
			url = url.replace('[/list_fields]', '/' + args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checkItemState_fields]') !== -1) url = url.replace('[/checkItemState_fields]', '')
		if (url.indexOf('[/board]') !== -1) url = url.replace('[/board]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/list]') !== -1) url = url.replace('[/list]', '')
		if (url.indexOf('[/list_fields]') !== -1) url = url.replace('[/list_fields]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/{field}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardActions': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/actions'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{idModels \}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idModels '])
			if (args['idModels ']) delete args['idModels ']
		}
		if (url.indexOf('[/idModels ]') !== -1) {
			url = url.replace('[/idModels ]', '/' + args['idModels '])
			if (args['idModels ']) delete args['idModels ']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/idModels ]') !== -1) url = url.replace('[/idModels ]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardAttachments': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/attachments'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/board'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardBoardWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/board/{field}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardCheckItemStates': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checkItemStates'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardChecklists': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checklists'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{checkItems\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItems'])
			if (args['checkItems']) delete args['checkItems']
		}
		if (url.indexOf('[/checkItems]') !== -1) {
			url = url.replace('[/checkItems]', '/' + args['checkItems'])
			if (args['checkItems']) delete args['checkItems']
		}
		var rgx = new RegExp('\{checkItem_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItem_fields'])
			if (args['checkItem_fields']) delete args['checkItem_fields']
		}
		if (url.indexOf('[/checkItem_fields]') !== -1) {
			url = url.replace('[/checkItem_fields]', '/' + args['checkItem_fields'])
			if (args['checkItem_fields']) delete args['checkItem_fields']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/checkItems]') !== -1) url = url.replace('[/checkItems]', '')
		if (url.indexOf('[/checkItem_fields]') !== -1) url = url.replace('[/checkItem_fields]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardList': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/list'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardListWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/list/{field}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardMembers': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/members'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getCardMembersVoted': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/membersVoted'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'createCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		var rgx = new RegExp('\{closed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['closed'])
			if (args['closed']) delete args['closed']
		}
		if (url.indexOf('[/closed]') !== -1) {
			url = url.replace('[/closed]', '/' + args['closed'])
			if (args['closed']) delete args['closed']
		}
		var rgx = new RegExp('\{idAttachmentCover\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAttachmentCover'])
			if (args['idAttachmentCover']) delete args['idAttachmentCover']
		}
		if (url.indexOf('[/idAttachmentCover]') !== -1) {
			url = url.replace('[/idAttachmentCover]', '/' + args['idAttachmentCover'])
			if (args['idAttachmentCover']) delete args['idAttachmentCover']
		}
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{idBoard\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		if (url.indexOf('[/idBoard]') !== -1) {
			url = url.replace('[/idBoard]', '/' + args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		var rgx = new RegExp('\{due\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['due'])
			if (args['due']) delete args['due']
		}
		if (url.indexOf('[/due]') !== -1) {
			url = url.replace('[/due]', '/' + args['due'])
			if (args['due']) delete args['due']
		}
		var rgx = new RegExp('\{warnWhenUpcoming\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['warnWhenUpcoming'])
			if (args['warnWhenUpcoming']) delete args['warnWhenUpcoming']
		}
		if (url.indexOf('[/warnWhenUpcoming]') !== -1) {
			url = url.replace('[/warnWhenUpcoming]', '/' + args['warnWhenUpcoming'])
			if (args['warnWhenUpcoming']) delete args['warnWhenUpcoming']
		}
		var rgx = new RegExp('\{subscribed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subscribed'])
			if (args['subscribed']) delete args['subscribed']
		}
		if (url.indexOf('[/subscribed]') !== -1) {
			url = url.replace('[/subscribed]', '/' + args['subscribed'])
			if (args['subscribed']) delete args['subscribed']
		}
		var rgx = new RegExp('\{suppressActions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['suppressActions'])
			if (args['suppressActions']) delete args['suppressActions']
		}
		if (url.indexOf('[/suppressActions]') !== -1) {
			url = url.replace('[/suppressActions]', '/' + args['suppressActions'])
			if (args['suppressActions']) delete args['suppressActions']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		if (url.indexOf('[/closed]') !== -1) url = url.replace('[/closed]', '')
		if (url.indexOf('[/idAttachmentCover]') !== -1) url = url.replace('[/idAttachmentCover]', '')
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/idBoard]') !== -1) url = url.replace('[/idBoard]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		if (url.indexOf('[/due]') !== -1) url = url.replace('[/due]', '')
		if (url.indexOf('[/warnWhenUpcoming]') !== -1) url = url.replace('[/warnWhenUpcoming]', '')
		if (url.indexOf('[/subscribed]') !== -1) url = url.replace('[/subscribed]', '')
		if (url.indexOf('[/suppressActions]') !== -1) url = url.replace('[/suppressActions]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addCardActionsComments': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/actions/{idAction}/comments'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['idActions'] == null) throw new Error('idActions is a required parameter')
		var rgx = new RegExp('\{idActions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idActions'])
			if (args['idActions']) delete args['idActions']
		}
		if (url.indexOf('[/idActions]') !== -1) {
			url = url.replace('[/idActions]', '/' + args['idActions'])
			if (args['idActions']) delete args['idActions']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idActions]') !== -1) url = url.replace('[/idActions]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'renameCardCheckItem': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checklist/{idCheckList}/checkItem/{idCheckItem}/name'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['idCheckList'] == null) throw new Error('idCheckList is a required parameter')
		var rgx = new RegExp('\{idCheckList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckList'])
			if (args['idCheckList']) delete args['idCheckList']
		}
		if (url.indexOf('[/idCheckList]') !== -1) {
			url = url.replace('[/idCheckList]', '/' + args['idCheckList'])
			if (args['idCheckList']) delete args['idCheckList']
		}
		if (args['idCheckItem'] == null) throw new Error('idCheckItem is a required parameter')
		var rgx = new RegExp('\{idCheckItem\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (url.indexOf('[/idCheckItem]') !== -1) {
			url = url.replace('[/idCheckItem]', '/' + args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idCheckList]') !== -1) url = url.replace('[/idCheckList]', '')
		if (url.indexOf('[/idCheckItem]') !== -1) url = url.replace('[/idCheckItem]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addCardCheckItemPos': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checklist/{idCheckList}/checkItem/{idCheckItem}/pos'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['idCheckList'] == null) throw new Error('idCheckList is a required parameter')
		var rgx = new RegExp('\{idCheckList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckList'])
			if (args['idCheckList']) delete args['idCheckList']
		}
		if (url.indexOf('[/idCheckList]') !== -1) {
			url = url.replace('[/idCheckList]', '/' + args['idCheckList'])
			if (args['idCheckList']) delete args['idCheckList']
		}
		if (args['idCheckItem'] == null) throw new Error('idCheckItem is a required parameter')
		var rgx = new RegExp('\{idCheckItem\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (url.indexOf('[/idCheckItem]') !== -1) {
			url = url.replace('[/idCheckItem]', '/' + args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idCheckList]') !== -1) url = url.replace('[/idCheckList]', '')
		if (url.indexOf('[/idCheckItem]') !== -1) url = url.replace('[/idCheckItem]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addCardCheckItemState': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checklist/{idCheckList}/checkItem/{idCheckItem}/state'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['idCheckList'] == null) throw new Error('idCheckList is a required parameter')
		var rgx = new RegExp('\{idCheckList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckList'])
			if (args['idCheckList']) delete args['idCheckList']
		}
		if (url.indexOf('[/idCheckList]') !== -1) {
			url = url.replace('[/idCheckList]', '/' + args['idCheckList'])
			if (args['idCheckList']) delete args['idCheckList']
		}
		if (args['idCheckItem'] == null) throw new Error('idCheckItem is a required parameter')
		var rgx = new RegExp('\{idCheckItem\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (url.indexOf('[/idCheckItem]') !== -1) {
			url = url.replace('[/idCheckItem]', '/' + args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idCheckList]') !== -1) url = url.replace('[/idCheckList]', '')
		if (url.indexOf('[/idCheckItem]') !== -1) url = url.replace('[/idCheckItem]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'closeCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/closed'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putCardDesc': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/desc'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putCardDue': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/due'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addCardCover': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/idAttachmentCover'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'moveCardBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/idBoard'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'moveCardList': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/idList'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'renameCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/name'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'changePostionCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/pos'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'subscribedToCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/subscribed'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'warnWhenUpcomingCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/warnWhenUpcoming'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'postCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{idCardSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCardSource'])
			if (args['idCardSource']) delete args['idCardSource']
		}
		if (url.indexOf('[/idCardSource]') !== -1) {
			url = url.replace('[/idCardSource]', '/' + args['idCardSource'])
			if (args['idCardSource']) delete args['idCardSource']
		}
		var rgx = new RegExp('\{keepFromSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['keepFromSource'])
			if (args['keepFromSource']) delete args['keepFromSource']
		}
		if (url.indexOf('[/keepFromSource]') !== -1) {
			url = url.replace('[/keepFromSource]', '/' + args['keepFromSource'])
			if (args['keepFromSource']) delete args['keepFromSource']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/idCardSource]') !== -1) url = url.replace('[/idCardSource]', '')
		if (url.indexOf('[/keepFromSource]') !== -1) url = url.replace('[/keepFromSource]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postCardActionComment': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/actions/comments'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postCardAttachment': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/attachments'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{file\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['file'])
			if (args['file']) delete args['file']
		}
		if (url.indexOf('[/file]') !== -1) {
			url = url.replace('[/file]', '/' + args['file'])
			if (args['file']) delete args['file']
		}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{mimeType\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mimeType'])
			if (args['mimeType']) delete args['mimeType']
		}
		if (url.indexOf('[/mimeType]') !== -1) {
			url = url.replace('[/mimeType]', '/' + args['mimeType'])
			if (args['mimeType']) delete args['mimeType']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/file]') !== -1) url = url.replace('[/file]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/mimeType]') !== -1) url = url.replace('[/mimeType]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postCardChecklist': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checklists'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{idChecklistSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklistSource'])
			if (args['idChecklistSource']) delete args['idChecklistSource']
		}
		if (url.indexOf('[/idChecklistSource]') !== -1) {
			url = url.replace('[/idChecklistSource]', '/' + args['idChecklistSource'])
			if (args['idChecklistSource']) delete args['idChecklistSource']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/idChecklistSource]') !== -1) url = url.replace('[/idChecklistSource]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postCardLabels': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/labels'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'addCardMember': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/members'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'addCardMemberVoted': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/membersVoted'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'deleteCard': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteCardActionComment': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/actions/{idAction}/comments'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['idAction'] == null) throw new Error('idAction is a required parameter')
		var rgx = new RegExp('\{idAction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/idAction]') !== -1) {
			url = url.replace('[/idAction]', '/' + args['idAction'])
			if (args['idAction']) delete args['idAction']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idAction]') !== -1) url = url.replace('[/idAction]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteCardAttachment': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/attachments/{idAttachment}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (args['idAttachment'] == null) throw new Error('idAttachment is a required parameter')
		var rgx = new RegExp('\{idAttachment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idAttachment'])
			if (args['idAttachment']) delete args['idAttachment']
		}
		if (url.indexOf('[/idAttachment]') !== -1) {
			url = url.replace('[/idAttachment]', '/' + args['idAttachment'])
			if (args['idAttachment']) delete args['idAttachment']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idAttachment]') !== -1) url = url.replace('[/idAttachment]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteCardChecklist': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/checklists/{idChecklist}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteCardLabelColor': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/labels/{color}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{color\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['color'])
			if (args['color']) delete args['color']
		}
		if (url.indexOf('[/color]') !== -1) {
			url = url.replace('[/color]', '/' + args['color'])
			if (args['color']) delete args['color']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/color]') !== -1) url = url.replace('[/color]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteCardMember': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/members/{idMember}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteCardMemberVoted': function(args, opts) {
		var url = 'https://api.trello.com/1//cards/{card_id}/membersVoted/{idMember}'
		args = args || {}
		if (args['card_id'] == null) throw new Error('card_id is a required parameter')
		var rgx = new RegExp('\{card_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		if (url.indexOf('[/card_id]') !== -1) {
			url = url.replace('[/card_id]', '/' + args['card_id'])
			if (args['card_id']) delete args['card_id']
		}
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/card_id]') !== -1) url = url.replace('[/card_id]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'getChecklist': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{checkItems\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItems'])
			if (args['checkItems']) delete args['checkItems']
		}
		if (url.indexOf('[/checkItems]') !== -1) {
			url = url.replace('[/checkItems]', '/' + args['checkItems'])
			if (args['checkItems']) delete args['checkItems']
		}
		var rgx = new RegExp('\{checkItem_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItem_fields'])
			if (args['checkItem_fields']) delete args['checkItem_fields']
		}
		if (url.indexOf('[/checkItem_fields]') !== -1) {
			url = url.replace('[/checkItem_fields]', '/' + args['checkItem_fields'])
			if (args['checkItem_fields']) delete args['checkItem_fields']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/checkItems]') !== -1) url = url.replace('[/checkItems]', '')
		if (url.indexOf('[/checkItem_fields]') !== -1) url = url.replace('[/checkItem_fields]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getChecklistWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/{field}'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getChecklistBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/board'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getChecklistBoardWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/board/{field}'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getChecklistCard': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/cards'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getChecklistCardWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/cards/{filter}'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getChecklistCheckItem': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/checkItems'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'putChecklist': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'none'}, opts)
	},
	'renameChecklist': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/name'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'none'}, opts)
	},
	'createChecklist': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist'
		args = args || {}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (args['idBoard'] == null) throw new Error('idBoard is a required parameter')
		var rgx = new RegExp('\{idBoard\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		if (url.indexOf('[/idBoard]') !== -1) {
			url = url.replace('[/idBoard]', '/' + args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		var rgx = new RegExp('\{idChecklistSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklistSource'])
			if (args['idChecklistSource']) delete args['idChecklistSource']
		}
		if (url.indexOf('[/idChecklistSource]') !== -1) {
			url = url.replace('[/idChecklistSource]', '/' + args['idChecklistSource'])
			if (args['idChecklistSource']) delete args['idChecklistSource']
		}
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		if (url.indexOf('[/idBoard]') !== -1) url = url.replace('[/idBoard]', '')
		if (url.indexOf('[/idChecklistSource]') !== -1) url = url.replace('[/idChecklistSource]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'addChecklistCheckItems': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/checkItems'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'deleteChecklistCheckItems': function(args, opts) {
		var url = 'https://api.trello.com/1//checklist/{idChecklist}/checkItems/{idCheckItem}'
		args = args || {}
		if (args['idChecklist'] == null) throw new Error('idChecklist is a required parameter')
		var rgx = new RegExp('\{idChecklist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (url.indexOf('[/idChecklist]') !== -1) {
			url = url.replace('[/idChecklist]', '/' + args['idChecklist'])
			if (args['idChecklist']) delete args['idChecklist']
		}
		if (args['idCheckItem'] == null) throw new Error('idCheckItem is a required parameter')
		var rgx = new RegExp('\{idCheckItem\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (url.indexOf('[/idCheckItem]') !== -1) {
			url = url.replace('[/idCheckItem]', '/' + args['idCheckItem'])
			if (args['idCheckItem']) delete args['idCheckItem']
		}
		if (url.indexOf('[/idChecklist]') !== -1) url = url.replace('[/idChecklist]', '')
		if (url.indexOf('[/idCheckItem]') !== -1) url = url.replace('[/idCheckItem]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'none'}, opts)
	},
	'getList': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getListWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/{field}'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getListAction': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/actions'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{idModels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idModels]') !== -1) {
			url = url.replace('[/idModels]', '/' + args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/idModels]') !== -1) url = url.replace('[/idModels]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getListBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/board'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getListBoardWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/board/{field}'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getListCard': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/board/cards'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getListCarddWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/cards/{field}'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'putList': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{closed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['closed'])
			if (args['closed']) delete args['closed']
		}
		if (url.indexOf('[/closed]') !== -1) {
			url = url.replace('[/closed]', '/' + args['closed'])
			if (args['closed']) delete args['closed']
		}
		var rgx = new RegExp('\{idBoard\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		if (url.indexOf('[/idBoard]') !== -1) {
			url = url.replace('[/idBoard]', '/' + args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		var rgx = new RegExp('\{subscribed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subscribed'])
			if (args['subscribed']) delete args['subscribed']
		}
		if (url.indexOf('[/subscribed]') !== -1) {
			url = url.replace('[/subscribed]', '/' + args['subscribed'])
			if (args['subscribed']) delete args['subscribed']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/closed]') !== -1) url = url.replace('[/closed]', '')
		if (url.indexOf('[/idBoard]') !== -1) url = url.replace('[/idBoard]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		if (url.indexOf('[/subscribed]') !== -1) url = url.replace('[/subscribed]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'closeList': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/closed'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'moveListInBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/idBoard'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'renameList': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/name'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'moveList': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/pos'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'subescribeList': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/subscribed'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'createList': function(args, opts) {
		var url = 'https://api.trello.com/1//list'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['idBoard'] == null) throw new Error('idBoard is a required parameter')
		var rgx = new RegExp('\{idBoard\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		if (url.indexOf('[/idBoard]') !== -1) {
			url = url.replace('[/idBoard]', '/' + args['idBoard'])
			if (args['idBoard']) delete args['idBoard']
		}
		var rgx = new RegExp('\{idListSource\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idListSource'])
			if (args['idListSource']) delete args['idListSource']
		}
		if (url.indexOf('[/idListSource]') !== -1) {
			url = url.replace('[/idListSource]', '/' + args['idListSource'])
			if (args['idListSource']) delete args['idListSource']
		}
		var rgx = new RegExp('\{pos\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/pos]') !== -1) {
			url = url.replace('[/pos]', '/' + args['pos'])
			if (args['pos']) delete args['pos']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/idBoard]') !== -1) url = url.replace('[/idBoard]', '')
		if (url.indexOf('[/idListSource]') !== -1) url = url.replace('[/idListSource]', '')
		if (url.indexOf('[/pos]') !== -1) url = url.replace('[/pos]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'createListCard': function(args, opts) {
		var url = 'https://api.trello.com/1//list/{idList}/cards'
		args = args || {}
		if (args['idList'] == null) throw new Error('idList is a required parameter')
		var rgx = new RegExp('\{idList\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (url.indexOf('[/idList]') !== -1) {
			url = url.replace('[/idList]', '/' + args['idList'])
			if (args['idList']) delete args['idList']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/idList]') !== -1) url = url.replace('[/idList]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'getMember': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{cards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards'])
			if (args['cards']) delete args['cards']
		}
		if (url.indexOf('[/cards]') !== -1) {
			url = url.replace('[/cards]', '/' + args['cards'])
			if (args['cards']) delete args['cards']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{card_members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_members'])
			if (args['card_members']) delete args['card_members']
		}
		if (url.indexOf('[/card_members]') !== -1) {
			url = url.replace('[/card_members]', '/' + args['card_members'])
			if (args['card_members']) delete args['card_members']
		}
		var rgx = new RegExp('\{card_member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_member_fields'])
			if (args['card_member_fields']) delete args['card_member_fields']
		}
		if (url.indexOf('[/card_member_fields]') !== -1) {
			url = url.replace('[/card_member_fields]', '/' + args['card_member_fields'])
			if (args['card_member_fields']) delete args['card_member_fields']
		}
		var rgx = new RegExp('\{card_attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_attachments'])
			if (args['card_attachments']) delete args['card_attachments']
		}
		if (url.indexOf('[/card_attachments]') !== -1) {
			url = url.replace('[/card_attachments]', '/' + args['card_attachments'])
			if (args['card_attachments']) delete args['card_attachments']
		}
		var rgx = new RegExp('\{card_attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_attachment_fields'])
			if (args['card_attachment_fields']) delete args['card_attachment_fields']
		}
		if (url.indexOf('[/card_attachment_fields]') !== -1) {
			url = url.replace('[/card_attachment_fields]', '/' + args['card_attachment_fields'])
			if (args['card_attachment_fields']) delete args['card_attachment_fields']
		}
		var rgx = new RegExp('\{boards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['boards'])
			if (args['boards']) delete args['boards']
		}
		if (url.indexOf('[/boards]') !== -1) {
			url = url.replace('[/boards]', '/' + args['boards'])
			if (args['boards']) delete args['boards']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{board_actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions'])
			if (args['board_actions']) delete args['board_actions']
		}
		if (url.indexOf('[/board_actions]') !== -1) {
			url = url.replace('[/board_actions]', '/' + args['board_actions'])
			if (args['board_actions']) delete args['board_actions']
		}
		var rgx = new RegExp('\{board_actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_entities'])
			if (args['board_actions_entities']) delete args['board_actions_entities']
		}
		if (url.indexOf('[/board_actions_entities]') !== -1) {
			url = url.replace('[/board_actions_entities]', '/' + args['board_actions_entities'])
			if (args['board_actions_entities']) delete args['board_actions_entities']
		}
		var rgx = new RegExp('\{board_actions_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_format'])
			if (args['board_actions_format']) delete args['board_actions_format']
		}
		if (url.indexOf('[/board_actions_format]') !== -1) {
			url = url.replace('[/board_actions_format]', '/' + args['board_actions_format'])
			if (args['board_actions_format']) delete args['board_actions_format']
		}
		var rgx = new RegExp('\{board_actions_since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_since'])
			if (args['board_actions_since']) delete args['board_actions_since']
		}
		if (url.indexOf('[/board_actions_since]') !== -1) {
			url = url.replace('[/board_actions_since]', '/' + args['board_actions_since'])
			if (args['board_actions_since']) delete args['board_actions_since']
		}
		var rgx = new RegExp('\{board_actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_limit'])
			if (args['board_actions_limit']) delete args['board_actions_limit']
		}
		if (url.indexOf('[/board_actions_limit]') !== -1) {
			url = url.replace('[/board_actions_limit]', '/' + args['board_actions_limit'])
			if (args['board_actions_limit']) delete args['board_actions_limit']
		}
		var rgx = new RegExp('\{board_action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_action_fields'])
			if (args['board_action_fields']) delete args['board_action_fields']
		}
		if (url.indexOf('[/board_action_fields]') !== -1) {
			url = url.replace('[/board_action_fields]', '/' + args['board_action_fields'])
			if (args['board_action_fields']) delete args['board_action_fields']
		}
		var rgx = new RegExp('\{board_lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_lists'])
			if (args['board_lists']) delete args['board_lists']
		}
		if (url.indexOf('[/board_lists]') !== -1) {
			url = url.replace('[/board_lists]', '/' + args['board_lists'])
			if (args['board_lists']) delete args['board_lists']
		}
		var rgx = new RegExp('\{board_organization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_organization'])
			if (args['board_organization']) delete args['board_organization']
		}
		if (url.indexOf('[/board_organization]') !== -1) {
			url = url.replace('[/board_organization]', '/' + args['board_organization'])
			if (args['board_organization']) delete args['board_organization']
		}
		var rgx = new RegExp('\{board_organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_organization_fields'])
			if (args['board_organization_fields']) delete args['board_organization_fields']
		}
		if (url.indexOf('[/board_organization_fields]') !== -1) {
			url = url.replace('[/board_organization_fields]', '/' + args['board_organization_fields'])
			if (args['board_organization_fields']) delete args['board_organization_fields']
		}
		var rgx = new RegExp('\{boardsInvited\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['boardsInvited'])
			if (args['boardsInvited']) delete args['boardsInvited']
		}
		if (url.indexOf('[/boardsInvited]') !== -1) {
			url = url.replace('[/boardsInvited]', '/' + args['boardsInvited'])
			if (args['boardsInvited']) delete args['boardsInvited']
		}
		var rgx = new RegExp('\{boardsInvited_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['boardsInvited_fields'])
			if (args['boardsInvited_fields']) delete args['boardsInvited_fields']
		}
		if (url.indexOf('[/boardsInvited_fields]') !== -1) {
			url = url.replace('[/boardsInvited_fields]', '/' + args['boardsInvited_fields'])
			if (args['boardsInvited_fields']) delete args['boardsInvited_fields']
		}
		var rgx = new RegExp('\{organizations\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organizations'])
			if (args['organizations']) delete args['organizations']
		}
		if (url.indexOf('[/organizations]') !== -1) {
			url = url.replace('[/organizations]', '/' + args['organizations'])
			if (args['organizations']) delete args['organizations']
		}
		var rgx = new RegExp('\{organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		if (url.indexOf('[/organization_fields]') !== -1) {
			url = url.replace('[/organization_fields]', '/' + args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		var rgx = new RegExp('\{organization_paid_account\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_paid_account'])
			if (args['organization_paid_account']) delete args['organization_paid_account']
		}
		if (url.indexOf('[/organization_paid_account]') !== -1) {
			url = url.replace('[/organization_paid_account]', '/' + args['organization_paid_account'])
			if (args['organization_paid_account']) delete args['organization_paid_account']
		}
		var rgx = new RegExp('\{organizationsInvited\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organizationsInvited'])
			if (args['organizationsInvited']) delete args['organizationsInvited']
		}
		if (url.indexOf('[/organizationsInvited]') !== -1) {
			url = url.replace('[/organizationsInvited]', '/' + args['organizationsInvited'])
			if (args['organizationsInvited']) delete args['organizationsInvited']
		}
		var rgx = new RegExp('\{organizationsInvited_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organizationsInvited_fields'])
			if (args['organizationsInvited_fields']) delete args['organizationsInvited_fields']
		}
		if (url.indexOf('[/organizationsInvited_fields]') !== -1) {
			url = url.replace('[/organizationsInvited_fields]', '/' + args['organizationsInvited_fields'])
			if (args['organizationsInvited_fields']) delete args['organizationsInvited_fields']
		}
		var rgx = new RegExp('\{notifications\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notifications'])
			if (args['notifications']) delete args['notifications']
		}
		if (url.indexOf('[/notifications]') !== -1) {
			url = url.replace('[/notifications]', '/' + args['notifications'])
			if (args['notifications']) delete args['notifications']
		}
		var rgx = new RegExp('\{notifications_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notifications_entities'])
			if (args['notifications_entities']) delete args['notifications_entities']
		}
		if (url.indexOf('[/notifications_entities]') !== -1) {
			url = url.replace('[/notifications_entities]', '/' + args['notifications_entities'])
			if (args['notifications_entities']) delete args['notifications_entities']
		}
		var rgx = new RegExp('\{notifications_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notifications_limit'])
			if (args['notifications_limit']) delete args['notifications_limit']
		}
		if (url.indexOf('[/notifications_limit]') !== -1) {
			url = url.replace('[/notifications_limit]', '/' + args['notifications_limit'])
			if (args['notifications_limit']) delete args['notifications_limit']
		}
		var rgx = new RegExp('\{notification_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notification_fields'])
			if (args['notification_fields']) delete args['notification_fields']
		}
		if (url.indexOf('[/notification_fields]') !== -1) {
			url = url.replace('[/notification_fields]', '/' + args['notification_fields'])
			if (args['notification_fields']) delete args['notification_fields']
		}
		var rgx = new RegExp('\{notification_memberCreator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notification_memberCreator'])
			if (args['notification_memberCreator']) delete args['notification_memberCreator']
		}
		if (url.indexOf('[/notification_memberCreator]') !== -1) {
			url = url.replace('[/notification_memberCreator]', '/' + args['notification_memberCreator'])
			if (args['notification_memberCreator']) delete args['notification_memberCreator']
		}
		var rgx = new RegExp('\{notification_memberCreator_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notification_memberCreator_fields'])
			if (args['notification_memberCreator_fields']) delete args['notification_memberCreator_fields']
		}
		if (url.indexOf('[/notification_memberCreator_fields]') !== -1) {
			url = url.replace('[/notification_memberCreator_fields]', '/' + args['notification_memberCreator_fields'])
			if (args['notification_memberCreator_fields']) delete args['notification_memberCreator_fields']
		}
		var rgx = new RegExp('\{tokens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tokens'])
			if (args['tokens']) delete args['tokens']
		}
		if (url.indexOf('[/tokens]') !== -1) {
			url = url.replace('[/tokens]', '/' + args['tokens'])
			if (args['tokens']) delete args['tokens']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/cards]') !== -1) url = url.replace('[/cards]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/card_members]') !== -1) url = url.replace('[/card_members]', '')
		if (url.indexOf('[/card_member_fields]') !== -1) url = url.replace('[/card_member_fields]', '')
		if (url.indexOf('[/card_attachments]') !== -1) url = url.replace('[/card_attachments]', '')
		if (url.indexOf('[/card_attachment_fields]') !== -1) url = url.replace('[/card_attachment_fields]', '')
		if (url.indexOf('[/boards]') !== -1) url = url.replace('[/boards]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/board_actions]') !== -1) url = url.replace('[/board_actions]', '')
		if (url.indexOf('[/board_actions_entities]') !== -1) url = url.replace('[/board_actions_entities]', '')
		if (url.indexOf('[/board_actions_format]') !== -1) url = url.replace('[/board_actions_format]', '')
		if (url.indexOf('[/board_actions_since]') !== -1) url = url.replace('[/board_actions_since]', '')
		if (url.indexOf('[/board_actions_limit]') !== -1) url = url.replace('[/board_actions_limit]', '')
		if (url.indexOf('[/board_action_fields]') !== -1) url = url.replace('[/board_action_fields]', '')
		if (url.indexOf('[/board_lists]') !== -1) url = url.replace('[/board_lists]', '')
		if (url.indexOf('[/board_organization]') !== -1) url = url.replace('[/board_organization]', '')
		if (url.indexOf('[/board_organization_fields]') !== -1) url = url.replace('[/board_organization_fields]', '')
		if (url.indexOf('[/boardsInvited]') !== -1) url = url.replace('[/boardsInvited]', '')
		if (url.indexOf('[/boardsInvited_fields]') !== -1) url = url.replace('[/boardsInvited_fields]', '')
		if (url.indexOf('[/organizations]') !== -1) url = url.replace('[/organizations]', '')
		if (url.indexOf('[/organization_fields]') !== -1) url = url.replace('[/organization_fields]', '')
		if (url.indexOf('[/organization_paid_account]') !== -1) url = url.replace('[/organization_paid_account]', '')
		if (url.indexOf('[/organizationsInvited]') !== -1) url = url.replace('[/organizationsInvited]', '')
		if (url.indexOf('[/organizationsInvited_fields]') !== -1) url = url.replace('[/organizationsInvited_fields]', '')
		if (url.indexOf('[/notifications]') !== -1) url = url.replace('[/notifications]', '')
		if (url.indexOf('[/notifications_entities]') !== -1) url = url.replace('[/notifications_entities]', '')
		if (url.indexOf('[/notifications_limit]') !== -1) url = url.replace('[/notifications_limit]', '')
		if (url.indexOf('[/notification_fields]') !== -1) url = url.replace('[/notification_fields]', '')
		if (url.indexOf('[/notification_memberCreator]') !== -1) url = url.replace('[/notification_memberCreator]', '')
		if (url.indexOf('[/notification_memberCreator_fields]') !== -1) url = url.replace('[/notification_memberCreator_fields]', '')
		if (url.indexOf('[/tokens]') !== -1) url = url.replace('[/tokens]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/{field}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberAction': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/actions'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{idModels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idModels]') !== -1) {
			url = url.replace('[/idModels]', '/' + args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/idModels]') !== -1) url = url.replace('[/idModels]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/boards'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{actions_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_format'])
			if (args['actions_format']) delete args['actions_format']
		}
		if (url.indexOf('[/actions_format]') !== -1) {
			url = url.replace('[/actions_format]', '/' + args['actions_format'])
			if (args['actions_format']) delete args['actions_format']
		}
		var rgx = new RegExp('\{actions_since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		if (url.indexOf('[/actions_since]') !== -1) {
			url = url.replace('[/actions_since]', '/' + args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{organization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization'])
			if (args['organization']) delete args['organization']
		}
		if (url.indexOf('[/organization]') !== -1) {
			url = url.replace('[/organization]', '/' + args['organization'])
			if (args['organization']) delete args['organization']
		}
		var rgx = new RegExp('\{organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		if (url.indexOf('[/organization_fields]') !== -1) {
			url = url.replace('[/organization_fields]', '/' + args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		var rgx = new RegExp('\{lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lists'])
			if (args['lists']) delete args['lists']
		}
		if (url.indexOf('[/lists]') !== -1) {
			url = url.replace('[/lists]', '/' + args['lists'])
			if (args['lists']) delete args['lists']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/actions_format]') !== -1) url = url.replace('[/actions_format]', '')
		if (url.indexOf('[/actions_since]') !== -1) url = url.replace('[/actions_since]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/organization]') !== -1) url = url.replace('[/organization]', '')
		if (url.indexOf('[/organization_fields]') !== -1) url = url.replace('[/organization_fields]', '')
		if (url.indexOf('[/lists]') !== -1) url = url.replace('[/lists]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberBoardWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/boards/{filter}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberBoardInvited': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/boardsInvited'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberBoardInvitedWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/boardsInvited/{field}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberCard': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/cards'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberCardWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/cards/{filter}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberNotifications': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/notifications'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{read_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['read_filter'])
			if (args['read_filter']) delete args['read_filter']
		}
		if (url.indexOf('[/read_filter]') !== -1) {
			url = url.replace('[/read_filter]', '/' + args['read_filter'])
			if (args['read_filter']) delete args['read_filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{memberCreator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['memberCreator'])
			if (args['memberCreator']) delete args['memberCreator']
		}
		if (url.indexOf('[/memberCreator]') !== -1) {
			url = url.replace('[/memberCreator]', '/' + args['memberCreator'])
			if (args['memberCreator']) delete args['memberCreator']
		}
		var rgx = new RegExp('\{memberCreator_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['memberCreator_fields'])
			if (args['memberCreator_fields']) delete args['memberCreator_fields']
		}
		if (url.indexOf('[/memberCreator_fields]') !== -1) {
			url = url.replace('[/memberCreator_fields]', '/' + args['memberCreator_fields'])
			if (args['memberCreator_fields']) delete args['memberCreator_fields']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/read_filter]') !== -1) url = url.replace('[/read_filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/memberCreator]') !== -1) url = url.replace('[/memberCreator]', '')
		if (url.indexOf('[/memberCreator_fields]') !== -1) url = url.replace('[/memberCreator_fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberNotificationWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/notifications/{filter}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberOrganizations': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/organizations'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{paid_account\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['paid_account'])
			if (args['paid_account']) delete args['paid_account']
		}
		if (url.indexOf('[/paid_account]') !== -1) {
			url = url.replace('[/paid_account]', '/' + args['paid_account'])
			if (args['paid_account']) delete args['paid_account']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/paid_account]') !== -1) url = url.replace('[/paid_account]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberOrganizationWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/organizations/{filter}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberOrganizationInvited': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/organizationsInvited'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberOrganizationInvitedWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/organizationsInvited/{field}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMemberToken': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/tokens'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'putMember': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{fullName\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fullName'])
			if (args['fullName']) delete args['fullName']
		}
		if (url.indexOf('[/fullName]') !== -1) {
			url = url.replace('[/fullName]', '/' + args['fullName'])
			if (args['fullName']) delete args['fullName']
		}
		var rgx = new RegExp('\{initials\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['initials'])
			if (args['initials']) delete args['initials']
		}
		if (url.indexOf('[/initials]') !== -1) {
			url = url.replace('[/initials]', '/' + args['initials'])
			if (args['initials']) delete args['initials']
		}
		var rgx = new RegExp('\{bio\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bio'])
			if (args['bio']) delete args['bio']
		}
		if (url.indexOf('[/bio]') !== -1) {
			url = url.replace('[/bio]', '/' + args['bio'])
			if (args['bio']) delete args['bio']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/fullName]') !== -1) url = url.replace('[/fullName]', '')
		if (url.indexOf('[/initials]') !== -1) url = url.replace('[/initials]', '')
		if (url.indexOf('[/bio]') !== -1) url = url.replace('[/bio]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putMemberBio': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/bio'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putMemberFullName': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/fullName'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putMemberInitials': function(args, opts) {
		var url = 'https://api.trello.com/1//members/{idMember}/initials'
		args = args || {}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'getNotification': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{memberCreator\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['memberCreator'])
			if (args['memberCreator']) delete args['memberCreator']
		}
		if (url.indexOf('[/memberCreator]') !== -1) {
			url = url.replace('[/memberCreator]', '/' + args['memberCreator'])
			if (args['memberCreator']) delete args['memberCreator']
		}
		var rgx = new RegExp('\{memberCreator_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['memberCreator_fields'])
			if (args['memberCreator_fields']) delete args['memberCreator_fields']
		}
		if (url.indexOf('[/memberCreator_fields]') !== -1) {
			url = url.replace('[/memberCreator_fields]', '/' + args['memberCreator_fields'])
			if (args['memberCreator_fields']) delete args['memberCreator_fields']
		}
		var rgx = new RegExp('\{board\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board'])
			if (args['board']) delete args['board']
		}
		if (url.indexOf('[/board]') !== -1) {
			url = url.replace('[/board]', '/' + args['board'])
			if (args['board']) delete args['board']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{list\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list'])
			if (args['list']) delete args['list']
		}
		if (url.indexOf('[/list]') !== -1) {
			url = url.replace('[/list]', '/' + args['list'])
			if (args['list']) delete args['list']
		}
		var rgx = new RegExp('\{card\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card'])
			if (args['card']) delete args['card']
		}
		if (url.indexOf('[/card]') !== -1) {
			url = url.replace('[/card]', '/' + args['card'])
			if (args['card']) delete args['card']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{organization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization'])
			if (args['organization']) delete args['organization']
		}
		if (url.indexOf('[/organization]') !== -1) {
			url = url.replace('[/organization]', '/' + args['organization'])
			if (args['organization']) delete args['organization']
		}
		var rgx = new RegExp('\{organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		if (url.indexOf('[/organization_fields]') !== -1) {
			url = url.replace('[/organization_fields]', '/' + args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		var rgx = new RegExp('\{member\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member'])
			if (args['member']) delete args['member']
		}
		if (url.indexOf('[/member]') !== -1) {
			url = url.replace('[/member]', '/' + args['member'])
			if (args['member']) delete args['member']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/memberCreator]') !== -1) url = url.replace('[/memberCreator]', '')
		if (url.indexOf('[/memberCreator_fields]') !== -1) url = url.replace('[/memberCreator_fields]', '')
		if (url.indexOf('[/board]') !== -1) url = url.replace('[/board]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/list]') !== -1) url = url.replace('[/list]', '')
		if (url.indexOf('[/card]') !== -1) url = url.replace('[/card]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/organization]') !== -1) url = url.replace('[/organization]', '')
		if (url.indexOf('[/organization_fields]') !== -1) url = url.replace('[/organization_fields]', '')
		if (url.indexOf('[/member]') !== -1) url = url.replace('[/member]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/board'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationBoardWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/board/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationCard': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/card'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationCardWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/card/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationEntities': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/entities'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationList': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/list'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationListWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/list/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationMember': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/member'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationMemberWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/member/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationMemberCreator': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/memberCreator'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationMemberCreatorWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/memberCreator/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/organization'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getNotificationOrganizationWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/organization/{field}'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'putNotification': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putNotificationUnread': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/{idNotification}/unread'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'posttNotificationRead': function(args, opts) {
		var url = 'https://api.trello.com/1//notifications/all/read'
		args = args || {}
		if (args['idNotification'] == null) throw new Error('idNotification is a required parameter')
		var rgx = new RegExp('\{idNotification\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) {
			url = url.replace('[/idNotification]', '/' + args['idNotification'])
			if (args['idNotification']) delete args['idNotification']
		}
		if (url.indexOf('[/idNotification]') !== -1) url = url.replace('[/idNotification]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'getOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{member_activity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_activity'])
			if (args['member_activity']) delete args['member_activity']
		}
		if (url.indexOf('[/member_activity]') !== -1) {
			url = url.replace('[/member_activity]', '/' + args['member_activity'])
			if (args['member_activity']) delete args['member_activity']
		}
		var rgx = new RegExp('\{membersInvited\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['membersInvited'])
			if (args['membersInvited']) delete args['membersInvited']
		}
		if (url.indexOf('[/membersInvited]') !== -1) {
			url = url.replace('[/membersInvited]', '/' + args['membersInvited'])
			if (args['membersInvited']) delete args['membersInvited']
		}
		var rgx = new RegExp('\{membersInvited_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['membersInvited_fields'])
			if (args['membersInvited_fields']) delete args['membersInvited_fields']
		}
		if (url.indexOf('[/membersInvited_fields]') !== -1) {
			url = url.replace('[/membersInvited_fields]', '/' + args['membersInvited_fields'])
			if (args['membersInvited_fields']) delete args['membersInvited_fields']
		}
		var rgx = new RegExp('\{boards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['boards'])
			if (args['boards']) delete args['boards']
		}
		if (url.indexOf('[/boards]') !== -1) {
			url = url.replace('[/boards]', '/' + args['boards'])
			if (args['boards']) delete args['boards']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{board_actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions'])
			if (args['board_actions']) delete args['board_actions']
		}
		if (url.indexOf('[/board_actions]') !== -1) {
			url = url.replace('[/board_actions]', '/' + args['board_actions'])
			if (args['board_actions']) delete args['board_actions']
		}
		var rgx = new RegExp('\{board_actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_entities'])
			if (args['board_actions_entities']) delete args['board_actions_entities']
		}
		if (url.indexOf('[/board_actions_entities]') !== -1) {
			url = url.replace('[/board_actions_entities]', '/' + args['board_actions_entities'])
			if (args['board_actions_entities']) delete args['board_actions_entities']
		}
		var rgx = new RegExp('\{board_actions_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_format'])
			if (args['board_actions_format']) delete args['board_actions_format']
		}
		if (url.indexOf('[/board_actions_format]') !== -1) {
			url = url.replace('[/board_actions_format]', '/' + args['board_actions_format'])
			if (args['board_actions_format']) delete args['board_actions_format']
		}
		var rgx = new RegExp('\{board_actions_since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_since'])
			if (args['board_actions_since']) delete args['board_actions_since']
		}
		if (url.indexOf('[/board_actions_since]') !== -1) {
			url = url.replace('[/board_actions_since]', '/' + args['board_actions_since'])
			if (args['board_actions_since']) delete args['board_actions_since']
		}
		var rgx = new RegExp('\{board_actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_actions_limit'])
			if (args['board_actions_limit']) delete args['board_actions_limit']
		}
		if (url.indexOf('[/board_actions_limit]') !== -1) {
			url = url.replace('[/board_actions_limit]', '/' + args['board_actions_limit'])
			if (args['board_actions_limit']) delete args['board_actions_limit']
		}
		var rgx = new RegExp('\{board_action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_action_fields'])
			if (args['board_action_fields']) delete args['board_action_fields']
		}
		if (url.indexOf('[/board_action_fields]') !== -1) {
			url = url.replace('[/board_action_fields]', '/' + args['board_action_fields'])
			if (args['board_action_fields']) delete args['board_action_fields']
		}
		var rgx = new RegExp('\{board_lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_lists'])
			if (args['board_lists']) delete args['board_lists']
		}
		if (url.indexOf('[/board_lists]') !== -1) {
			url = url.replace('[/board_lists]', '/' + args['board_lists'])
			if (args['board_lists']) delete args['board_lists']
		}
		var rgx = new RegExp('\{paid_account\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['paid_account'])
			if (args['paid_account']) delete args['paid_account']
		}
		if (url.indexOf('[/paid_account]') !== -1) {
			url = url.replace('[/paid_account]', '/' + args['paid_account'])
			if (args['paid_account']) delete args['paid_account']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/member_activity]') !== -1) url = url.replace('[/member_activity]', '')
		if (url.indexOf('[/membersInvited]') !== -1) url = url.replace('[/membersInvited]', '')
		if (url.indexOf('[/membersInvited_fields]') !== -1) url = url.replace('[/membersInvited_fields]', '')
		if (url.indexOf('[/boards]') !== -1) url = url.replace('[/boards]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/board_actions]') !== -1) url = url.replace('[/board_actions]', '')
		if (url.indexOf('[/board_actions_entities]') !== -1) url = url.replace('[/board_actions_entities]', '')
		if (url.indexOf('[/board_actions_format]') !== -1) url = url.replace('[/board_actions_format]', '')
		if (url.indexOf('[/board_actions_since]') !== -1) url = url.replace('[/board_actions_since]', '')
		if (url.indexOf('[/board_actions_limit]') !== -1) url = url.replace('[/board_actions_limit]', '')
		if (url.indexOf('[/board_action_fields]') !== -1) url = url.replace('[/board_action_fields]', '')
		if (url.indexOf('[/board_lists]') !== -1) url = url.replace('[/board_lists]', '')
		if (url.indexOf('[/paid_account]') !== -1) url = url.replace('[/paid_account]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/{field}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationAction': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/actions'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['entities'])
			if (args['entities']) delete args['entities']
		}
		if (url.indexOf('[/entities]') !== -1) {
			url = url.replace('[/entities]', '/' + args['entities'])
			if (args['entities']) delete args['entities']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{idModels\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idModels]') !== -1) {
			url = url.replace('[/idModels]', '/' + args['idModels'])
			if (args['idModels']) delete args['idModels']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/entities]') !== -1) url = url.replace('[/entities]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/idModels]') !== -1) url = url.replace('[/idModels]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationBoard': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/boards'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{actions_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_format'])
			if (args['actions_format']) delete args['actions_format']
		}
		if (url.indexOf('[/actions_format]') !== -1) {
			url = url.replace('[/actions_format]', '/' + args['actions_format'])
			if (args['actions_format']) delete args['actions_format']
		}
		var rgx = new RegExp('\{actions_since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		if (url.indexOf('[/actions_since]') !== -1) {
			url = url.replace('[/actions_since]', '/' + args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{organization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization'])
			if (args['organization']) delete args['organization']
		}
		if (url.indexOf('[/organization]') !== -1) {
			url = url.replace('[/organization]', '/' + args['organization'])
			if (args['organization']) delete args['organization']
		}
		var rgx = new RegExp('\{organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		if (url.indexOf('[/organization_fields]') !== -1) {
			url = url.replace('[/organization_fields]', '/' + args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		var rgx = new RegExp('\{lists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lists'])
			if (args['lists']) delete args['lists']
		}
		if (url.indexOf('[/lists]') !== -1) {
			url = url.replace('[/lists]', '/' + args['lists'])
			if (args['lists']) delete args['lists']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/actions_format]') !== -1) url = url.replace('[/actions_format]', '')
		if (url.indexOf('[/actions_since]') !== -1) url = url.replace('[/actions_since]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/organization]') !== -1) url = url.replace('[/organization]', '')
		if (url.indexOf('[/organization_fields]') !== -1) url = url.replace('[/organization_fields]', '')
		if (url.indexOf('[/lists]') !== -1) url = url.replace('[/lists]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationBoardWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/boards/{filter}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationMembers': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{activity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['activity'])
			if (args['activity']) delete args['activity']
		}
		if (url.indexOf('[/activity]') !== -1) {
			url = url.replace('[/activity]', '/' + args['activity'])
			if (args['activity']) delete args['activity']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/activity]') !== -1) url = url.replace('[/activity]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationMembersWithFilter': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members/{filter}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['filter'] == null) throw new Error('filter is a required parameter')
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationMemberCard': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members/{idMember}/cards'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{attachments\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		if (url.indexOf('[/attachments]') !== -1) {
			url = url.replace('[/attachments]', '/' + args['attachments'])
			if (args['attachments']) delete args['attachments']
		}
		var rgx = new RegExp('\{attachment_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		if (url.indexOf('[/attachment_fields]') !== -1) {
			url = url.replace('[/attachment_fields]', '/' + args['attachment_fields'])
			if (args['attachment_fields']) delete args['attachment_fields']
		}
		var rgx = new RegExp('\{members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members'])
			if (args['members']) delete args['members']
		}
		if (url.indexOf('[/members]') !== -1) {
			url = url.replace('[/members]', '/' + args['members'])
			if (args['members']) delete args['members']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{checkItemStates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		if (url.indexOf('[/checkItemStates]') !== -1) {
			url = url.replace('[/checkItemStates]', '/' + args['checkItemStates'])
			if (args['checkItemStates']) delete args['checkItemStates']
		}
		var rgx = new RegExp('\{checklists\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		if (url.indexOf('[/checklists]') !== -1) {
			url = url.replace('[/checklists]', '/' + args['checklists'])
			if (args['checklists']) delete args['checklists']
		}
		var rgx = new RegExp('\{board\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board'])
			if (args['board']) delete args['board']
		}
		if (url.indexOf('[/board]') !== -1) {
			url = url.replace('[/board]', '/' + args['board'])
			if (args['board']) delete args['board']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{list\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list'])
			if (args['list']) delete args['list']
		}
		if (url.indexOf('[/list]') !== -1) {
			url = url.replace('[/list]', '/' + args['list'])
			if (args['list']) delete args['list']
		}
		var rgx = new RegExp('\{list_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		if (url.indexOf('[/list_fields]') !== -1) {
			url = url.replace('[/list_fields]', '/' + args['list_fields'])
			if (args['list_fields']) delete args['list_fields']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/attachments]') !== -1) url = url.replace('[/attachments]', '')
		if (url.indexOf('[/attachment_fields]') !== -1) url = url.replace('[/attachment_fields]', '')
		if (url.indexOf('[/members]') !== -1) url = url.replace('[/members]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/checkItemStates]') !== -1) url = url.replace('[/checkItemStates]', '')
		if (url.indexOf('[/checklists]') !== -1) url = url.replace('[/checklists]', '')
		if (url.indexOf('[/board]') !== -1) url = url.replace('[/board]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/list]') !== -1) url = url.replace('[/list]', '')
		if (url.indexOf('[/list_fields]') !== -1) url = url.replace('[/list_fields]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationMembersInvited': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/membersInvited'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getOrganizationMembersInvitedWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/membersInvited/{field}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'putOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{prefs/orgInviteRestrict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/orgInviteRestrict'])
			if (args['prefs/orgInviteRestrict']) delete args['prefs/orgInviteRestrict']
		}
		if (url.indexOf('[/prefs/orgInviteRestrict]') !== -1) {
			url = url.replace('[/prefs/orgInviteRestrict]', '/' + args['prefs/orgInviteRestrict'])
			if (args['prefs/orgInviteRestrict']) delete args['prefs/orgInviteRestrict']
		}
		var rgx = new RegExp('\{prefs/externalMembersDisabled\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/externalMembersDisabled'])
			if (args['prefs/externalMembersDisabled']) delete args['prefs/externalMembersDisabled']
		}
		if (url.indexOf('[/prefs/externalMembersDisabled]') !== -1) {
			url = url.replace('[/prefs/externalMembersDisabled]', '/' + args['prefs/externalMembersDisabled'])
			if (args['prefs/externalMembersDisabled']) delete args['prefs/externalMembersDisabled']
		}
		var rgx = new RegExp('\{prefs/boardVisibilityRestrict/private\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/boardVisibilityRestrict/private'])
			if (args['prefs/boardVisibilityRestrict/private']) delete args['prefs/boardVisibilityRestrict/private']
		}
		if (url.indexOf('[/prefs/boardVisibilityRestrict/private]') !== -1) {
			url = url.replace('[/prefs/boardVisibilityRestrict/private]', '/' + args['prefs/boardVisibilityRestrict/private'])
			if (args['prefs/boardVisibilityRestrict/private']) delete args['prefs/boardVisibilityRestrict/private']
		}
		var rgx = new RegExp('\{prefs/boardVisibilityRestrict/org\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/boardVisibilityRestrict/org'])
			if (args['prefs/boardVisibilityRestrict/org']) delete args['prefs/boardVisibilityRestrict/org']
		}
		if (url.indexOf('[/prefs/boardVisibilityRestrict/org]') !== -1) {
			url = url.replace('[/prefs/boardVisibilityRestrict/org]', '/' + args['prefs/boardVisibilityRestrict/org'])
			if (args['prefs/boardVisibilityRestrict/org']) delete args['prefs/boardVisibilityRestrict/org']
		}
		var rgx = new RegExp('\{prefs/boardVisibilityRestrict/public\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/boardVisibilityRestrict/public'])
			if (args['prefs/boardVisibilityRestrict/public']) delete args['prefs/boardVisibilityRestrict/public']
		}
		if (url.indexOf('[/prefs/boardVisibilityRestrict/public]') !== -1) {
			url = url.replace('[/prefs/boardVisibilityRestrict/public]', '/' + args['prefs/boardVisibilityRestrict/public'])
			if (args['prefs/boardVisibilityRestrict/public']) delete args['prefs/boardVisibilityRestrict/public']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{displayName\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['displayName'])
			if (args['displayName']) delete args['displayName']
		}
		if (url.indexOf('[/displayName]') !== -1) {
			url = url.replace('[/displayName]', '/' + args['displayName'])
			if (args['displayName']) delete args['displayName']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		var rgx = new RegExp('\{website\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['website'])
			if (args['website']) delete args['website']
		}
		if (url.indexOf('[/website]') !== -1) {
			url = url.replace('[/website]', '/' + args['website'])
			if (args['website']) delete args['website']
		}
		var rgx = new RegExp('\{prefs/permissionLevel\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prefs/permissionLevel'])
			if (args['prefs/permissionLevel']) delete args['prefs/permissionLevel']
		}
		if (url.indexOf('[/prefs/permissionLevel]') !== -1) {
			url = url.replace('[/prefs/permissionLevel]', '/' + args['prefs/permissionLevel'])
			if (args['prefs/permissionLevel']) delete args['prefs/permissionLevel']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/prefs/orgInviteRestrict]') !== -1) url = url.replace('[/prefs/orgInviteRestrict]', '')
		if (url.indexOf('[/prefs/externalMembersDisabled]') !== -1) url = url.replace('[/prefs/externalMembersDisabled]', '')
		if (url.indexOf('[/prefs/boardVisibilityRestrict/private]') !== -1) url = url.replace('[/prefs/boardVisibilityRestrict/private]', '')
		if (url.indexOf('[/prefs/boardVisibilityRestrict/org]') !== -1) url = url.replace('[/prefs/boardVisibilityRestrict/org]', '')
		if (url.indexOf('[/prefs/boardVisibilityRestrict/public]') !== -1) url = url.replace('[/prefs/boardVisibilityRestrict/public]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/displayName]') !== -1) url = url.replace('[/displayName]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		if (url.indexOf('[/website]') !== -1) url = url.replace('[/website]', '')
		if (url.indexOf('[/prefs/permissionLevel]') !== -1) url = url.replace('[/prefs/permissionLevel]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putOrganizationDesc': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/desc'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putOrganizationDisplayName': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/displayName'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'addOrganizationMember': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members/{idMember}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'deactivatedOrganizationMember': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members/{idMember}/deactivated'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'renameOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/name'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putOrganizationBoardVisibilityRestrict': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/boardVisibilityRestrict/org'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putOrganizationBoardVisibilityRestrictPrivate': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/boardVisibilityRestrict/private'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putOrganizationBoardVisibilityRestrictPublic': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/boardVisibilityRestrict/public'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'setOrganisationMemberDisabled': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/externalMembersDisabled'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'setOrganisationInviteRestrict': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/orgInviteRestrict'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'setOrganisationPermissionLevel': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/permissionLevel'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'putOrganisationWebsite': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/website'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'PUT',params:args, auth:'oauth'}, opts)
	},
	'createOrganisation': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations'
		args = args || {}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{displayName\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['displayName'])
			if (args['displayName']) delete args['displayName']
		}
		if (url.indexOf('[/displayName]') !== -1) {
			url = url.replace('[/displayName]', '/' + args['displayName'])
			if (args['displayName']) delete args['displayName']
		}
		var rgx = new RegExp('\{desc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['desc'])
			if (args['desc']) delete args['desc']
		}
		if (url.indexOf('[/desc]') !== -1) {
			url = url.replace('[/desc]', '/' + args['desc'])
			if (args['desc']) delete args['desc']
		}
		var rgx = new RegExp('\{website\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['website'])
			if (args['website']) delete args['website']
		}
		if (url.indexOf('[/website]') !== -1) {
			url = url.replace('[/website]', '/' + args['website'])
			if (args['website']) delete args['website']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/displayName]') !== -1) url = url.replace('[/displayName]', '')
		if (url.indexOf('[/desc]') !== -1) url = url.replace('[/desc]', '')
		if (url.indexOf('[/website]') !== -1) url = url.replace('[/website]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'sendOrganisationInvitation': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/invitations'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'responseOrganisationInvitation': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/invitations/{response}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['response'] == null) throw new Error('response is a required parameter')
		var rgx = new RegExp('\{response\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['response'])
			if (args['response']) delete args['response']
		}
		if (url.indexOf('[/response]') !== -1) {
			url = url.replace('[/response]', '/' + args['response'])
			if (args['response']) delete args['response']
		}
		var rgx = new RegExp('\{invitationTokens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['invitationTokens'])
			if (args['invitationTokens']) delete args['invitationTokens']
		}
		if (url.indexOf('[/invitationTokens]') !== -1) {
			url = url.replace('[/invitationTokens]', '/' + args['invitationTokens'])
			if (args['invitationTokens']) delete args['invitationTokens']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/response]') !== -1) url = url.replace('[/response]', '')
		if (url.indexOf('[/invitationTokens]') !== -1) url = url.replace('[/invitationTokens]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'postOrganisationLogo': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/logo'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['file'] == null) throw new Error('file is a required parameter')
		var rgx = new RegExp('\{file\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['file'])
			if (args['file']) delete args['file']
		}
		if (url.indexOf('[/file]') !== -1) {
			url = url.replace('[/file]', '/' + args['file'])
			if (args['file']) delete args['file']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/file]') !== -1) url = url.replace('[/file]', '')
		return http({provider:'trello',url:url,method:'POST',params:args, auth:'oauth'}, opts)
	},
	'deleteOrganization': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteOrganizationInvitation': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/invitations/{idInvitation}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['idInvitation'] == null) throw new Error('idInvitation is a required parameter')
		var rgx = new RegExp('\{idInvitation\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idInvitation'])
			if (args['idInvitation']) delete args['idInvitation']
		}
		if (url.indexOf('[/idInvitation]') !== -1) {
			url = url.replace('[/idInvitation]', '/' + args['idInvitation'])
			if (args['idInvitation']) delete args['idInvitation']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idInvitation]') !== -1) url = url.replace('[/idInvitation]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteOrganizationLogo': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/logo'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteOrganizationMember': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members/{idMember}'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteOrganizationAllMember': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/members/{idMember}/all'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['idMember'] == null) throw new Error('idMember is a required parameter')
		var rgx = new RegExp('\{idMember\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idMember]') !== -1) {
			url = url.replace('[/idMember]', '/' + args['idMember'])
			if (args['idMember']) delete args['idMember']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/idMember]') !== -1) url = url.replace('[/idMember]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'deleteOrganizationInviteRestrict': function(args, opts) {
		var url = 'https://api.trello.com/1//organizations/{idOrg}/prefs/orgInviteRestrict'
		args = args || {}
		if (args['idOrg'] == null) throw new Error('idOrg is a required parameter')
		var rgx = new RegExp('\{idOrg\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (url.indexOf('[/idOrg]') !== -1) {
			url = url.replace('[/idOrg]', '/' + args['idOrg'])
			if (args['idOrg']) delete args['idOrg']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/idOrg]') !== -1) url = url.replace('[/idOrg]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'search': function(args, opts) {
		var url = 'https://api.trello.com/1//search'
		args = args || {}
		if (args['query'] == null) throw new Error('query is a required parameter')
		var rgx = new RegExp('\{query\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/query]') !== -1) {
			url = url.replace('[/query]', '/' + args['query'])
			if (args['query']) delete args['query']
		}
		var rgx = new RegExp('\{idBoards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idBoards'])
			if (args['idBoards']) delete args['idBoards']
		}
		if (url.indexOf('[/idBoards]') !== -1) {
			url = url.replace('[/idBoards]', '/' + args['idBoards'])
			if (args['idBoards']) delete args['idBoards']
		}
		if (args['idOrganizations'] == null) throw new Error('idOrganizations is a required parameter')
		var rgx = new RegExp('\{idOrganizations\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idOrganizations'])
			if (args['idOrganizations']) delete args['idOrganizations']
		}
		if (url.indexOf('[/idOrganizations]') !== -1) {
			url = url.replace('[/idOrganizations]', '/' + args['idOrganizations'])
			if (args['idOrganizations']) delete args['idOrganizations']
		}
		var rgx = new RegExp('\{idCards\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['idCards'])
			if (args['idCards']) delete args['idCards']
		}
		if (url.indexOf('[/idCards]') !== -1) {
			url = url.replace('[/idCards]', '/' + args['idCards'])
			if (args['idCards']) delete args['idCards']
		}
		var rgx = new RegExp('\{modelTypes\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['modelTypes'])
			if (args['modelTypes']) delete args['modelTypes']
		}
		if (url.indexOf('[/modelTypes]') !== -1) {
			url = url.replace('[/modelTypes]', '/' + args['modelTypes'])
			if (args['modelTypes']) delete args['modelTypes']
		}
		var rgx = new RegExp('\{board_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		if (url.indexOf('[/board_fields]') !== -1) {
			url = url.replace('[/board_fields]', '/' + args['board_fields'])
			if (args['board_fields']) delete args['board_fields']
		}
		var rgx = new RegExp('\{boards_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['boards_limit'])
			if (args['boards_limit']) delete args['boards_limit']
		}
		if (url.indexOf('[/boards_limit]') !== -1) {
			url = url.replace('[/boards_limit]', '/' + args['boards_limit'])
			if (args['boards_limit']) delete args['boards_limit']
		}
		var rgx = new RegExp('\{card_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		if (url.indexOf('[/card_fields]') !== -1) {
			url = url.replace('[/card_fields]', '/' + args['card_fields'])
			if (args['card_fields']) delete args['card_fields']
		}
		var rgx = new RegExp('\{cards_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cards_limit'])
			if (args['cards_limit']) delete args['cards_limit']
		}
		if (url.indexOf('[/cards_limit]') !== -1) {
			url = url.replace('[/cards_limit]', '/' + args['cards_limit'])
			if (args['cards_limit']) delete args['cards_limit']
		}
		var rgx = new RegExp('\{card_board\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_board'])
			if (args['card_board']) delete args['card_board']
		}
		if (url.indexOf('[/card_board]') !== -1) {
			url = url.replace('[/card_board]', '/' + args['card_board'])
			if (args['card_board']) delete args['card_board']
		}
		var rgx = new RegExp('\{card_list\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_list'])
			if (args['card_list']) delete args['card_list']
		}
		if (url.indexOf('[/card_list]') !== -1) {
			url = url.replace('[/card_list]', '/' + args['card_list'])
			if (args['card_list']) delete args['card_list']
		}
		var rgx = new RegExp('\{card_members\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['card_members'])
			if (args['card_members']) delete args['card_members']
		}
		if (url.indexOf('[/card_members]') !== -1) {
			url = url.replace('[/card_members]', '/' + args['card_members'])
			if (args['card_members']) delete args['card_members']
		}
		var rgx = new RegExp('\{organization_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		if (url.indexOf('[/organization_fields]') !== -1) {
			url = url.replace('[/organization_fields]', '/' + args['organization_fields'])
			if (args['organization_fields']) delete args['organization_fields']
		}
		var rgx = new RegExp('\{organizations_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['organizations_limit'])
			if (args['organizations_limit']) delete args['organizations_limit']
		}
		if (url.indexOf('[/organizations_limit]') !== -1) {
			url = url.replace('[/organizations_limit]', '/' + args['organizations_limit'])
			if (args['organizations_limit']) delete args['organizations_limit']
		}
		var rgx = new RegExp('\{member_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		if (url.indexOf('[/member_fields]') !== -1) {
			url = url.replace('[/member_fields]', '/' + args['member_fields'])
			if (args['member_fields']) delete args['member_fields']
		}
		var rgx = new RegExp('\{members_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['members_limit'])
			if (args['members_limit']) delete args['members_limit']
		}
		if (url.indexOf('[/members_limit]') !== -1) {
			url = url.replace('[/members_limit]', '/' + args['members_limit'])
			if (args['members_limit']) delete args['members_limit']
		}
		var rgx = new RegExp('\{action_fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		if (url.indexOf('[/action_fields]') !== -1) {
			url = url.replace('[/action_fields]', '/' + args['action_fields'])
			if (args['action_fields']) delete args['action_fields']
		}
		var rgx = new RegExp('\{actions_entities\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		if (url.indexOf('[/actions_entities]') !== -1) {
			url = url.replace('[/actions_entities]', '/' + args['actions_entities'])
			if (args['actions_entities']) delete args['actions_entities']
		}
		var rgx = new RegExp('\{actions_limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		if (url.indexOf('[/actions_limit]') !== -1) {
			url = url.replace('[/actions_limit]', '/' + args['actions_limit'])
			if (args['actions_limit']) delete args['actions_limit']
		}
		var rgx = new RegExp('\{actions_since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		if (url.indexOf('[/actions_since]') !== -1) {
			url = url.replace('[/actions_since]', '/' + args['actions_since'])
			if (args['actions_since']) delete args['actions_since']
		}
		var rgx = new RegExp('\{partial\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['partial'])
			if (args['partial']) delete args['partial']
		}
		if (url.indexOf('[/partial]') !== -1) {
			url = url.replace('[/partial]', '/' + args['partial'])
			if (args['partial']) delete args['partial']
		}
		if (url.indexOf('[/query]') !== -1) url = url.replace('[/query]', '')
		if (url.indexOf('[/idBoards]') !== -1) url = url.replace('[/idBoards]', '')
		if (url.indexOf('[/idOrganizations]') !== -1) url = url.replace('[/idOrganizations]', '')
		if (url.indexOf('[/idCards]') !== -1) url = url.replace('[/idCards]', '')
		if (url.indexOf('[/modelTypes]') !== -1) url = url.replace('[/modelTypes]', '')
		if (url.indexOf('[/board_fields]') !== -1) url = url.replace('[/board_fields]', '')
		if (url.indexOf('[/boards_limit]') !== -1) url = url.replace('[/boards_limit]', '')
		if (url.indexOf('[/card_fields]') !== -1) url = url.replace('[/card_fields]', '')
		if (url.indexOf('[/cards_limit]') !== -1) url = url.replace('[/cards_limit]', '')
		if (url.indexOf('[/card_board]') !== -1) url = url.replace('[/card_board]', '')
		if (url.indexOf('[/card_list]') !== -1) url = url.replace('[/card_list]', '')
		if (url.indexOf('[/card_members]') !== -1) url = url.replace('[/card_members]', '')
		if (url.indexOf('[/organization_fields]') !== -1) url = url.replace('[/organization_fields]', '')
		if (url.indexOf('[/organizations_limit]') !== -1) url = url.replace('[/organizations_limit]', '')
		if (url.indexOf('[/member_fields]') !== -1) url = url.replace('[/member_fields]', '')
		if (url.indexOf('[/members_limit]') !== -1) url = url.replace('[/members_limit]', '')
		if (url.indexOf('[/action_fields]') !== -1) url = url.replace('[/action_fields]', '')
		if (url.indexOf('[/actions_entities]') !== -1) url = url.replace('[/actions_entities]', '')
		if (url.indexOf('[/actions_limit]') !== -1) url = url.replace('[/actions_limit]', '')
		if (url.indexOf('[/actions_since]') !== -1) url = url.replace('[/actions_since]', '')
		if (url.indexOf('[/partial]') !== -1) url = url.replace('[/partial]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getToken': function(args, opts) {
		var url = 'https://api.trello.com/1//tokens/{token}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getTokenWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//tokens/{token}/{field}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getToken': function(args, opts) {
		var url = 'https://api.trello.com/1//tokens/{token}/member'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getTokenMemberWithField': function(args, opts) {
		var url = 'https://api.trello.com/1//tokens/{token}/member/{field}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (args['field'] == null) throw new Error('field is a required parameter')
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'deleteToken': function(args, opts) {
		var url = 'https://api.trello.com/1//tokens/{token}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		return http({provider:'trello',url:url,method:'DELETE',params:args, auth:'oauth'}, opts)
	},
	'getType': function(args, opts) {
		var url = 'https://api.trello.com/1//types/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'trello',url:url,method:'GET',params:args, auth:'none'}, opts)
	}
})