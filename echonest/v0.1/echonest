/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'echonest'})},
	'artist.biographies': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/biographies'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{license\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['license'])
			if (args['license']) delete args['license']
		}
		if (url.indexOf('[/license]') !== -1) {
			url = url.replace('[/license]', '/' + args['license'])
			if (args['license']) delete args['license']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/license]') !== -1) url = url.replace('[/license]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.blogs': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/blogs'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{high_relevance\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['high_relevance'])
			if (args['high_relevance']) delete args['high_relevance']
		}
		if (url.indexOf('[/high_relevance]') !== -1) {
			url = url.replace('[/high_relevance]', '/' + args['high_relevance'])
			if (args['high_relevance']) delete args['high_relevance']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/high_relevance]') !== -1) url = url.replace('[/high_relevance]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.familiarity': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/familiarity'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.hotttnesss': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/hotttnesss'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.images': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/images'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{license\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['license'])
			if (args['license']) delete args['license']
		}
		if (url.indexOf('[/license]') !== -1) {
			url = url.replace('[/license]', '/' + args['license'])
			if (args['license']) delete args['license']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/license]') !== -1) url = url.replace('[/license]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.listTerms': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/list_terms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.news': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/news'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{high_relevance\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['high_relevance'])
			if (args['high_relevance']) delete args['high_relevance']
		}
		if (url.indexOf('[/high_relevance]') !== -1) {
			url = url.replace('[/high_relevance]', '/' + args['high_relevance'])
			if (args['high_relevance']) delete args['high_relevance']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/high_relevance]') !== -1) url = url.replace('[/high_relevance]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.profile': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/profile'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.reviews': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/reviews'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.search': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/search'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{style\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['style'])
			if (args['style']) delete args['style']
		}
		if (url.indexOf('[/style]') !== -1) {
			url = url.replace('[/style]', '/' + args['style'])
			if (args['style']) delete args['style']
		}
		var rgx = new RegExp('\{mood\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mood'])
			if (args['mood']) delete args['mood']
		}
		if (url.indexOf('[/mood]') !== -1) {
			url = url.replace('[/mood]', '/' + args['mood'])
			if (args['mood']) delete args['mood']
		}
		var rgx = new RegExp('\{rank_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rank_type'])
			if (args['rank_type']) delete args['rank_type']
		}
		if (url.indexOf('[/rank_type]') !== -1) {
			url = url.replace('[/rank_type]', '/' + args['rank_type'])
			if (args['rank_type']) delete args['rank_type']
		}
		var rgx = new RegExp('\{fuzzy_match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fuzzy_match'])
			if (args['fuzzy_match']) delete args['fuzzy_match']
		}
		if (url.indexOf('[/fuzzy_match]') !== -1) {
			url = url.replace('[/fuzzy_match]', '/' + args['fuzzy_match'])
			if (args['fuzzy_match']) delete args['fuzzy_match']
		}
		var rgx = new RegExp('\{max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_familiarity'])
			if (args['max_familiarity']) delete args['max_familiarity']
		}
		if (url.indexOf('[/max_familiarity]') !== -1) {
			url = url.replace('[/max_familiarity]', '/' + args['max_familiarity'])
			if (args['max_familiarity']) delete args['max_familiarity']
		}
		var rgx = new RegExp('\{min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_familiarity'])
			if (args['min_familiarity']) delete args['min_familiarity']
		}
		if (url.indexOf('[/min_familiarity]') !== -1) {
			url = url.replace('[/min_familiarity]', '/' + args['min_familiarity'])
			if (args['min_familiarity']) delete args['min_familiarity']
		}
		var rgx = new RegExp('\{max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_hotttnesss'])
			if (args['max_hotttnesss']) delete args['max_hotttnesss']
		}
		if (url.indexOf('[/max_hotttnesss]') !== -1) {
			url = url.replace('[/max_hotttnesss]', '/' + args['max_hotttnesss'])
			if (args['max_hotttnesss']) delete args['max_hotttnesss']
		}
		var rgx = new RegExp('\{min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_hotttnesss'])
			if (args['min_hotttnesss']) delete args['min_hotttnesss']
		}
		if (url.indexOf('[/min_hotttnesss]') !== -1) {
			url = url.replace('[/min_hotttnesss]', '/' + args['min_hotttnesss'])
			if (args['min_hotttnesss']) delete args['min_hotttnesss']
		}
		var rgx = new RegExp('\{artist_start_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		if (url.indexOf('[/artist_start_year_before]') !== -1) {
			url = url.replace('[/artist_start_year_before]', '/' + args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		var rgx = new RegExp('\{artist_start_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		if (url.indexOf('[/artist_start_year_after]') !== -1) {
			url = url.replace('[/artist_start_year_after]', '/' + args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		var rgx = new RegExp('\{artist_end_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		if (url.indexOf('[/artist_end_year_before]') !== -1) {
			url = url.replace('[/artist_end_year_before]', '/' + args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		var rgx = new RegExp('\{artist_end_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		if (url.indexOf('[/artist_end_year_after]') !== -1) {
			url = url.replace('[/artist_end_year_after]', '/' + args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/style]') !== -1) url = url.replace('[/style]', '')
		if (url.indexOf('[/mood]') !== -1) url = url.replace('[/mood]', '')
		if (url.indexOf('[/rank_type]') !== -1) url = url.replace('[/rank_type]', '')
		if (url.indexOf('[/fuzzy_match]') !== -1) url = url.replace('[/fuzzy_match]', '')
		if (url.indexOf('[/max_familiarity]') !== -1) url = url.replace('[/max_familiarity]', '')
		if (url.indexOf('[/min_familiarity]') !== -1) url = url.replace('[/min_familiarity]', '')
		if (url.indexOf('[/max_hotttnesss]') !== -1) url = url.replace('[/max_hotttnesss]', '')
		if (url.indexOf('[/min_hotttnesss]') !== -1) url = url.replace('[/min_hotttnesss]', '')
		if (url.indexOf('[/artist_start_year_before]') !== -1) url = url.replace('[/artist_start_year_before]', '')
		if (url.indexOf('[/artist_start_year_after]') !== -1) url = url.replace('[/artist_start_year_after]', '')
		if (url.indexOf('[/artist_end_year_before]') !== -1) url = url.replace('[/artist_end_year_before]', '')
		if (url.indexOf('[/artist_end_year_after]') !== -1) url = url.replace('[/artist_end_year_after]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.extract': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/extract'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		var rgx = new RegExp('\{max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_familiarity'])
			if (args['max_familiarity']) delete args['max_familiarity']
		}
		if (url.indexOf('[/max_familiarity]') !== -1) {
			url = url.replace('[/max_familiarity]', '/' + args['max_familiarity'])
			if (args['max_familiarity']) delete args['max_familiarity']
		}
		var rgx = new RegExp('\{min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_familiarity'])
			if (args['min_familiarity']) delete args['min_familiarity']
		}
		if (url.indexOf('[/min_familiarity]') !== -1) {
			url = url.replace('[/min_familiarity]', '/' + args['min_familiarity'])
			if (args['min_familiarity']) delete args['min_familiarity']
		}
		var rgx = new RegExp('\{max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_hotttnesss'])
			if (args['max_hotttnesss']) delete args['max_hotttnesss']
		}
		if (url.indexOf('[/max_hotttnesss]') !== -1) {
			url = url.replace('[/max_hotttnesss]', '/' + args['max_hotttnesss'])
			if (args['max_hotttnesss']) delete args['max_hotttnesss']
		}
		var rgx = new RegExp('\{min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_hotttnesss'])
			if (args['min_hotttnesss']) delete args['min_hotttnesss']
		}
		if (url.indexOf('[/min_hotttnesss]') !== -1) {
			url = url.replace('[/min_hotttnesss]', '/' + args['min_hotttnesss'])
			if (args['min_hotttnesss']) delete args['min_hotttnesss']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		if (url.indexOf('[/max_familiarity]') !== -1) url = url.replace('[/max_familiarity]', '')
		if (url.indexOf('[/min_familiarity]') !== -1) url = url.replace('[/min_familiarity]', '')
		if (url.indexOf('[/max_hotttnesss]') !== -1) url = url.replace('[/max_hotttnesss]', '')
		if (url.indexOf('[/min_hotttnesss]') !== -1) url = url.replace('[/min_hotttnesss]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.songs': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/songs'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.similar': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/similar'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{min_results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_results'])
			if (args['min_results']) delete args['min_results']
		}
		if (url.indexOf('[/min_results]') !== -1) {
			url = url.replace('[/min_results]', '/' + args['min_results'])
			if (args['min_results']) delete args['min_results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_familiarity'])
			if (args['max_familiarity']) delete args['max_familiarity']
		}
		if (url.indexOf('[/max_familiarity]') !== -1) {
			url = url.replace('[/max_familiarity]', '/' + args['max_familiarity'])
			if (args['max_familiarity']) delete args['max_familiarity']
		}
		var rgx = new RegExp('\{min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_familiarity'])
			if (args['min_familiarity']) delete args['min_familiarity']
		}
		if (url.indexOf('[/min_familiarity]') !== -1) {
			url = url.replace('[/min_familiarity]', '/' + args['min_familiarity'])
			if (args['min_familiarity']) delete args['min_familiarity']
		}
		var rgx = new RegExp('\{max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_hotttnesss'])
			if (args['max_hotttnesss']) delete args['max_hotttnesss']
		}
		if (url.indexOf('[/max_hotttnesss]') !== -1) {
			url = url.replace('[/max_hotttnesss]', '/' + args['max_hotttnesss'])
			if (args['max_hotttnesss']) delete args['max_hotttnesss']
		}
		var rgx = new RegExp('\{min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_hotttnesss'])
			if (args['min_hotttnesss']) delete args['min_hotttnesss']
		}
		if (url.indexOf('[/min_hotttnesss]') !== -1) {
			url = url.replace('[/min_hotttnesss]', '/' + args['min_hotttnesss'])
			if (args['min_hotttnesss']) delete args['min_hotttnesss']
		}
		var rgx = new RegExp('\{artist_start_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		if (url.indexOf('[/artist_start_year_before]') !== -1) {
			url = url.replace('[/artist_start_year_before]', '/' + args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		var rgx = new RegExp('\{artist_start_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		if (url.indexOf('[/artist_start_year_after]') !== -1) {
			url = url.replace('[/artist_start_year_after]', '/' + args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		var rgx = new RegExp('\{artist_end_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		if (url.indexOf('[/artist_end_year_before]') !== -1) {
			url = url.replace('[/artist_end_year_before]', '/' + args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		var rgx = new RegExp('\{artist_end_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		if (url.indexOf('[/artist_end_year_after]') !== -1) {
			url = url.replace('[/artist_end_year_after]', '/' + args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		var rgx = new RegExp('\{reverse\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['reverse'])
			if (args['reverse']) delete args['reverse']
		}
		if (url.indexOf('[/reverse]') !== -1) {
			url = url.replace('[/reverse]', '/' + args['reverse'])
			if (args['reverse']) delete args['reverse']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{seed_catalog\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['seed_catalog'])
			if (args['seed_catalog']) delete args['seed_catalog']
		}
		if (url.indexOf('[/seed_catalog]') !== -1) {
			url = url.replace('[/seed_catalog]', '/' + args['seed_catalog'])
			if (args['seed_catalog']) delete args['seed_catalog']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/min_results]') !== -1) url = url.replace('[/min_results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/max_familiarity]') !== -1) url = url.replace('[/max_familiarity]', '')
		if (url.indexOf('[/min_familiarity]') !== -1) url = url.replace('[/min_familiarity]', '')
		if (url.indexOf('[/max_hotttnesss]') !== -1) url = url.replace('[/max_hotttnesss]', '')
		if (url.indexOf('[/min_hotttnesss]') !== -1) url = url.replace('[/min_hotttnesss]', '')
		if (url.indexOf('[/artist_start_year_before]') !== -1) url = url.replace('[/artist_start_year_before]', '')
		if (url.indexOf('[/artist_start_year_after]') !== -1) url = url.replace('[/artist_start_year_after]', '')
		if (url.indexOf('[/artist_end_year_before]') !== -1) url = url.replace('[/artist_end_year_before]', '')
		if (url.indexOf('[/artist_end_year_after]') !== -1) url = url.replace('[/artist_end_year_after]', '')
		if (url.indexOf('[/reverse]') !== -1) url = url.replace('[/reverse]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/seed_catalog]') !== -1) url = url.replace('[/seed_catalog]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.suggest': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/suggest'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.terms': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/terms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.topHottt': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/top_hottt'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.topTerms': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/top_terms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.twitter': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/twitter'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.urls': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/urls'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'artist.video': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/artist/video'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'song.search': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/song/search'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{artist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist'])
			if (args['artist']) delete args['artist']
		}
		if (url.indexOf('[/artist]') !== -1) {
			url = url.replace('[/artist]', '/' + args['artist'])
			if (args['artist']) delete args['artist']
		}
		var rgx = new RegExp('\{combined\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['combined'])
			if (args['combined']) delete args['combined']
		}
		if (url.indexOf('[/combined]') !== -1) {
			url = url.replace('[/combined]', '/' + args['combined'])
			if (args['combined']) delete args['combined']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{style\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['style'])
			if (args['style']) delete args['style']
		}
		if (url.indexOf('[/style]') !== -1) {
			url = url.replace('[/style]', '/' + args['style'])
			if (args['style']) delete args['style']
		}
		var rgx = new RegExp('\{mood\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mood'])
			if (args['mood']) delete args['mood']
		}
		if (url.indexOf('[/mood]') !== -1) {
			url = url.replace('[/mood]', '/' + args['mood'])
			if (args['mood']) delete args['mood']
		}
		var rgx = new RegExp('\{rank_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rank_type'])
			if (args['rank_type']) delete args['rank_type']
		}
		if (url.indexOf('[/rank_type]') !== -1) {
			url = url.replace('[/rank_type]', '/' + args['rank_type'])
			if (args['rank_type']) delete args['rank_type']
		}
		var rgx = new RegExp('\{artist_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_id'])
			if (args['artist_id']) delete args['artist_id']
		}
		if (url.indexOf('[/artist_id]') !== -1) {
			url = url.replace('[/artist_id]', '/' + args['artist_id'])
			if (args['artist_id']) delete args['artist_id']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{max_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		if (url.indexOf('[/max_tempo]') !== -1) {
			url = url.replace('[/max_tempo]', '/' + args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		var rgx = new RegExp('\{min_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		if (url.indexOf('[/min_tempo]') !== -1) {
			url = url.replace('[/min_tempo]', '/' + args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		var rgx = new RegExp('\{max_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		if (url.indexOf('[/max_duration]') !== -1) {
			url = url.replace('[/max_duration]', '/' + args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		var rgx = new RegExp('\{min_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		if (url.indexOf('[/min_duration]') !== -1) {
			url = url.replace('[/min_duration]', '/' + args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		var rgx = new RegExp('\{max_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		if (url.indexOf('[/max_loudness]') !== -1) {
			url = url.replace('[/max_loudness]', '/' + args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		var rgx = new RegExp('\{min_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		if (url.indexOf('[/min_loudness]') !== -1) {
			url = url.replace('[/min_loudness]', '/' + args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		var rgx = new RegExp('\{artist_max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		if (url.indexOf('[/artist_max_familiarity]') !== -1) {
			url = url.replace('[/artist_max_familiarity]', '/' + args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		var rgx = new RegExp('\{artist_min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		if (url.indexOf('[/artist_min_familiarity]') !== -1) {
			url = url.replace('[/artist_min_familiarity]', '/' + args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		var rgx = new RegExp('\{artist_start_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		if (url.indexOf('[/artist_start_year_before]') !== -1) {
			url = url.replace('[/artist_start_year_before]', '/' + args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		var rgx = new RegExp('\{artist_start_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		if (url.indexOf('[/artist_start_year_after]') !== -1) {
			url = url.replace('[/artist_start_year_after]', '/' + args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		var rgx = new RegExp('\{artist_end_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		if (url.indexOf('[/artist_end_year_before]') !== -1) {
			url = url.replace('[/artist_end_year_before]', '/' + args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		var rgx = new RegExp('\{artist_end_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		if (url.indexOf('[/artist_end_year_after]') !== -1) {
			url = url.replace('[/artist_end_year_after]', '/' + args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		var rgx = new RegExp('\{song_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) {
			url = url.replace('[/song_max_hotttnesss]', '/' + args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		var rgx = new RegExp('\{song_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) {
			url = url.replace('[/song_min_hotttnesss]', '/' + args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		var rgx = new RegExp('\{artist_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) {
			url = url.replace('[/artist_max_hotttnesss]', '/' + args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		var rgx = new RegExp('\{artist_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) {
			url = url.replace('[/artist_min_hotttnesss]', '/' + args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		var rgx = new RegExp('\{max_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		if (url.indexOf('[/max_longitude]') !== -1) {
			url = url.replace('[/max_longitude]', '/' + args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		var rgx = new RegExp('\{min_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		if (url.indexOf('[/min_longitude]') !== -1) {
			url = url.replace('[/min_longitude]', '/' + args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		var rgx = new RegExp('\{max_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		if (url.indexOf('[/max_latitude]') !== -1) {
			url = url.replace('[/max_latitude]', '/' + args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		var rgx = new RegExp('\{min_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		if (url.indexOf('[/min_latitude]') !== -1) {
			url = url.replace('[/min_latitude]', '/' + args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		var rgx = new RegExp('\{max_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		if (url.indexOf('[/max_danceability]') !== -1) {
			url = url.replace('[/max_danceability]', '/' + args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		var rgx = new RegExp('\{min_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		if (url.indexOf('[/min_danceability]') !== -1) {
			url = url.replace('[/min_danceability]', '/' + args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		var rgx = new RegExp('\{max_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		if (url.indexOf('[/max_energy]') !== -1) {
			url = url.replace('[/max_energy]', '/' + args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		var rgx = new RegExp('\{min_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		if (url.indexOf('[/min_energy]') !== -1) {
			url = url.replace('[/min_energy]', '/' + args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		if (url.indexOf('[/mode]') !== -1) {
			url = url.replace('[/mode]', '/' + args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/artist]') !== -1) url = url.replace('[/artist]', '')
		if (url.indexOf('[/combined]') !== -1) url = url.replace('[/combined]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/style]') !== -1) url = url.replace('[/style]', '')
		if (url.indexOf('[/mood]') !== -1) url = url.replace('[/mood]', '')
		if (url.indexOf('[/rank_type]') !== -1) url = url.replace('[/rank_type]', '')
		if (url.indexOf('[/artist_id]') !== -1) url = url.replace('[/artist_id]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/max_tempo]') !== -1) url = url.replace('[/max_tempo]', '')
		if (url.indexOf('[/min_tempo]') !== -1) url = url.replace('[/min_tempo]', '')
		if (url.indexOf('[/max_duration]') !== -1) url = url.replace('[/max_duration]', '')
		if (url.indexOf('[/min_duration]') !== -1) url = url.replace('[/min_duration]', '')
		if (url.indexOf('[/max_loudness]') !== -1) url = url.replace('[/max_loudness]', '')
		if (url.indexOf('[/min_loudness]') !== -1) url = url.replace('[/min_loudness]', '')
		if (url.indexOf('[/artist_max_familiarity]') !== -1) url = url.replace('[/artist_max_familiarity]', '')
		if (url.indexOf('[/artist_min_familiarity]') !== -1) url = url.replace('[/artist_min_familiarity]', '')
		if (url.indexOf('[/artist_start_year_before]') !== -1) url = url.replace('[/artist_start_year_before]', '')
		if (url.indexOf('[/artist_start_year_after]') !== -1) url = url.replace('[/artist_start_year_after]', '')
		if (url.indexOf('[/artist_end_year_before]') !== -1) url = url.replace('[/artist_end_year_before]', '')
		if (url.indexOf('[/artist_end_year_after]') !== -1) url = url.replace('[/artist_end_year_after]', '')
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) url = url.replace('[/song_max_hotttnesss]', '')
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) url = url.replace('[/song_min_hotttnesss]', '')
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) url = url.replace('[/artist_max_hotttnesss]', '')
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) url = url.replace('[/artist_min_hotttnesss]', '')
		if (url.indexOf('[/max_longitude]') !== -1) url = url.replace('[/max_longitude]', '')
		if (url.indexOf('[/min_longitude]') !== -1) url = url.replace('[/min_longitude]', '')
		if (url.indexOf('[/max_latitude]') !== -1) url = url.replace('[/max_latitude]', '')
		if (url.indexOf('[/min_latitude]') !== -1) url = url.replace('[/min_latitude]', '')
		if (url.indexOf('[/max_danceability]') !== -1) url = url.replace('[/max_danceability]', '')
		if (url.indexOf('[/min_danceability]') !== -1) url = url.replace('[/min_danceability]', '')
		if (url.indexOf('[/max_energy]') !== -1) url = url.replace('[/max_energy]', '')
		if (url.indexOf('[/min_energy]') !== -1) url = url.replace('[/min_energy]', '')
		if (url.indexOf('[/mode]') !== -1) url = url.replace('[/mode]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'song.profile': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/song/profile'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'song.identify.get': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/song/identify'
		args = args || {}
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{code\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['code'])
			if (args['code']) delete args['code']
		}
		if (url.indexOf('[/code]') !== -1) {
			url = url.replace('[/code]', '/' + args['code'])
			if (args['code']) delete args['code']
		}
		var rgx = new RegExp('\{artist\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist'])
			if (args['artist']) delete args['artist']
		}
		if (url.indexOf('[/artist]') !== -1) {
			url = url.replace('[/artist]', '/' + args['artist'])
			if (args['artist']) delete args['artist']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{release\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['release'])
			if (args['release']) delete args['release']
		}
		if (url.indexOf('[/release]') !== -1) {
			url = url.replace('[/release]', '/' + args['release'])
			if (args['release']) delete args['release']
		}
		var rgx = new RegExp('\{duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['duration'])
			if (args['duration']) delete args['duration']
		}
		if (url.indexOf('[/duration]') !== -1) {
			url = url.replace('[/duration]', '/' + args['duration'])
			if (args['duration']) delete args['duration']
		}
		var rgx = new RegExp('\{genre\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['genre'])
			if (args['genre']) delete args['genre']
		}
		if (url.indexOf('[/genre]') !== -1) {
			url = url.replace('[/genre]', '/' + args['genre'])
			if (args['genre']) delete args['genre']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/code]') !== -1) url = url.replace('[/code]', '')
		if (url.indexOf('[/artist]') !== -1) url = url.replace('[/artist]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/release]') !== -1) url = url.replace('[/release]', '')
		if (url.indexOf('[/duration]') !== -1) url = url.replace('[/duration]', '')
		if (url.indexOf('[/genre]') !== -1) url = url.replace('[/genre]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'song.identify.post': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/song/identify'
		args = args || {}
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/octet-stream"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'song.identify.post.query': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/song/identify'
		args = args || {}
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "multipart/form-data"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (args['query'] == null) throw new Error('query is a required parameter')
		var rgx = new RegExp('\{query\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/query]') !== -1) {
			url = url.replace('[/query]', '/' + args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/query]') !== -1) url = url.replace('[/query]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'track.analyze': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/track/analyze'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{wait\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['wait'])
			if (args['wait']) delete args['wait']
		}
		if (url.indexOf('[/wait]') !== -1) {
			url = url.replace('[/wait]', '/' + args['wait'])
			if (args['wait']) delete args['wait']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "multipart/form-data"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/wait]') !== -1) url = url.replace('[/wait]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'track.profile': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/track/profile'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{wait\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['wait'])
			if (args['wait']) delete args['wait']
		}
		if (url.indexOf('[/wait]') !== -1) {
			url = url.replace('[/wait]', '/' + args['wait'])
			if (args['wait']) delete args['wait']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/wait]') !== -1) url = url.replace('[/wait]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'track.upload.post': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/track/upload'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{filetype\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filetype'])
			if (args['filetype']) delete args['filetype']
		}
		if (url.indexOf('[/filetype]') !== -1) {
			url = url.replace('[/filetype]', '/' + args['filetype'])
			if (args['filetype']) delete args['filetype']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{wait\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['wait'])
			if (args['wait']) delete args['wait']
		}
		if (url.indexOf('[/wait]') !== -1) {
			url = url.replace('[/wait]', '/' + args['wait'])
			if (args['wait']) delete args['wait']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/octet-stream"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/filetype]') !== -1) url = url.replace('[/filetype]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/wait]') !== -1) url = url.replace('[/wait]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'track.upload.post.query': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/track/upload'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{filetype\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filetype'])
			if (args['filetype']) delete args['filetype']
		}
		if (url.indexOf('[/filetype]') !== -1) {
			url = url.replace('[/filetype]', '/' + args['filetype'])
			if (args['filetype']) delete args['filetype']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{wait\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['wait'])
			if (args['wait']) delete args['wait']
		}
		if (url.indexOf('[/wait]') !== -1) {
			url = url.replace('[/wait]', '/' + args['wait'])
			if (args['wait']) delete args['wait']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "multipart/form-data"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (args['track'] == null) throw new Error('track is a required parameter')
		var rgx = new RegExp('\{track\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track'])
			if (args['track']) delete args['track']
		}
		if (url.indexOf('[/track]') !== -1) {
			url = url.replace('[/track]', '/' + args['track'])
			if (args['track']) delete args['track']
		}
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/filetype]') !== -1) url = url.replace('[/filetype]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/wait]') !== -1) url = url.replace('[/wait]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/track]') !== -1) url = url.replace('[/track]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'playlist.basic': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/playlist/basic'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{dmca\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		if (url.indexOf('[/dmca]') !== -1) {
			url = url.replace('[/dmca]', '/' + args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/dmca]') !== -1) url = url.replace('[/dmca]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'playlist.static': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/playlist/static'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{artist_pick\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_pick'])
			if (args['artist_pick']) delete args['artist_pick']
		}
		if (url.indexOf('[/artist_pick]') !== -1) {
			url = url.replace('[/artist_pick]', '/' + args['artist_pick'])
			if (args['artist_pick']) delete args['artist_pick']
		}
		var rgx = new RegExp('\{variety\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['variety'])
			if (args['variety']) delete args['variety']
		}
		if (url.indexOf('[/variety]') !== -1) {
			url = url.replace('[/variety]', '/' + args['variety'])
			if (args['variety']) delete args['variety']
		}
		var rgx = new RegExp('\{distribution\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['distribution'])
			if (args['distribution']) delete args['distribution']
		}
		if (url.indexOf('[/distribution]') !== -1) {
			url = url.replace('[/distribution]', '/' + args['distribution'])
			if (args['distribution']) delete args['distribution']
		}
		var rgx = new RegExp('\{adventurousness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		if (url.indexOf('[/adventurousness]') !== -1) {
			url = url.replace('[/adventurousness]', '/' + args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{max_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		if (url.indexOf('[/max_tempo]') !== -1) {
			url = url.replace('[/max_tempo]', '/' + args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		var rgx = new RegExp('\{min_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		if (url.indexOf('[/min_tempo]') !== -1) {
			url = url.replace('[/min_tempo]', '/' + args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		var rgx = new RegExp('\{max_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		if (url.indexOf('[/max_duration]') !== -1) {
			url = url.replace('[/max_duration]', '/' + args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		var rgx = new RegExp('\{min_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		if (url.indexOf('[/min_duration]') !== -1) {
			url = url.replace('[/min_duration]', '/' + args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		var rgx = new RegExp('\{max_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		if (url.indexOf('[/max_loudness]') !== -1) {
			url = url.replace('[/max_loudness]', '/' + args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		var rgx = new RegExp('\{min_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		if (url.indexOf('[/min_loudness]') !== -1) {
			url = url.replace('[/min_loudness]', '/' + args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		var rgx = new RegExp('\{max_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		if (url.indexOf('[/max_danceability]') !== -1) {
			url = url.replace('[/max_danceability]', '/' + args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		var rgx = new RegExp('\{min_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		if (url.indexOf('[/min_danceability]') !== -1) {
			url = url.replace('[/min_danceability]', '/' + args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		var rgx = new RegExp('\{max_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		if (url.indexOf('[/max_energy]') !== -1) {
			url = url.replace('[/max_energy]', '/' + args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		var rgx = new RegExp('\{min_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		if (url.indexOf('[/min_energy]') !== -1) {
			url = url.replace('[/min_energy]', '/' + args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		var rgx = new RegExp('\{artist_max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		if (url.indexOf('[/artist_max_familiarity]') !== -1) {
			url = url.replace('[/artist_max_familiarity]', '/' + args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		var rgx = new RegExp('\{artist_min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		if (url.indexOf('[/artist_min_familiarity]') !== -1) {
			url = url.replace('[/artist_min_familiarity]', '/' + args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		var rgx = new RegExp('\{artist_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) {
			url = url.replace('[/artist_max_hotttnesss]', '/' + args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		var rgx = new RegExp('\{artist_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) {
			url = url.replace('[/artist_min_hotttnesss]', '/' + args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		var rgx = new RegExp('\{artist_start_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		if (url.indexOf('[/artist_start_year_before]') !== -1) {
			url = url.replace('[/artist_start_year_before]', '/' + args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		var rgx = new RegExp('\{artist_start_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		if (url.indexOf('[/artist_start_year_after]') !== -1) {
			url = url.replace('[/artist_start_year_after]', '/' + args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		var rgx = new RegExp('\{artist_end_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		if (url.indexOf('[/artist_end_year_before]') !== -1) {
			url = url.replace('[/artist_end_year_before]', '/' + args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		var rgx = new RegExp('\{artist_end_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		if (url.indexOf('[/artist_end_year_after]') !== -1) {
			url = url.replace('[/artist_end_year_after]', '/' + args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		var rgx = new RegExp('\{song_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) {
			url = url.replace('[/song_max_hotttnesss]', '/' + args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		var rgx = new RegExp('\{song_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) {
			url = url.replace('[/song_min_hotttnesss]', '/' + args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		var rgx = new RegExp('\{max_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		if (url.indexOf('[/max_longitude]') !== -1) {
			url = url.replace('[/max_longitude]', '/' + args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		var rgx = new RegExp('\{min_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		if (url.indexOf('[/min_longitude]') !== -1) {
			url = url.replace('[/min_longitude]', '/' + args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		var rgx = new RegExp('\{max_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		if (url.indexOf('[/max_latitude]') !== -1) {
			url = url.replace('[/max_latitude]', '/' + args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		var rgx = new RegExp('\{min_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		if (url.indexOf('[/min_latitude]') !== -1) {
			url = url.replace('[/min_latitude]', '/' + args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		if (url.indexOf('[/mode]') !== -1) {
			url = url.replace('[/mode]', '/' + args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{dmca\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		if (url.indexOf('[/dmca]') !== -1) {
			url = url.replace('[/dmca]', '/' + args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/artist_pick]') !== -1) url = url.replace('[/artist_pick]', '')
		if (url.indexOf('[/variety]') !== -1) url = url.replace('[/variety]', '')
		if (url.indexOf('[/distribution]') !== -1) url = url.replace('[/distribution]', '')
		if (url.indexOf('[/adventurousness]') !== -1) url = url.replace('[/adventurousness]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/max_tempo]') !== -1) url = url.replace('[/max_tempo]', '')
		if (url.indexOf('[/min_tempo]') !== -1) url = url.replace('[/min_tempo]', '')
		if (url.indexOf('[/max_duration]') !== -1) url = url.replace('[/max_duration]', '')
		if (url.indexOf('[/min_duration]') !== -1) url = url.replace('[/min_duration]', '')
		if (url.indexOf('[/max_loudness]') !== -1) url = url.replace('[/max_loudness]', '')
		if (url.indexOf('[/min_loudness]') !== -1) url = url.replace('[/min_loudness]', '')
		if (url.indexOf('[/max_danceability]') !== -1) url = url.replace('[/max_danceability]', '')
		if (url.indexOf('[/min_danceability]') !== -1) url = url.replace('[/min_danceability]', '')
		if (url.indexOf('[/max_energy]') !== -1) url = url.replace('[/max_energy]', '')
		if (url.indexOf('[/min_energy]') !== -1) url = url.replace('[/min_energy]', '')
		if (url.indexOf('[/artist_max_familiarity]') !== -1) url = url.replace('[/artist_max_familiarity]', '')
		if (url.indexOf('[/artist_min_familiarity]') !== -1) url = url.replace('[/artist_min_familiarity]', '')
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) url = url.replace('[/artist_max_hotttnesss]', '')
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) url = url.replace('[/artist_min_hotttnesss]', '')
		if (url.indexOf('[/artist_start_year_before]') !== -1) url = url.replace('[/artist_start_year_before]', '')
		if (url.indexOf('[/artist_start_year_after]') !== -1) url = url.replace('[/artist_start_year_after]', '')
		if (url.indexOf('[/artist_end_year_before]') !== -1) url = url.replace('[/artist_end_year_before]', '')
		if (url.indexOf('[/artist_end_year_after]') !== -1) url = url.replace('[/artist_end_year_after]', '')
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) url = url.replace('[/song_max_hotttnesss]', '')
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) url = url.replace('[/song_min_hotttnesss]', '')
		if (url.indexOf('[/max_longitude]') !== -1) url = url.replace('[/max_longitude]', '')
		if (url.indexOf('[/min_longitude]') !== -1) url = url.replace('[/min_longitude]', '')
		if (url.indexOf('[/max_latitude]') !== -1) url = url.replace('[/max_latitude]', '')
		if (url.indexOf('[/min_latitude]') !== -1) url = url.replace('[/min_latitude]', '')
		if (url.indexOf('[/mode]') !== -1) url = url.replace('[/mode]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/dmca]') !== -1) url = url.replace('[/dmca]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'playlist.dynamic.create': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/playlist/dynamic'
		args = args || {}
		if (args['type'] == null) args['type'] = "artist"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{artist_pick\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_pick'])
			if (args['artist_pick']) delete args['artist_pick']
		}
		if (url.indexOf('[/artist_pick]') !== -1) {
			url = url.replace('[/artist_pick]', '/' + args['artist_pick'])
			if (args['artist_pick']) delete args['artist_pick']
		}
		var rgx = new RegExp('\{variety\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['variety'])
			if (args['variety']) delete args['variety']
		}
		if (url.indexOf('[/variety]') !== -1) {
			url = url.replace('[/variety]', '/' + args['variety'])
			if (args['variety']) delete args['variety']
		}
		var rgx = new RegExp('\{distribution\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['distribution'])
			if (args['distribution']) delete args['distribution']
		}
		if (url.indexOf('[/distribution]') !== -1) {
			url = url.replace('[/distribution]', '/' + args['distribution'])
			if (args['distribution']) delete args['distribution']
		}
		var rgx = new RegExp('\{adventurousness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		if (url.indexOf('[/adventurousness]') !== -1) {
			url = url.replace('[/adventurousness]', '/' + args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{max_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		if (url.indexOf('[/max_tempo]') !== -1) {
			url = url.replace('[/max_tempo]', '/' + args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		var rgx = new RegExp('\{min_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		if (url.indexOf('[/min_tempo]') !== -1) {
			url = url.replace('[/min_tempo]', '/' + args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		var rgx = new RegExp('\{max_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		if (url.indexOf('[/max_duration]') !== -1) {
			url = url.replace('[/max_duration]', '/' + args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		var rgx = new RegExp('\{min_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		if (url.indexOf('[/min_duration]') !== -1) {
			url = url.replace('[/min_duration]', '/' + args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		var rgx = new RegExp('\{max_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		if (url.indexOf('[/max_loudness]') !== -1) {
			url = url.replace('[/max_loudness]', '/' + args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		var rgx = new RegExp('\{min_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		if (url.indexOf('[/min_loudness]') !== -1) {
			url = url.replace('[/min_loudness]', '/' + args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		var rgx = new RegExp('\{max_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		if (url.indexOf('[/max_danceability]') !== -1) {
			url = url.replace('[/max_danceability]', '/' + args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		var rgx = new RegExp('\{min_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		if (url.indexOf('[/min_danceability]') !== -1) {
			url = url.replace('[/min_danceability]', '/' + args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		var rgx = new RegExp('\{max_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		if (url.indexOf('[/max_energy]') !== -1) {
			url = url.replace('[/max_energy]', '/' + args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		var rgx = new RegExp('\{min_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		if (url.indexOf('[/min_energy]') !== -1) {
			url = url.replace('[/min_energy]', '/' + args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		var rgx = new RegExp('\{artist_max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		if (url.indexOf('[/artist_max_familiarity]') !== -1) {
			url = url.replace('[/artist_max_familiarity]', '/' + args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		var rgx = new RegExp('\{artist_min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		if (url.indexOf('[/artist_min_familiarity]') !== -1) {
			url = url.replace('[/artist_min_familiarity]', '/' + args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		var rgx = new RegExp('\{artist_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) {
			url = url.replace('[/artist_max_hotttnesss]', '/' + args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		var rgx = new RegExp('\{artist_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) {
			url = url.replace('[/artist_min_hotttnesss]', '/' + args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		var rgx = new RegExp('\{artist_start_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		if (url.indexOf('[/artist_start_year_before]') !== -1) {
			url = url.replace('[/artist_start_year_before]', '/' + args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		var rgx = new RegExp('\{artist_start_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		if (url.indexOf('[/artist_start_year_after]') !== -1) {
			url = url.replace('[/artist_start_year_after]', '/' + args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		var rgx = new RegExp('\{artist_end_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		if (url.indexOf('[/artist_end_year_before]') !== -1) {
			url = url.replace('[/artist_end_year_before]', '/' + args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		var rgx = new RegExp('\{artist_end_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		if (url.indexOf('[/artist_end_year_after]') !== -1) {
			url = url.replace('[/artist_end_year_after]', '/' + args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		var rgx = new RegExp('\{song_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) {
			url = url.replace('[/song_max_hotttnesss]', '/' + args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		var rgx = new RegExp('\{song_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) {
			url = url.replace('[/song_min_hotttnesss]', '/' + args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		var rgx = new RegExp('\{max_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		if (url.indexOf('[/max_longitude]') !== -1) {
			url = url.replace('[/max_longitude]', '/' + args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		var rgx = new RegExp('\{min_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		if (url.indexOf('[/min_longitude]') !== -1) {
			url = url.replace('[/min_longitude]', '/' + args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		var rgx = new RegExp('\{max_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		if (url.indexOf('[/max_latitude]') !== -1) {
			url = url.replace('[/max_latitude]', '/' + args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		var rgx = new RegExp('\{min_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		if (url.indexOf('[/min_latitude]') !== -1) {
			url = url.replace('[/min_latitude]', '/' + args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		if (url.indexOf('[/mode]') !== -1) {
			url = url.replace('[/mode]', '/' + args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{session_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['session_id'])
			if (args['session_id']) delete args['session_id']
		}
		if (url.indexOf('[/session_id]') !== -1) {
			url = url.replace('[/session_id]', '/' + args['session_id'])
			if (args['session_id']) delete args['session_id']
		}
		var rgx = new RegExp('\{dmca\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		if (url.indexOf('[/dmca]') !== -1) {
			url = url.replace('[/dmca]', '/' + args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		var rgx = new RegExp('\{adventurousness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		if (url.indexOf('[/adventurousness]') !== -1) {
			url = url.replace('[/adventurousness]', '/' + args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		var rgx = new RegExp('\{rating\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rating'])
			if (args['rating']) delete args['rating']
		}
		if (url.indexOf('[/rating]') !== -1) {
			url = url.replace('[/rating]', '/' + args['rating'])
			if (args['rating']) delete args['rating']
		}
		var rgx = new RegExp('\{chain_xspf\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['chain_xspf'])
			if (args['chain_xspf']) delete args['chain_xspf']
		}
		if (url.indexOf('[/chain_xspf]') !== -1) {
			url = url.replace('[/chain_xspf]', '/' + args['chain_xspf'])
			if (args['chain_xspf']) delete args['chain_xspf']
		}
		var rgx = new RegExp('\{steer\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer'])
			if (args['steer']) delete args['steer']
		}
		if (url.indexOf('[/steer]') !== -1) {
			url = url.replace('[/steer]', '/' + args['steer'])
			if (args['steer']) delete args['steer']
		}
		var rgx = new RegExp('\{steer_description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer_description'])
			if (args['steer_description']) delete args['steer_description']
		}
		if (url.indexOf('[/steer_description]') !== -1) {
			url = url.replace('[/steer_description]', '/' + args['steer_description'])
			if (args['steer_description']) delete args['steer_description']
		}
		var rgx = new RegExp('\{steer_style\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer_style'])
			if (args['steer_style']) delete args['steer_style']
		}
		if (url.indexOf('[/steer_style]') !== -1) {
			url = url.replace('[/steer_style]', '/' + args['steer_style'])
			if (args['steer_style']) delete args['steer_style']
		}
		var rgx = new RegExp('\{steer_mood\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer_mood'])
			if (args['steer_mood']) delete args['steer_mood']
		}
		if (url.indexOf('[/steer_mood]') !== -1) {
			url = url.replace('[/steer_mood]', '/' + args['steer_mood'])
			if (args['steer_mood']) delete args['steer_mood']
		}
		var rgx = new RegExp('\{ban\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ban'])
			if (args['ban']) delete args['ban']
		}
		if (url.indexOf('[/ban]') !== -1) {
			url = url.replace('[/ban]', '/' + args['ban'])
			if (args['ban']) delete args['ban']
		}
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/artist_pick]') !== -1) url = url.replace('[/artist_pick]', '')
		if (url.indexOf('[/variety]') !== -1) url = url.replace('[/variety]', '')
		if (url.indexOf('[/distribution]') !== -1) url = url.replace('[/distribution]', '')
		if (url.indexOf('[/adventurousness]') !== -1) url = url.replace('[/adventurousness]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/max_tempo]') !== -1) url = url.replace('[/max_tempo]', '')
		if (url.indexOf('[/min_tempo]') !== -1) url = url.replace('[/min_tempo]', '')
		if (url.indexOf('[/max_duration]') !== -1) url = url.replace('[/max_duration]', '')
		if (url.indexOf('[/min_duration]') !== -1) url = url.replace('[/min_duration]', '')
		if (url.indexOf('[/max_loudness]') !== -1) url = url.replace('[/max_loudness]', '')
		if (url.indexOf('[/min_loudness]') !== -1) url = url.replace('[/min_loudness]', '')
		if (url.indexOf('[/max_danceability]') !== -1) url = url.replace('[/max_danceability]', '')
		if (url.indexOf('[/min_danceability]') !== -1) url = url.replace('[/min_danceability]', '')
		if (url.indexOf('[/max_energy]') !== -1) url = url.replace('[/max_energy]', '')
		if (url.indexOf('[/min_energy]') !== -1) url = url.replace('[/min_energy]', '')
		if (url.indexOf('[/artist_max_familiarity]') !== -1) url = url.replace('[/artist_max_familiarity]', '')
		if (url.indexOf('[/artist_min_familiarity]') !== -1) url = url.replace('[/artist_min_familiarity]', '')
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) url = url.replace('[/artist_max_hotttnesss]', '')
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) url = url.replace('[/artist_min_hotttnesss]', '')
		if (url.indexOf('[/artist_start_year_before]') !== -1) url = url.replace('[/artist_start_year_before]', '')
		if (url.indexOf('[/artist_start_year_after]') !== -1) url = url.replace('[/artist_start_year_after]', '')
		if (url.indexOf('[/artist_end_year_before]') !== -1) url = url.replace('[/artist_end_year_before]', '')
		if (url.indexOf('[/artist_end_year_after]') !== -1) url = url.replace('[/artist_end_year_after]', '')
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) url = url.replace('[/song_max_hotttnesss]', '')
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) url = url.replace('[/song_min_hotttnesss]', '')
		if (url.indexOf('[/max_longitude]') !== -1) url = url.replace('[/max_longitude]', '')
		if (url.indexOf('[/min_longitude]') !== -1) url = url.replace('[/min_longitude]', '')
		if (url.indexOf('[/max_latitude]') !== -1) url = url.replace('[/max_latitude]', '')
		if (url.indexOf('[/min_latitude]') !== -1) url = url.replace('[/min_latitude]', '')
		if (url.indexOf('[/mode]') !== -1) url = url.replace('[/mode]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/session_id]') !== -1) url = url.replace('[/session_id]', '')
		if (url.indexOf('[/dmca]') !== -1) url = url.replace('[/dmca]', '')
		if (url.indexOf('[/adventurousness]') !== -1) url = url.replace('[/adventurousness]', '')
		if (url.indexOf('[/rating]') !== -1) url = url.replace('[/rating]', '')
		if (url.indexOf('[/chain_xspf]') !== -1) url = url.replace('[/chain_xspf]', '')
		if (url.indexOf('[/steer]') !== -1) url = url.replace('[/steer]', '')
		if (url.indexOf('[/steer_description]') !== -1) url = url.replace('[/steer_description]', '')
		if (url.indexOf('[/steer_style]') !== -1) url = url.replace('[/steer_style]', '')
		if (url.indexOf('[/steer_mood]') !== -1) url = url.replace('[/steer_mood]', '')
		if (url.indexOf('[/ban]') !== -1) url = url.replace('[/ban]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'playlist.dynamic.getnextsong': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/playlist/dynamic'
		args = args || {}
		if (args['type'] == null) args['type'] = "artist"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{artist_pick\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_pick'])
			if (args['artist_pick']) delete args['artist_pick']
		}
		if (url.indexOf('[/artist_pick]') !== -1) {
			url = url.replace('[/artist_pick]', '/' + args['artist_pick'])
			if (args['artist_pick']) delete args['artist_pick']
		}
		var rgx = new RegExp('\{variety\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['variety'])
			if (args['variety']) delete args['variety']
		}
		if (url.indexOf('[/variety]') !== -1) {
			url = url.replace('[/variety]', '/' + args['variety'])
			if (args['variety']) delete args['variety']
		}
		var rgx = new RegExp('\{distribution\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['distribution'])
			if (args['distribution']) delete args['distribution']
		}
		if (url.indexOf('[/distribution]') !== -1) {
			url = url.replace('[/distribution]', '/' + args['distribution'])
			if (args['distribution']) delete args['distribution']
		}
		var rgx = new RegExp('\{adventurousness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		if (url.indexOf('[/adventurousness]') !== -1) {
			url = url.replace('[/adventurousness]', '/' + args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{max_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		if (url.indexOf('[/max_tempo]') !== -1) {
			url = url.replace('[/max_tempo]', '/' + args['max_tempo'])
			if (args['max_tempo']) delete args['max_tempo']
		}
		var rgx = new RegExp('\{min_tempo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		if (url.indexOf('[/min_tempo]') !== -1) {
			url = url.replace('[/min_tempo]', '/' + args['min_tempo'])
			if (args['min_tempo']) delete args['min_tempo']
		}
		var rgx = new RegExp('\{max_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		if (url.indexOf('[/max_duration]') !== -1) {
			url = url.replace('[/max_duration]', '/' + args['max_duration'])
			if (args['max_duration']) delete args['max_duration']
		}
		var rgx = new RegExp('\{min_duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		if (url.indexOf('[/min_duration]') !== -1) {
			url = url.replace('[/min_duration]', '/' + args['min_duration'])
			if (args['min_duration']) delete args['min_duration']
		}
		var rgx = new RegExp('\{max_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		if (url.indexOf('[/max_loudness]') !== -1) {
			url = url.replace('[/max_loudness]', '/' + args['max_loudness'])
			if (args['max_loudness']) delete args['max_loudness']
		}
		var rgx = new RegExp('\{min_loudness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		if (url.indexOf('[/min_loudness]') !== -1) {
			url = url.replace('[/min_loudness]', '/' + args['min_loudness'])
			if (args['min_loudness']) delete args['min_loudness']
		}
		var rgx = new RegExp('\{max_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		if (url.indexOf('[/max_danceability]') !== -1) {
			url = url.replace('[/max_danceability]', '/' + args['max_danceability'])
			if (args['max_danceability']) delete args['max_danceability']
		}
		var rgx = new RegExp('\{min_danceability\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		if (url.indexOf('[/min_danceability]') !== -1) {
			url = url.replace('[/min_danceability]', '/' + args['min_danceability'])
			if (args['min_danceability']) delete args['min_danceability']
		}
		var rgx = new RegExp('\{max_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		if (url.indexOf('[/max_energy]') !== -1) {
			url = url.replace('[/max_energy]', '/' + args['max_energy'])
			if (args['max_energy']) delete args['max_energy']
		}
		var rgx = new RegExp('\{min_energy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		if (url.indexOf('[/min_energy]') !== -1) {
			url = url.replace('[/min_energy]', '/' + args['min_energy'])
			if (args['min_energy']) delete args['min_energy']
		}
		var rgx = new RegExp('\{artist_max_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		if (url.indexOf('[/artist_max_familiarity]') !== -1) {
			url = url.replace('[/artist_max_familiarity]', '/' + args['artist_max_familiarity'])
			if (args['artist_max_familiarity']) delete args['artist_max_familiarity']
		}
		var rgx = new RegExp('\{artist_min_familiarity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		if (url.indexOf('[/artist_min_familiarity]') !== -1) {
			url = url.replace('[/artist_min_familiarity]', '/' + args['artist_min_familiarity'])
			if (args['artist_min_familiarity']) delete args['artist_min_familiarity']
		}
		var rgx = new RegExp('\{artist_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) {
			url = url.replace('[/artist_max_hotttnesss]', '/' + args['artist_max_hotttnesss'])
			if (args['artist_max_hotttnesss']) delete args['artist_max_hotttnesss']
		}
		var rgx = new RegExp('\{artist_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) {
			url = url.replace('[/artist_min_hotttnesss]', '/' + args['artist_min_hotttnesss'])
			if (args['artist_min_hotttnesss']) delete args['artist_min_hotttnesss']
		}
		var rgx = new RegExp('\{artist_start_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		if (url.indexOf('[/artist_start_year_before]') !== -1) {
			url = url.replace('[/artist_start_year_before]', '/' + args['artist_start_year_before'])
			if (args['artist_start_year_before']) delete args['artist_start_year_before']
		}
		var rgx = new RegExp('\{artist_start_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		if (url.indexOf('[/artist_start_year_after]') !== -1) {
			url = url.replace('[/artist_start_year_after]', '/' + args['artist_start_year_after'])
			if (args['artist_start_year_after']) delete args['artist_start_year_after']
		}
		var rgx = new RegExp('\{artist_end_year_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		if (url.indexOf('[/artist_end_year_before]') !== -1) {
			url = url.replace('[/artist_end_year_before]', '/' + args['artist_end_year_before'])
			if (args['artist_end_year_before']) delete args['artist_end_year_before']
		}
		var rgx = new RegExp('\{artist_end_year_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		if (url.indexOf('[/artist_end_year_after]') !== -1) {
			url = url.replace('[/artist_end_year_after]', '/' + args['artist_end_year_after'])
			if (args['artist_end_year_after']) delete args['artist_end_year_after']
		}
		var rgx = new RegExp('\{song_max_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) {
			url = url.replace('[/song_max_hotttnesss]', '/' + args['song_max_hotttnesss'])
			if (args['song_max_hotttnesss']) delete args['song_max_hotttnesss']
		}
		var rgx = new RegExp('\{song_min_hotttnesss\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) {
			url = url.replace('[/song_min_hotttnesss]', '/' + args['song_min_hotttnesss'])
			if (args['song_min_hotttnesss']) delete args['song_min_hotttnesss']
		}
		var rgx = new RegExp('\{max_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		if (url.indexOf('[/max_longitude]') !== -1) {
			url = url.replace('[/max_longitude]', '/' + args['max_longitude'])
			if (args['max_longitude']) delete args['max_longitude']
		}
		var rgx = new RegExp('\{min_longitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		if (url.indexOf('[/min_longitude]') !== -1) {
			url = url.replace('[/min_longitude]', '/' + args['min_longitude'])
			if (args['min_longitude']) delete args['min_longitude']
		}
		var rgx = new RegExp('\{max_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		if (url.indexOf('[/max_latitude]') !== -1) {
			url = url.replace('[/max_latitude]', '/' + args['max_latitude'])
			if (args['max_latitude']) delete args['max_latitude']
		}
		var rgx = new RegExp('\{min_latitude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		if (url.indexOf('[/min_latitude]') !== -1) {
			url = url.replace('[/min_latitude]', '/' + args['min_latitude'])
			if (args['min_latitude']) delete args['min_latitude']
		}
		var rgx = new RegExp('\{mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mode'])
			if (args['mode']) delete args['mode']
		}
		if (url.indexOf('[/mode]') !== -1) {
			url = url.replace('[/mode]', '/' + args['mode'])
			if (args['mode']) delete args['mode']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{session_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['session_id'])
			if (args['session_id']) delete args['session_id']
		}
		if (url.indexOf('[/session_id]') !== -1) {
			url = url.replace('[/session_id]', '/' + args['session_id'])
			if (args['session_id']) delete args['session_id']
		}
		var rgx = new RegExp('\{dmca\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		if (url.indexOf('[/dmca]') !== -1) {
			url = url.replace('[/dmca]', '/' + args['dmca'])
			if (args['dmca']) delete args['dmca']
		}
		var rgx = new RegExp('\{adventurousness\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		if (url.indexOf('[/adventurousness]') !== -1) {
			url = url.replace('[/adventurousness]', '/' + args['adventurousness'])
			if (args['adventurousness']) delete args['adventurousness']
		}
		var rgx = new RegExp('\{rating\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rating'])
			if (args['rating']) delete args['rating']
		}
		if (url.indexOf('[/rating]') !== -1) {
			url = url.replace('[/rating]', '/' + args['rating'])
			if (args['rating']) delete args['rating']
		}
		var rgx = new RegExp('\{chain_xspf\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['chain_xspf'])
			if (args['chain_xspf']) delete args['chain_xspf']
		}
		if (url.indexOf('[/chain_xspf]') !== -1) {
			url = url.replace('[/chain_xspf]', '/' + args['chain_xspf'])
			if (args['chain_xspf']) delete args['chain_xspf']
		}
		var rgx = new RegExp('\{steer\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer'])
			if (args['steer']) delete args['steer']
		}
		if (url.indexOf('[/steer]') !== -1) {
			url = url.replace('[/steer]', '/' + args['steer'])
			if (args['steer']) delete args['steer']
		}
		var rgx = new RegExp('\{steer_description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer_description'])
			if (args['steer_description']) delete args['steer_description']
		}
		if (url.indexOf('[/steer_description]') !== -1) {
			url = url.replace('[/steer_description]', '/' + args['steer_description'])
			if (args['steer_description']) delete args['steer_description']
		}
		var rgx = new RegExp('\{steer_style\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer_style'])
			if (args['steer_style']) delete args['steer_style']
		}
		if (url.indexOf('[/steer_style]') !== -1) {
			url = url.replace('[/steer_style]', '/' + args['steer_style'])
			if (args['steer_style']) delete args['steer_style']
		}
		var rgx = new RegExp('\{steer_mood\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steer_mood'])
			if (args['steer_mood']) delete args['steer_mood']
		}
		if (url.indexOf('[/steer_mood]') !== -1) {
			url = url.replace('[/steer_mood]', '/' + args['steer_mood'])
			if (args['steer_mood']) delete args['steer_mood']
		}
		var rgx = new RegExp('\{ban\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ban'])
			if (args['ban']) delete args['ban']
		}
		if (url.indexOf('[/ban]') !== -1) {
			url = url.replace('[/ban]', '/' + args['ban'])
			if (args['ban']) delete args['ban']
		}
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/artist_pick]') !== -1) url = url.replace('[/artist_pick]', '')
		if (url.indexOf('[/variety]') !== -1) url = url.replace('[/variety]', '')
		if (url.indexOf('[/distribution]') !== -1) url = url.replace('[/distribution]', '')
		if (url.indexOf('[/adventurousness]') !== -1) url = url.replace('[/adventurousness]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/max_tempo]') !== -1) url = url.replace('[/max_tempo]', '')
		if (url.indexOf('[/min_tempo]') !== -1) url = url.replace('[/min_tempo]', '')
		if (url.indexOf('[/max_duration]') !== -1) url = url.replace('[/max_duration]', '')
		if (url.indexOf('[/min_duration]') !== -1) url = url.replace('[/min_duration]', '')
		if (url.indexOf('[/max_loudness]') !== -1) url = url.replace('[/max_loudness]', '')
		if (url.indexOf('[/min_loudness]') !== -1) url = url.replace('[/min_loudness]', '')
		if (url.indexOf('[/max_danceability]') !== -1) url = url.replace('[/max_danceability]', '')
		if (url.indexOf('[/min_danceability]') !== -1) url = url.replace('[/min_danceability]', '')
		if (url.indexOf('[/max_energy]') !== -1) url = url.replace('[/max_energy]', '')
		if (url.indexOf('[/min_energy]') !== -1) url = url.replace('[/min_energy]', '')
		if (url.indexOf('[/artist_max_familiarity]') !== -1) url = url.replace('[/artist_max_familiarity]', '')
		if (url.indexOf('[/artist_min_familiarity]') !== -1) url = url.replace('[/artist_min_familiarity]', '')
		if (url.indexOf('[/artist_max_hotttnesss]') !== -1) url = url.replace('[/artist_max_hotttnesss]', '')
		if (url.indexOf('[/artist_min_hotttnesss]') !== -1) url = url.replace('[/artist_min_hotttnesss]', '')
		if (url.indexOf('[/artist_start_year_before]') !== -1) url = url.replace('[/artist_start_year_before]', '')
		if (url.indexOf('[/artist_start_year_after]') !== -1) url = url.replace('[/artist_start_year_after]', '')
		if (url.indexOf('[/artist_end_year_before]') !== -1) url = url.replace('[/artist_end_year_before]', '')
		if (url.indexOf('[/artist_end_year_after]') !== -1) url = url.replace('[/artist_end_year_after]', '')
		if (url.indexOf('[/song_max_hotttnesss]') !== -1) url = url.replace('[/song_max_hotttnesss]', '')
		if (url.indexOf('[/song_min_hotttnesss]') !== -1) url = url.replace('[/song_min_hotttnesss]', '')
		if (url.indexOf('[/max_longitude]') !== -1) url = url.replace('[/max_longitude]', '')
		if (url.indexOf('[/min_longitude]') !== -1) url = url.replace('[/min_longitude]', '')
		if (url.indexOf('[/max_latitude]') !== -1) url = url.replace('[/max_latitude]', '')
		if (url.indexOf('[/min_latitude]') !== -1) url = url.replace('[/min_latitude]', '')
		if (url.indexOf('[/mode]') !== -1) url = url.replace('[/mode]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/session_id]') !== -1) url = url.replace('[/session_id]', '')
		if (url.indexOf('[/dmca]') !== -1) url = url.replace('[/dmca]', '')
		if (url.indexOf('[/adventurousness]') !== -1) url = url.replace('[/adventurousness]', '')
		if (url.indexOf('[/rating]') !== -1) url = url.replace('[/rating]', '')
		if (url.indexOf('[/chain_xspf]') !== -1) url = url.replace('[/chain_xspf]', '')
		if (url.indexOf('[/steer]') !== -1) url = url.replace('[/steer]', '')
		if (url.indexOf('[/steer_description]') !== -1) url = url.replace('[/steer_description]', '')
		if (url.indexOf('[/steer_style]') !== -1) url = url.replace('[/steer_style]', '')
		if (url.indexOf('[/steer_mood]') !== -1) url = url.replace('[/steer_mood]', '')
		if (url.indexOf('[/ban]') !== -1) url = url.replace('[/ban]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'playlist.sessionInfo': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/playlist/session_info'
		args = args || {}
		if (args['session_id'] == null) throw new Error('session_id is a required parameter')
		var rgx = new RegExp('\{session_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['session_id'])
			if (args['session_id']) delete args['session_id']
		}
		if (url.indexOf('[/session_id]') !== -1) {
			url = url.replace('[/session_id]', '/' + args['session_id'])
			if (args['session_id']) delete args['session_id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/session_id]') !== -1) url = url.replace('[/session_id]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'catalog.create': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/create'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "multipart/form-data"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'catalog.update': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/update'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['data'] == null) throw new Error('data is a required parameter')
		var rgx = new RegExp('\{data\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['data'])
			if (args['data']) delete args['data']
		}
		if (url.indexOf('[/data]') !== -1) {
			url = url.replace('[/data]', '/' + args['data'])
			if (args['data']) delete args['data']
		}
		var rgx = new RegExp('\{data_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['data_type'])
			if (args['data_type']) delete args['data_type']
		}
		if (url.indexOf('[/data_type]') !== -1) {
			url = url.replace('[/data_type]', '/' + args['data_type'])
			if (args['data_type']) delete args['data_type']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/data]') !== -1) url = url.replace('[/data]', '')
		if (url.indexOf('[/data_type]') !== -1) url = url.replace('[/data_type]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'catalog.status': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/status'
		args = args || {}
		if (args['ticket'] == null) throw new Error('ticket is a required parameter')
		var rgx = new RegExp('\{ticket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ticket'])
			if (args['ticket']) delete args['ticket']
		}
		if (url.indexOf('[/ticket]') !== -1) {
			url = url.replace('[/ticket]', '/' + args['ticket'])
			if (args['ticket']) delete args['ticket']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/ticket]') !== -1) url = url.replace('[/ticket]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'catalog.profile': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/profile'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'catalog.read': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/read'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{item_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['item_id'])
			if (args['item_id']) delete args['item_id']
		}
		if (url.indexOf('[/item_id]') !== -1) {
			url = url.replace('[/item_id]', '/' + args['item_id'])
			if (args['item_id']) delete args['item_id']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/item_id]') !== -1) url = url.replace('[/item_id]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'catalog.feed': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/feed'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{bucket\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		if (url.indexOf('[/bucket]') !== -1) {
			url = url.replace('[/bucket]', '/' + args['bucket'])
			if (args['bucket']) delete args['bucket']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{high_relevance\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['high_relevance'])
			if (args['high_relevance']) delete args['high_relevance']
		}
		if (url.indexOf('[/high_relevance]') !== -1) {
			url = url.replace('[/high_relevance]', '/' + args['high_relevance'])
			if (args['high_relevance']) delete args['high_relevance']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/bucket]') !== -1) url = url.replace('[/bucket]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/high_relevance]') !== -1) url = url.replace('[/high_relevance]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'catalog.delete': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/delete'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "multipart/form-data"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'echonest',url:url,method:'POST',params:args}, opts)
	},
	'catalog.list': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/catalog/list'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'sandbox.list': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/sandbox/list'
		args = args || {}
		if (args['sandbox'] == null) throw new Error('sandbox is a required parameter')
		var rgx = new RegExp('\{sandbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sandbox'])
			if (args['sandbox']) delete args['sandbox']
		}
		if (url.indexOf('[/sandbox]') !== -1) {
			url = url.replace('[/sandbox]', '/' + args['sandbox'])
			if (args['sandbox']) delete args['sandbox']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/sandbox]') !== -1) url = url.replace('[/sandbox]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'sandbox.access': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/sandbox/access'
		args = args || {}
		if (args['sandbox'] == null) throw new Error('sandbox is a required parameter')
		var rgx = new RegExp('\{sandbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sandbox'])
			if (args['sandbox']) delete args['sandbox']
		}
		if (url.indexOf('[/sandbox]') !== -1) {
			url = url.replace('[/sandbox]', '/' + args['sandbox'])
			if (args['sandbox']) delete args['sandbox']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['oauth_nonce'] == null) throw new Error('oauth_nonce is a required parameter')
		var rgx = new RegExp('\{oauth_nonce\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['oauth_nonce'])
			if (args['oauth_nonce']) delete args['oauth_nonce']
		}
		if (url.indexOf('[/oauth_nonce]') !== -1) {
			url = url.replace('[/oauth_nonce]', '/' + args['oauth_nonce'])
			if (args['oauth_nonce']) delete args['oauth_nonce']
		}
		if (args['oauth_timestamp'] == null) throw new Error('oauth_timestamp is a required parameter')
		var rgx = new RegExp('\{oauth_timestamp\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['oauth_timestamp'])
			if (args['oauth_timestamp']) delete args['oauth_timestamp']
		}
		if (url.indexOf('[/oauth_timestamp]') !== -1) {
			url = url.replace('[/oauth_timestamp]', '/' + args['oauth_timestamp'])
			if (args['oauth_timestamp']) delete args['oauth_timestamp']
		}
		if (args['oauth_signature_method'] == null) throw new Error('oauth_signature_method is a required parameter')
		var rgx = new RegExp('\{oauth_signature_method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['oauth_signature_method'])
			if (args['oauth_signature_method']) delete args['oauth_signature_method']
		}
		if (url.indexOf('[/oauth_signature_method]') !== -1) {
			url = url.replace('[/oauth_signature_method]', '/' + args['oauth_signature_method'])
			if (args['oauth_signature_method']) delete args['oauth_signature_method']
		}
		if (args['oauth_consumer_key'] == null) throw new Error('oauth_consumer_key is a required parameter')
		var rgx = new RegExp('\{oauth_consumer_key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['oauth_consumer_key'])
			if (args['oauth_consumer_key']) delete args['oauth_consumer_key']
		}
		if (url.indexOf('[/oauth_consumer_key]') !== -1) {
			url = url.replace('[/oauth_consumer_key]', '/' + args['oauth_consumer_key'])
			if (args['oauth_consumer_key']) delete args['oauth_consumer_key']
		}
		if (args['oauth_signature'] == null) throw new Error('oauth_signature is a required parameter')
		var rgx = new RegExp('\{oauth_signature\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['oauth_signature'])
			if (args['oauth_signature']) delete args['oauth_signature']
		}
		if (url.indexOf('[/oauth_signature]') !== -1) {
			url = url.replace('[/oauth_signature]', '/' + args['oauth_signature'])
			if (args['oauth_signature']) delete args['oauth_signature']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['results'])
			if (args['results']) delete args['results']
		}
		if (url.indexOf('[/results]') !== -1) {
			url = url.replace('[/results]', '/' + args['results'])
			if (args['results']) delete args['results']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/sandbox]') !== -1) url = url.replace('[/sandbox]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/oauth_nonce]') !== -1) url = url.replace('[/oauth_nonce]', '')
		if (url.indexOf('[/oauth_timestamp]') !== -1) url = url.replace('[/oauth_timestamp]', '')
		if (url.indexOf('[/oauth_signature_method]') !== -1) url = url.replace('[/oauth_signature_method]', '')
		if (url.indexOf('[/oauth_consumer_key]') !== -1) url = url.replace('[/oauth_consumer_key]', '')
		if (url.indexOf('[/oauth_signature]') !== -1) url = url.replace('[/oauth_signature]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/results]') !== -1) url = url.replace('[/results]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	},
	'oauth.timestamp': function(args, opts) {
		var url = 'http://developer.echonest.com/api/v4/oauth/timestamp'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'echonest',url:url,method:'GET',params:args}, opts)
	}
})