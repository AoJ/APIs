/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'picasa'})},
	'picasa.user.albums.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.albums.create': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/atom+xml"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'picasa',url:url,method:'POST',params:args}, opts)
	},
	'picasa.user.tags.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "tag"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.tags.photos.search': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "photo"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.comments.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "comment"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.album.photos.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.album.media.post': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) throw new Error('Content-Type is a required parameter')
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		var rgx = new RegExp('\{MIME-version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['MIME-version'])
			if (args['MIME-version']) delete args['MIME-version']
		}
		if (url.indexOf('[/MIME-version]') !== -1) {
			url = url.replace('[/MIME-version]', '/' + args['MIME-version'])
			if (args['MIME-version']) delete args['MIME-version']
		}
		var rgx = new RegExp('\{Slug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Slug'])
			if (args['Slug']) delete args['Slug']
		}
		if (url.indexOf('[/Slug]') !== -1) {
			url = url.replace('[/Slug]', '/' + args['Slug'])
			if (args['Slug']) delete args['Slug']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/MIME-version]') !== -1) url = url.replace('[/MIME-version]', '')
		if (url.indexOf('[/Slug]') !== -1) url = url.replace('[/Slug]', '')
		return http({provider:'picasa',url:url,method:'POST',params:args}, opts)
	},
	'picasa.user.album.tags.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "tag"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.album.tags.photos.search': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "photo"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.albums.update': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/entry/api/user/{userID}/albumid/{albumID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['tok'] == null) throw new Error('tok is a required parameter')
		var rgx = new RegExp('\{tok\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tok'])
			if (args['tok']) delete args['tok']
		}
		if (url.indexOf('[/tok]') !== -1) {
			url = url.replace('[/tok]', '/' + args['tok'])
			if (args['tok']) delete args['tok']
		}
		if (args['authkey'] == null) throw new Error('authkey is a required parameter')
		var rgx = new RegExp('\{authkey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['authkey'])
			if (args['authkey']) delete args['authkey']
		}
		if (url.indexOf('[/authkey]') !== -1) {
			url = url.replace('[/authkey]', '/' + args['authkey'])
			if (args['authkey']) delete args['authkey']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/atom+xml"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (args['If-Match'] == null) args['If-Match'] = "*"
		var rgx = new RegExp('\{If-Match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) {
			url = url.replace('[/If-Match]', '/' + args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/tok]') !== -1) url = url.replace('[/tok]', '')
		if (url.indexOf('[/authkey]') !== -1) url = url.replace('[/authkey]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/If-Match]') !== -1) url = url.replace('[/If-Match]', '')
		return http({provider:'picasa',url:url,method:'PUT',params:args}, opts)
	},
	'picasa.user.albums.delete': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/entry/api/user/{userID}/albumid/{albumID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['tok'] == null) throw new Error('tok is a required parameter')
		var rgx = new RegExp('\{tok\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tok'])
			if (args['tok']) delete args['tok']
		}
		if (url.indexOf('[/tok]') !== -1) {
			url = url.replace('[/tok]', '/' + args['tok'])
			if (args['tok']) delete args['tok']
		}
		if (args['authkey'] == null) throw new Error('authkey is a required parameter')
		var rgx = new RegExp('\{authkey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['authkey'])
			if (args['authkey']) delete args['authkey']
		}
		if (url.indexOf('[/authkey]') !== -1) {
			url = url.replace('[/authkey]', '/' + args['authkey'])
			if (args['authkey']) delete args['authkey']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['If-Match'] == null) args['If-Match'] = "*"
		var rgx = new RegExp('\{If-Match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) {
			url = url.replace('[/If-Match]', '/' + args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/tok]') !== -1) url = url.replace('[/tok]', '')
		if (url.indexOf('[/authkey]') !== -1) url = url.replace('[/authkey]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/If-Match]') !== -1) url = url.replace('[/If-Match]', '')
		return http({provider:'picasa',url:url,method:'DELETE',params:args}, opts)
	},
	'picasa.user.album.photo.tags.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['photoID'] == null) throw new Error('photoID is a required parameter')
		var rgx = new RegExp('\{photoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (url.indexOf('[/photoID]') !== -1) {
			url = url.replace('[/photoID]', '/' + args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "tag"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/photoID]') !== -1) url = url.replace('[/photoID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.album.photo.tags.add': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['photoID'] == null) throw new Error('photoID is a required parameter')
		var rgx = new RegExp('\{photoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (url.indexOf('[/photoID]') !== -1) {
			url = url.replace('[/photoID]', '/' + args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/atom+xml"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/photoID]') !== -1) url = url.replace('[/photoID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'picasa',url:url,method:'POST',params:args}, opts)
	},
	'picasa.user.album.photo.comments.list': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['photoID'] == null) throw new Error('photoID is a required parameter')
		var rgx = new RegExp('\{photoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (url.indexOf('[/photoID]') !== -1) {
			url = url.replace('[/photoID]', '/' + args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['kind'] == null) args['kind'] = "comment"
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/photoID]') !== -1) url = url.replace('[/photoID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'picasa.user.album.photo.comments.create': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['photoID'] == null) throw new Error('photoID is a required parameter')
		var rgx = new RegExp('\{photoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (url.indexOf('[/photoID]') !== -1) {
			url = url.replace('[/photoID]', '/' + args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/atom+xml"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/photoID]') !== -1) url = url.replace('[/photoID]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		return http({provider:'picasa',url:url,method:'POST',params:args}, opts)
	},
	'picasa.user.album.photo.update': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/media/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "multipart/related; boundary=\"END_OF_PART\""
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (args['If-Match'] == null) args['If-Match'] = "*"
		var rgx = new RegExp('\{If-Match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) {
			url = url.replace('[/If-Match]', '/' + args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/If-Match]') !== -1) url = url.replace('[/If-Match]', '')
		return http({provider:'picasa',url:url,method:'PUT',params:args}, opts)
	},
	'picasa.user.album.photo.data.update': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/media/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (args['Content-Type'] == null) args['Content-Type'] = "image/jpeg"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (args['If-Match'] == null) args['If-Match'] = "*"
		var rgx = new RegExp('\{If-Match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) {
			url = url.replace('[/If-Match]', '/' + args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/If-Match]') !== -1) url = url.replace('[/If-Match]', '')
		return http({provider:'picasa',url:url,method:'PUT',params:args}, opts)
	},
	'picasa.user.album.photo.metadata.update': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/entry/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['Content-Type'] == null) args['Content-Type'] = "application/atom+xml"
		var rgx = new RegExp('\{Content-Type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (url.indexOf('[/Content-Type]') !== -1) {
			url = url.replace('[/Content-Type]', '/' + args['Content-Type'])
			if (args['Content-Type']) delete args['Content-Type']
		}
		if (args['If-Match'] == null) args['If-Match'] = "*"
		var rgx = new RegExp('\{If-Match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) {
			url = url.replace('[/If-Match]', '/' + args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/Content-Type]') !== -1) url = url.replace('[/Content-Type]', '')
		if (url.indexOf('[/If-Match]') !== -1) url = url.replace('[/If-Match]', '')
		return http({provider:'picasa',url:url,method:'PUT',params:args}, opts)
	},
	'picasa.user.album.photo.delete': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/entry/api/user/{userID}/albumid/{albumID}/photoid/{photoID}'
		args = args || {}
		if (args['If-Match'] == null) args['If-Match'] = "*"
		var rgx = new RegExp('\{If-Match\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) {
			url = url.replace('[/If-Match]', '/' + args['If-Match'])
			if (args['If-Match']) delete args['If-Match']
		}
		if (url.indexOf('[/If-Match]') !== -1) url = url.replace('[/If-Match]', '')
		return http({provider:'picasa',url:url,method:'DELETE',params:args}, opts)
	},
	'picasa.user.album.photo.tags.delete': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/entry/api/user/{userID}/albumid/{albumID}/photoid/{photoID}/tag/{tagID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['photoID'] == null) throw new Error('photoID is a required parameter')
		var rgx = new RegExp('\{photoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (url.indexOf('[/photoID]') !== -1) {
			url = url.replace('[/photoID]', '/' + args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (args['tagID'] == null) throw new Error('tagID is a required parameter')
		var rgx = new RegExp('\{tagID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagID'])
			if (args['tagID']) delete args['tagID']
		}
		if (url.indexOf('[/tagID]') !== -1) {
			url = url.replace('[/tagID]', '/' + args['tagID'])
			if (args['tagID']) delete args['tagID']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/photoID]') !== -1) url = url.replace('[/photoID]', '')
		if (url.indexOf('[/tagID]') !== -1) url = url.replace('[/tagID]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		return http({provider:'picasa',url:url,method:'DELETE',params:args}, opts)
	},
	'picasa.user.album.photo.comments.delete': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/entry/api/user/{userID}/albumid/{albumID}/photoid/{photoID}/commentid/{commentID}'
		args = args || {}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['albumID'] == null) throw new Error('albumID is a required parameter')
		var rgx = new RegExp('\{albumID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (url.indexOf('[/albumID]') !== -1) {
			url = url.replace('[/albumID]', '/' + args['albumID'])
			if (args['albumID']) delete args['albumID']
		}
		if (args['photoID'] == null) throw new Error('photoID is a required parameter')
		var rgx = new RegExp('\{photoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (url.indexOf('[/photoID]') !== -1) {
			url = url.replace('[/photoID]', '/' + args['photoID'])
			if (args['photoID']) delete args['photoID']
		}
		if (args['tagID'] == null) throw new Error('tagID is a required parameter')
		var rgx = new RegExp('\{tagID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagID'])
			if (args['tagID']) delete args['tagID']
		}
		if (url.indexOf('[/tagID]') !== -1) {
			url = url.replace('[/tagID]', '/' + args['tagID'])
			if (args['tagID']) delete args['tagID']
		}
		if (args['commentID'] == null) throw new Error('commentID is a required parameter')
		var rgx = new RegExp('\{commentID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['commentID'])
			if (args['commentID']) delete args['commentID']
		}
		if (url.indexOf('[/commentID]') !== -1) {
			url = url.replace('[/commentID]', '/' + args['commentID'])
			if (args['commentID']) delete args['commentID']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/albumID]') !== -1) url = url.replace('[/albumID]', '')
		if (url.indexOf('[/photoID]') !== -1) url = url.replace('[/photoID]', '')
		if (url.indexOf('[/tagID]') !== -1) url = url.replace('[/tagID]', '')
		if (url.indexOf('[/commentID]') !== -1) url = url.replace('[/commentID]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		return http({provider:'picasa',url:url,method:'DELETE',params:args}, opts)
	},
	'picasa.user.albums.photos.search': function(args, opts) {
		var url = 'https://picasaweb.google.com/data/feed/api/all'
		args = args || {}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		var rgx = new RegExp('\{access\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['access'])
			if (args['access']) delete args['access']
		}
		if (url.indexOf('[/access]') !== -1) {
			url = url.replace('[/access]', '/' + args['access'])
			if (args['access']) delete args['access']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		var rgx = new RegExp('\{imgmax\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		if (url.indexOf('[/imgmax]') !== -1) {
			url = url.replace('[/imgmax]', '/' + args['imgmax'])
			if (args['imgmax']) delete args['imgmax']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{thumbsize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (url.indexOf('[/thumbsize]') !== -1) {
			url = url.replace('[/thumbsize]', '/' + args['thumbsize'])
			if (args['thumbsize']) delete args['thumbsize']
		}
		if (args['GData-Version'] == null) args['GData-Version'] = "2"
		var rgx = new RegExp('\{GData-Version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/GData-Version]') !== -1) {
			url = url.replace('[/GData-Version]', '/' + args['GData-Version'])
			if (args['GData-Version']) delete args['GData-Version']
		}
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/access]') !== -1) url = url.replace('[/access]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		if (url.indexOf('[/imgmax]') !== -1) url = url.replace('[/imgmax]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/thumbsize]') !== -1) url = url.replace('[/thumbsize]', '')
		if (url.indexOf('[/GData-Version]') !== -1) url = url.replace('[/GData-Version]', '')
		return http({provider:'picasa',url:url,method:'GET',params:args, auth:'none'}, opts)
	}
})