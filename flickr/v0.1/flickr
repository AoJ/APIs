/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'flickr'})},
	'upload': function(args, opts) {
		var url = 'http://api.flickr.com/services//upload'
		args = args || {}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{is_public\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_public'])
			if (args['is_public']) delete args['is_public']
		}
		if (url.indexOf('[/is_public]') !== -1) {
			url = url.replace('[/is_public]', '/' + args['is_public'])
			if (args['is_public']) delete args['is_public']
		}
		var rgx = new RegExp('\{is_friend\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_friend'])
			if (args['is_friend']) delete args['is_friend']
		}
		if (url.indexOf('[/is_friend]') !== -1) {
			url = url.replace('[/is_friend]', '/' + args['is_friend'])
			if (args['is_friend']) delete args['is_friend']
		}
		var rgx = new RegExp('\{is_family\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_family'])
			if (args['is_family']) delete args['is_family']
		}
		if (url.indexOf('[/is_family]') !== -1) {
			url = url.replace('[/is_family]', '/' + args['is_family'])
			if (args['is_family']) delete args['is_family']
		}
		var rgx = new RegExp('\{safety_level\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['safety_level'])
			if (args['safety_level']) delete args['safety_level']
		}
		if (url.indexOf('[/safety_level]') !== -1) {
			url = url.replace('[/safety_level]', '/' + args['safety_level'])
			if (args['safety_level']) delete args['safety_level']
		}
		var rgx = new RegExp('\{content_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		if (url.indexOf('[/content_type]') !== -1) {
			url = url.replace('[/content_type]', '/' + args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		var rgx = new RegExp('\{hidden\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hidden'])
			if (args['hidden']) delete args['hidden']
		}
		if (url.indexOf('[/hidden]') !== -1) {
			url = url.replace('[/hidden]', '/' + args['hidden'])
			if (args['hidden']) delete args['hidden']
		}
		var rgx = new RegExp('\{async\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['async'])
			if (args['async']) delete args['async']
		}
		if (url.indexOf('[/async]') !== -1) {
			url = url.replace('[/async]', '/' + args['async'])
			if (args['async']) delete args['async']
		}
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/is_public]') !== -1) url = url.replace('[/is_public]', '')
		if (url.indexOf('[/is_friend]') !== -1) url = url.replace('[/is_friend]', '')
		if (url.indexOf('[/is_family]') !== -1) url = url.replace('[/is_family]', '')
		if (url.indexOf('[/safety_level]') !== -1) url = url.replace('[/safety_level]', '')
		if (url.indexOf('[/content_type]') !== -1) url = url.replace('[/content_type]', '')
		if (url.indexOf('[/hidden]') !== -1) url = url.replace('[/hidden]', '')
		if (url.indexOf('[/async]') !== -1) url = url.replace('[/async]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'replace': function(args, opts) {
		var url = 'http://api.flickr.com/services//replace'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{async\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['async'])
			if (args['async']) delete args['async']
		}
		if (url.indexOf('[/async]') !== -1) {
			url = url.replace('[/async]', '/' + args['async'])
			if (args['async']) delete args['async']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/async]') !== -1) url = url.replace('[/async]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrActivityUserComments': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.activity.userComments'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrActivityUserPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.activity.userPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{timeframe\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['timeframe'])
			if (args['timeframe']) delete args['timeframe']
		}
		if (url.indexOf('[/timeframe]') !== -1) {
			url = url.replace('[/timeframe]', '/' + args['timeframe'])
			if (args['timeframe']) delete args['timeframe']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/timeframe]') !== -1) url = url.replace('[/timeframe]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrAuthCheckToken': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.auth.checkToken'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['auth_token'] == null) throw new Error('auth_token is a required parameter')
		var rgx = new RegExp('\{auth_token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['auth_token'])
			if (args['auth_token']) delete args['auth_token']
		}
		if (url.indexOf('[/auth_token]') !== -1) {
			url = url.replace('[/auth_token]', '/' + args['auth_token'])
			if (args['auth_token']) delete args['auth_token']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/auth_token]') !== -1) url = url.replace('[/auth_token]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrAuthGetFrob': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.auth.getFrob'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrAuthGetFullToken': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.auth.getFullToken'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['mini_token'] == null) throw new Error('mini_token is a required parameter')
		var rgx = new RegExp('\{mini_token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['mini_token'])
			if (args['mini_token']) delete args['mini_token']
		}
		if (url.indexOf('[/mini_token]') !== -1) {
			url = url.replace('[/mini_token]', '/' + args['mini_token'])
			if (args['mini_token']) delete args['mini_token']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/mini_token]') !== -1) url = url.replace('[/mini_token]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrAuthGetToken': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.auth.getToken'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['frob'] == null) throw new Error('frob is a required parameter')
		var rgx = new RegExp('\{frob\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['frob'])
			if (args['frob']) delete args['frob']
		}
		if (url.indexOf('[/frob]') !== -1) {
			url = url.replace('[/frob]', '/' + args['frob'])
			if (args['frob']) delete args['frob']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/frob]') !== -1) url = url.replace('[/frob]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrAuthOauthGetAccessToken': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.auth.oauth.getAccessToken'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrBlogsGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.blogs.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{service\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['service'])
			if (args['service']) delete args['service']
		}
		if (url.indexOf('[/service]') !== -1) {
			url = url.replace('[/service]', '/' + args['service'])
			if (args['service']) delete args['service']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/service]') !== -1) url = url.replace('[/service]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrBlogsGetServices': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.blogs.getServices'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrBlogsPostPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.blogs.postPhoto'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{blog_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['blog_id'])
			if (args['blog_id']) delete args['blog_id']
		}
		if (url.indexOf('[/blog_id]') !== -1) {
			url = url.replace('[/blog_id]', '/' + args['blog_id'])
			if (args['blog_id']) delete args['blog_id']
		}
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{blog_password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['blog_password'])
			if (args['blog_password']) delete args['blog_password']
		}
		if (url.indexOf('[/blog_password]') !== -1) {
			url = url.replace('[/blog_password]', '/' + args['blog_password'])
			if (args['blog_password']) delete args['blog_password']
		}
		var rgx = new RegExp('\{service\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['service'])
			if (args['service']) delete args['service']
		}
		if (url.indexOf('[/service]') !== -1) {
			url = url.replace('[/service]', '/' + args['service'])
			if (args['service']) delete args['service']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/blog_id]') !== -1) url = url.replace('[/blog_id]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/blog_password]') !== -1) url = url.replace('[/blog_password]', '')
		if (url.indexOf('[/service]') !== -1) url = url.replace('[/service]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrCollectionsGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.collections.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['collection_id'] == null) throw new Error('collection_id is a required parameter')
		var rgx = new RegExp('\{collection_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/collection_id]') !== -1) {
			url = url.replace('[/collection_id]', '/' + args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/collection_id]') !== -1) url = url.replace('[/collection_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrCollectionsGetTree': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.collections.getTree'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{collection_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/collection_id]') !== -1) {
			url = url.replace('[/collection_id]', '/' + args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/collection_id]') !== -1) url = url.replace('[/collection_id]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrCommonsGetInstitutions': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.commons.getInstitutions'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrContactsGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.contacts.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrContactsGetListRecentlyUploaded': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.contacts.getListRecentlyUploaded'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{date_lastupload\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_lastupload'])
			if (args['date_lastupload']) delete args['date_lastupload']
		}
		if (url.indexOf('[/date_lastupload]') !== -1) {
			url = url.replace('[/date_lastupload]', '/' + args['date_lastupload'])
			if (args['date_lastupload']) delete args['date_lastupload']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date_lastupload]') !== -1) url = url.replace('[/date_lastupload]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrContactsGetPublicList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.contacts.getPublicList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrFavoritesAdd': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.favorites.add'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrFavoritesGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.favorites.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{min_fave_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_fave_date'])
			if (args['min_fave_date']) delete args['min_fave_date']
		}
		if (url.indexOf('[/min_fave_date]') !== -1) {
			url = url.replace('[/min_fave_date]', '/' + args['min_fave_date'])
			if (args['min_fave_date']) delete args['min_fave_date']
		}
		var rgx = new RegExp('\{max_fave_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_fave_date'])
			if (args['max_fave_date']) delete args['max_fave_date']
		}
		if (url.indexOf('[/max_fave_date]') !== -1) {
			url = url.replace('[/max_fave_date]', '/' + args['max_fave_date'])
			if (args['max_fave_date']) delete args['max_fave_date']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/min_fave_date]') !== -1) url = url.replace('[/min_fave_date]', '')
		if (url.indexOf('[/max_fave_date]') !== -1) url = url.replace('[/max_fave_date]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrFavoritesGetPublicList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.favorites.getPublicList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{min_fave_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_fave_date'])
			if (args['min_fave_date']) delete args['min_fave_date']
		}
		if (url.indexOf('[/min_fave_date]') !== -1) {
			url = url.replace('[/min_fave_date]', '/' + args['min_fave_date'])
			if (args['min_fave_date']) delete args['min_fave_date']
		}
		var rgx = new RegExp('\{max_fave_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_fave_date'])
			if (args['max_fave_date']) delete args['max_fave_date']
		}
		if (url.indexOf('[/max_fave_date]') !== -1) {
			url = url.replace('[/max_fave_date]', '/' + args['max_fave_date'])
			if (args['max_fave_date']) delete args['max_fave_date']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/min_fave_date]') !== -1) url = url.replace('[/min_fave_date]', '')
		if (url.indexOf('[/max_fave_date]') !== -1) url = url.replace('[/max_fave_date]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrFavoritesRemove': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.favorites.remove'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrGalleriesAddPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.addPhoto'
		args = args || {}
		if (args['gallery_id'] == null) throw new Error('gallery_id is a required parameter')
		var rgx = new RegExp('\{gallery_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/gallery_id]') !== -1) {
			url = url.replace('[/gallery_id]', '/' + args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{comment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/comment]') !== -1) {
			url = url.replace('[/comment]', '/' + args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/gallery_id]') !== -1) url = url.replace('[/gallery_id]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/comment]') !== -1) url = url.replace('[/comment]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrGalleriesCreate': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.create'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		var rgx = new RegExp('\{primary_photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (url.indexOf('[/primary_photo_id]') !== -1) {
			url = url.replace('[/primary_photo_id]', '/' + args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/primary_photo_id]') !== -1) url = url.replace('[/primary_photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrGalleriesEditMeta': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.editMeta'
		args = args || {}
		if (args['gallery_id'] == null) throw new Error('gallery_id is a required parameter')
		var rgx = new RegExp('\{gallery_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/gallery_id]') !== -1) {
			url = url.replace('[/gallery_id]', '/' + args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/gallery_id]') !== -1) url = url.replace('[/gallery_id]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrGalleriesEditPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.editPhoto'
		args = args || {}
		if (args['gallery_id'] == null) throw new Error('gallery_id is a required parameter')
		var rgx = new RegExp('\{gallery_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/gallery_id]') !== -1) {
			url = url.replace('[/gallery_id]', '/' + args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['comment'] == null) throw new Error('comment is a required parameter')
		var rgx = new RegExp('\{comment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/comment]') !== -1) {
			url = url.replace('[/comment]', '/' + args['comment'])
			if (args['comment']) delete args['comment']
		}
		if (url.indexOf('[/gallery_id]') !== -1) url = url.replace('[/gallery_id]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/comment]') !== -1) url = url.replace('[/comment]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrGalleriesEditPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.editPhotos'
		args = args || {}
		if (args['gallery_id'] == null) throw new Error('gallery_id is a required parameter')
		var rgx = new RegExp('\{gallery_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/gallery_id]') !== -1) {
			url = url.replace('[/gallery_id]', '/' + args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (args['primary_photo_id'] == null) throw new Error('primary_photo_id is a required parameter')
		var rgx = new RegExp('\{primary_photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (url.indexOf('[/primary_photo_id]') !== -1) {
			url = url.replace('[/primary_photo_id]', '/' + args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (args['photo_ids'] == null) throw new Error('photo_ids is a required parameter')
		var rgx = new RegExp('\{photo_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photo_ids]') !== -1) {
			url = url.replace('[/photo_ids]', '/' + args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/gallery_id]') !== -1) url = url.replace('[/gallery_id]', '')
		if (url.indexOf('[/primary_photo_id]') !== -1) url = url.replace('[/primary_photo_id]', '')
		if (url.indexOf('[/photo_ids]') !== -1) url = url.replace('[/photo_ids]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrGalleriesGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['gallery_id'] == null) throw new Error('gallery_id is a required parameter')
		var rgx = new RegExp('\{gallery_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/gallery_id]') !== -1) {
			url = url.replace('[/gallery_id]', '/' + args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/gallery_id]') !== -1) url = url.replace('[/gallery_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGalleriesGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGalleriesGetListForPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.getListForPhoto'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGalleriesGetPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.galleries.getPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['gallery_id'] == null) throw new Error('gallery_id is a required parameter')
		var rgx = new RegExp('\{gallery_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		if (url.indexOf('[/gallery_id]') !== -1) {
			url = url.replace('[/gallery_id]', '/' + args['gallery_id'])
			if (args['gallery_id']) delete args['gallery_id']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/gallery_id]') !== -1) url = url.replace('[/gallery_id]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGroupsBrowse': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.browse'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{cat_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cat_id'])
			if (args['cat_id']) delete args['cat_id']
		}
		if (url.indexOf('[/cat_id]') !== -1) {
			url = url.replace('[/cat_id]', '/' + args['cat_id'])
			if (args['cat_id']) delete args['cat_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/cat_id]') !== -1) url = url.replace('[/cat_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrGroupsGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['group_id'] == null) throw new Error('group_id is a required parameter')
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/lang]') !== -1) {
			url = url.replace('[/lang]', '/' + args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		if (url.indexOf('[/lang]') !== -1) url = url.replace('[/lang]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGroupsSearch': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.search'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGroupsMembersGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.members.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['group_id'] == null) throw new Error('group_id is a required parameter')
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		var rgx = new RegExp('\{membertypes\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['membertypes'])
			if (args['membertypes']) delete args['membertypes']
		}
		if (url.indexOf('[/membertypes]') !== -1) {
			url = url.replace('[/membertypes]', '/' + args['membertypes'])
			if (args['membertypes']) delete args['membertypes']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		if (url.indexOf('[/membertypes]') !== -1) url = url.replace('[/membertypes]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrGroupsPoolsAdd': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.pools.add'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['group_id'] == null) throw new Error('group_id is a required parameter')
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrGroupsPoolsGetContext': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.pools.getContext'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['group_id'] == null) throw new Error('group_id is a required parameter')
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGroupsPoolsGetGroups': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.pools.getGroups'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrGroupsPoolsGetPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.pools.getPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrGroupsPoolsRemove': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.groups.pools.remove'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['group_id'] == null) throw new Error('group_id is a required parameter')
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrInterestingnessGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.interestingness.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrMachinetagsGetNamespaces': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.machinetags.getNamespaces'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{predicate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		if (url.indexOf('[/predicate]') !== -1) {
			url = url.replace('[/predicate]', '/' + args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/predicate]') !== -1) url = url.replace('[/predicate]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrMachinetagsGetPairs': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.machinetags.getPairs'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{predicate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		if (url.indexOf('[/predicate]') !== -1) {
			url = url.replace('[/predicate]', '/' + args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/predicate]') !== -1) url = url.replace('[/predicate]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrMachinetagsGetPredicates': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.machinetags.getPredicates'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrMachinetagsGetRecentValues': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.machinetags.getRecentValues'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{predicate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		if (url.indexOf('[/predicate]') !== -1) {
			url = url.replace('[/predicate]', '/' + args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/predicate]') !== -1) url = url.replace('[/predicate]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrMachinetagsGetValues': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.machinetags.getValues'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{predicate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		if (url.indexOf('[/predicate]') !== -1) {
			url = url.replace('[/predicate]', '/' + args['predicate'])
			if (args['predicate']) delete args['predicate']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/predicate]') !== -1) url = url.replace('[/predicate]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPandaGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.panda.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPandaGetPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.panda.getPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['panda_name'] == null) throw new Error('panda_name is a required parameter')
		var rgx = new RegExp('\{panda_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['panda_name'])
			if (args['panda_name']) delete args['panda_name']
		}
		if (url.indexOf('[/panda_name]') !== -1) {
			url = url.replace('[/panda_name]', '/' + args['panda_name'])
			if (args['panda_name']) delete args['panda_name']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/panda_name]') !== -1) url = url.replace('[/panda_name]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleFindByEmail': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.findByEmail'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['find_email'] == null) throw new Error('find_email is a required parameter')
		var rgx = new RegExp('\{find_email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['find_email'])
			if (args['find_email']) delete args['find_email']
		}
		if (url.indexOf('[/find_email]') !== -1) {
			url = url.replace('[/find_email]', '/' + args['find_email'])
			if (args['find_email']) delete args['find_email']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/find_email]') !== -1) url = url.replace('[/find_email]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleFindByUsername': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.findByUsername'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleGetPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.getPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{safe_search\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['safe_search'])
			if (args['safe_search']) delete args['safe_search']
		}
		if (url.indexOf('[/safe_search]') !== -1) {
			url = url.replace('[/safe_search]', '/' + args['safe_search'])
			if (args['safe_search']) delete args['safe_search']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		var rgx = new RegExp('\{content_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		if (url.indexOf('[/content_type]') !== -1) {
			url = url.replace('[/content_type]', '/' + args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/safe_search]') !== -1) url = url.replace('[/safe_search]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		if (url.indexOf('[/content_type]') !== -1) url = url.replace('[/content_type]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPeopleGetPhotosOf': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.getPhotosOf'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{owner_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		if (url.indexOf('[/owner_id]') !== -1) {
			url = url.replace('[/owner_id]', '/' + args['owner_id'])
			if (args['owner_id']) delete args['owner_id']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/owner_id]') !== -1) url = url.replace('[/owner_id]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleGetPublicGroups': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.getPublicGroups'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleGetPublicPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.getPublicPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{safe_search\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['safe_search'])
			if (args['safe_search']) delete args['safe_search']
		}
		if (url.indexOf('[/safe_search]') !== -1) {
			url = url.replace('[/safe_search]', '/' + args['safe_search'])
			if (args['safe_search']) delete args['safe_search']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/safe_search]') !== -1) url = url.replace('[/safe_search]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPeopleGetUploadStatus': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.people.getUploadStatus'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosAddTags': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.addTags'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosDelete': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.delete'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosGetAllContexts': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getAllContexts'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetContactsPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getContactsPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{just_friends\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['just_friends'])
			if (args['just_friends']) delete args['just_friends']
		}
		if (url.indexOf('[/just_friends]') !== -1) {
			url = url.replace('[/just_friends]', '/' + args['just_friends'])
			if (args['just_friends']) delete args['just_friends']
		}
		var rgx = new RegExp('\{single_photo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['single_photo'])
			if (args['single_photo']) delete args['single_photo']
		}
		if (url.indexOf('[/single_photo]') !== -1) {
			url = url.replace('[/single_photo]', '/' + args['single_photo'])
			if (args['single_photo']) delete args['single_photo']
		}
		var rgx = new RegExp('\{include_self\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_self'])
			if (args['include_self']) delete args['include_self']
		}
		if (url.indexOf('[/include_self]') !== -1) {
			url = url.replace('[/include_self]', '/' + args['include_self'])
			if (args['include_self']) delete args['include_self']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/just_friends]') !== -1) url = url.replace('[/just_friends]', '')
		if (url.indexOf('[/single_photo]') !== -1) url = url.replace('[/single_photo]', '')
		if (url.indexOf('[/include_self]') !== -1) url = url.replace('[/include_self]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetContactsPublicPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getContactsPublicPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		var rgx = new RegExp('\{just_friends\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['just_friends'])
			if (args['just_friends']) delete args['just_friends']
		}
		if (url.indexOf('[/just_friends]') !== -1) {
			url = url.replace('[/just_friends]', '/' + args['just_friends'])
			if (args['just_friends']) delete args['just_friends']
		}
		var rgx = new RegExp('\{single_photo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['single_photo'])
			if (args['single_photo']) delete args['single_photo']
		}
		if (url.indexOf('[/single_photo]') !== -1) {
			url = url.replace('[/single_photo]', '/' + args['single_photo'])
			if (args['single_photo']) delete args['single_photo']
		}
		var rgx = new RegExp('\{include_self\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_self'])
			if (args['include_self']) delete args['include_self']
		}
		if (url.indexOf('[/include_self]') !== -1) {
			url = url.replace('[/include_self]', '/' + args['include_self'])
			if (args['include_self']) delete args['include_self']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/just_friends]') !== -1) url = url.replace('[/just_friends]', '')
		if (url.indexOf('[/single_photo]') !== -1) url = url.replace('[/single_photo]', '')
		if (url.indexOf('[/include_self]') !== -1) url = url.replace('[/include_self]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetContext': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getContext'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetCounts': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getCounts'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{dates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dates'])
			if (args['dates']) delete args['dates']
		}
		if (url.indexOf('[/dates]') !== -1) {
			url = url.replace('[/dates]', '/' + args['dates'])
			if (args['dates']) delete args['dates']
		}
		var rgx = new RegExp('\{taken_dates\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['taken_dates'])
			if (args['taken_dates']) delete args['taken_dates']
		}
		if (url.indexOf('[/taken_dates]') !== -1) {
			url = url.replace('[/taken_dates]', '/' + args['taken_dates'])
			if (args['taken_dates']) delete args['taken_dates']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/dates]') !== -1) url = url.replace('[/dates]', '')
		if (url.indexOf('[/taken_dates]') !== -1) url = url.replace('[/taken_dates]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetExif': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getExif'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{secret\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['secret'])
			if (args['secret']) delete args['secret']
		}
		if (url.indexOf('[/secret]') !== -1) {
			url = url.replace('[/secret]', '/' + args['secret'])
			if (args['secret']) delete args['secret']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/secret]') !== -1) url = url.replace('[/secret]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetFavorites': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getFavorites'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{secret\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['secret'])
			if (args['secret']) delete args['secret']
		}
		if (url.indexOf('[/secret]') !== -1) {
			url = url.replace('[/secret]', '/' + args['secret'])
			if (args['secret']) delete args['secret']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/secret]') !== -1) url = url.replace('[/secret]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetNotInSet': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getNotInSet'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['media'])
			if (args['media']) delete args['media']
		}
		if (url.indexOf('[/media]') !== -1) {
			url = url.replace('[/media]', '/' + args['media'])
			if (args['media']) delete args['media']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/media]') !== -1) url = url.replace('[/media]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetPerms': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getPerms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetRecent': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getRecent'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetSizes': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getSizes'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGetUntagged': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getUntagged'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['media'])
			if (args['media']) delete args['media']
		}
		if (url.indexOf('[/media]') !== -1) {
			url = url.replace('[/media]', '/' + args['media'])
			if (args['media']) delete args['media']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/media]') !== -1) url = url.replace('[/media]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetWithGeoData': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getWithGeoData'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['media'])
			if (args['media']) delete args['media']
		}
		if (url.indexOf('[/media]') !== -1) {
			url = url.replace('[/media]', '/' + args['media'])
			if (args['media']) delete args['media']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/media]') !== -1) url = url.replace('[/media]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetWithoutGeoData': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getWithoutGeoData'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['media'])
			if (args['media']) delete args['media']
		}
		if (url.indexOf('[/media]') !== -1) {
			url = url.replace('[/media]', '/' + args['media'])
			if (args['media']) delete args['media']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/media]') !== -1) url = url.replace('[/media]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGetRecentlyUpdated': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.getRecentlyUpdated'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['min_date'] == null) throw new Error('min_date is a required parameter')
		var rgx = new RegExp('\{min_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_date'])
			if (args['min_date']) delete args['min_date']
		}
		if (url.indexOf('[/min_date]') !== -1) {
			url = url.replace('[/min_date]', '/' + args['min_date'])
			if (args['min_date']) delete args['min_date']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/min_date]') !== -1) url = url.replace('[/min_date]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosRemoveTag': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.removeTag'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['tag_id'] == null) throw new Error('tag_id is a required parameter')
		var rgx = new RegExp('\{tag_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag_id'])
			if (args['tag_id']) delete args['tag_id']
		}
		if (url.indexOf('[/tag_id]') !== -1) {
			url = url.replace('[/tag_id]', '/' + args['tag_id'])
			if (args['tag_id']) delete args['tag_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/tag_id]') !== -1) url = url.replace('[/tag_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosSearch': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.search'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tag_mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag_mode'])
			if (args['tag_mode']) delete args['tag_mode']
		}
		if (url.indexOf('[/tag_mode]') !== -1) {
			url = url.replace('[/tag_mode]', '/' + args['tag_mode'])
			if (args['tag_mode']) delete args['tag_mode']
		}
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		var rgx = new RegExp('\{license\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['license'])
			if (args['license']) delete args['license']
		}
		if (url.indexOf('[/license]') !== -1) {
			url = url.replace('[/license]', '/' + args['license'])
			if (args['license']) delete args['license']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{hbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hbox'])
			if (args['hbox']) delete args['hbox']
		}
		if (url.indexOf('[/hbox]') !== -1) {
			url = url.replace('[/hbox]', '/' + args['hbox'])
			if (args['hbox']) delete args['hbox']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{safe_search\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['safe_search'])
			if (args['safe_search']) delete args['safe_search']
		}
		if (url.indexOf('[/safe_search]') !== -1) {
			url = url.replace('[/safe_search]', '/' + args['safe_search'])
			if (args['safe_search']) delete args['safe_search']
		}
		var rgx = new RegExp('\{content_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		if (url.indexOf('[/content_type]') !== -1) {
			url = url.replace('[/content_type]', '/' + args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		var rgx = new RegExp('\{machine_tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['machine_tags'])
			if (args['machine_tags']) delete args['machine_tags']
		}
		if (url.indexOf('[/machine_tags]') !== -1) {
			url = url.replace('[/machine_tags]', '/' + args['machine_tags'])
			if (args['machine_tags']) delete args['machine_tags']
		}
		var rgx = new RegExp('\{machine_tag_mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['machine_tag_mode'])
			if (args['machine_tag_mode']) delete args['machine_tag_mode']
		}
		if (url.indexOf('[/machine_tag_mode]') !== -1) {
			url = url.replace('[/machine_tag_mode]', '/' + args['machine_tag_mode'])
			if (args['machine_tag_mode']) delete args['machine_tag_mode']
		}
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		var rgx = new RegExp('\{contacts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contacts'])
			if (args['contacts']) delete args['contacts']
		}
		if (url.indexOf('[/contacts]') !== -1) {
			url = url.replace('[/contacts]', '/' + args['contacts'])
			if (args['contacts']) delete args['contacts']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['media'])
			if (args['media']) delete args['media']
		}
		if (url.indexOf('[/media]') !== -1) {
			url = url.replace('[/media]', '/' + args['media'])
			if (args['media']) delete args['media']
		}
		var rgx = new RegExp('\{has_geo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['has_geo'])
			if (args['has_geo']) delete args['has_geo']
		}
		if (url.indexOf('[/has_geo]') !== -1) {
			url = url.replace('[/has_geo]', '/' + args['has_geo'])
			if (args['has_geo']) delete args['has_geo']
		}
		var rgx = new RegExp('\{geo_context\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geo_context'])
			if (args['geo_context']) delete args['geo_context']
		}
		if (url.indexOf('[/geo_context]') !== -1) {
			url = url.replace('[/geo_context]', '/' + args['geo_context'])
			if (args['geo_context']) delete args['geo_context']
		}
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		var rgx = new RegExp('\{lon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lon'])
			if (args['lon']) delete args['lon']
		}
		if (url.indexOf('[/lon]') !== -1) {
			url = url.replace('[/lon]', '/' + args['lon'])
			if (args['lon']) delete args['lon']
		}
		var rgx = new RegExp('\{radius\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['radius'])
			if (args['radius']) delete args['radius']
		}
		if (url.indexOf('[/radius]') !== -1) {
			url = url.replace('[/radius]', '/' + args['radius'])
			if (args['radius']) delete args['radius']
		}
		var rgx = new RegExp('\{radius_units\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['radius_units'])
			if (args['radius_units']) delete args['radius_units']
		}
		if (url.indexOf('[/radius_units]') !== -1) {
			url = url.replace('[/radius_units]', '/' + args['radius_units'])
			if (args['radius_units']) delete args['radius_units']
		}
		var rgx = new RegExp('\{is_commons\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_commons'])
			if (args['is_commons']) delete args['is_commons']
		}
		if (url.indexOf('[/is_commons]') !== -1) {
			url = url.replace('[/is_commons]', '/' + args['is_commons'])
			if (args['is_commons']) delete args['is_commons']
		}
		var rgx = new RegExp('\{is_gallery\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_gallery'])
			if (args['is_gallery']) delete args['is_gallery']
		}
		if (url.indexOf('[/is_gallery]') !== -1) {
			url = url.replace('[/is_gallery]', '/' + args['is_gallery'])
			if (args['is_gallery']) delete args['is_gallery']
		}
		var rgx = new RegExp('\{is_getty\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_getty'])
			if (args['is_getty']) delete args['is_getty']
		}
		if (url.indexOf('[/is_getty]') !== -1) {
			url = url.replace('[/is_getty]', '/' + args['is_getty'])
			if (args['is_getty']) delete args['is_getty']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/tag_mode]') !== -1) url = url.replace('[/tag_mode]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		if (url.indexOf('[/license]') !== -1) url = url.replace('[/license]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/hbox]') !== -1) url = url.replace('[/hbox]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		if (url.indexOf('[/safe_search]') !== -1) url = url.replace('[/safe_search]', '')
		if (url.indexOf('[/content_type]') !== -1) url = url.replace('[/content_type]', '')
		if (url.indexOf('[/machine_tags]') !== -1) url = url.replace('[/machine_tags]', '')
		if (url.indexOf('[/machine_tag_mode]') !== -1) url = url.replace('[/machine_tag_mode]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		if (url.indexOf('[/contacts]') !== -1) url = url.replace('[/contacts]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/media]') !== -1) url = url.replace('[/media]', '')
		if (url.indexOf('[/has_geo]') !== -1) url = url.replace('[/has_geo]', '')
		if (url.indexOf('[/geo_context]') !== -1) url = url.replace('[/geo_context]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/lon]') !== -1) url = url.replace('[/lon]', '')
		if (url.indexOf('[/radius]') !== -1) url = url.replace('[/radius]', '')
		if (url.indexOf('[/radius_units]') !== -1) url = url.replace('[/radius_units]', '')
		if (url.indexOf('[/is_commons]') !== -1) url = url.replace('[/is_commons]', '')
		if (url.indexOf('[/is_gallery]') !== -1) url = url.replace('[/is_gallery]', '')
		if (url.indexOf('[/is_getty]') !== -1) url = url.replace('[/is_getty]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosSetContentType': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.setContentType'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['content_type'] == null) throw new Error('content_type is a required parameter')
		var rgx = new RegExp('\{content_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		if (url.indexOf('[/content_type]') !== -1) {
			url = url.replace('[/content_type]', '/' + args['content_type'])
			if (args['content_type']) delete args['content_type']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/content_type]') !== -1) url = url.replace('[/content_type]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosSetDates': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.setDates'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{date_posted\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_posted'])
			if (args['date_posted']) delete args['date_posted']
		}
		if (url.indexOf('[/date_posted]') !== -1) {
			url = url.replace('[/date_posted]', '/' + args['date_posted'])
			if (args['date_posted']) delete args['date_posted']
		}
		var rgx = new RegExp('\{date_taken\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_taken'])
			if (args['date_taken']) delete args['date_taken']
		}
		if (url.indexOf('[/date_taken]') !== -1) {
			url = url.replace('[/date_taken]', '/' + args['date_taken'])
			if (args['date_taken']) delete args['date_taken']
		}
		var rgx = new RegExp('\{date_taken_granularity\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_taken_granularity'])
			if (args['date_taken_granularity']) delete args['date_taken_granularity']
		}
		if (url.indexOf('[/date_taken_granularity]') !== -1) {
			url = url.replace('[/date_taken_granularity]', '/' + args['date_taken_granularity'])
			if (args['date_taken_granularity']) delete args['date_taken_granularity']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/date_posted]') !== -1) url = url.replace('[/date_posted]', '')
		if (url.indexOf('[/date_taken]') !== -1) url = url.replace('[/date_taken]', '')
		if (url.indexOf('[/date_taken_granularity]') !== -1) url = url.replace('[/date_taken_granularity]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosSetMeta': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.setMeta'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosSetPerms': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.setPerms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['is_public'] == null) throw new Error('is_public is a required parameter')
		var rgx = new RegExp('\{is_public\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_public'])
			if (args['is_public']) delete args['is_public']
		}
		if (url.indexOf('[/is_public]') !== -1) {
			url = url.replace('[/is_public]', '/' + args['is_public'])
			if (args['is_public']) delete args['is_public']
		}
		if (args['is_friend'] == null) throw new Error('is_friend is a required parameter')
		var rgx = new RegExp('\{is_friend\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_friend'])
			if (args['is_friend']) delete args['is_friend']
		}
		if (url.indexOf('[/is_friend]') !== -1) {
			url = url.replace('[/is_friend]', '/' + args['is_friend'])
			if (args['is_friend']) delete args['is_friend']
		}
		if (args['is_family'] == null) throw new Error('is_family is a required parameter')
		var rgx = new RegExp('\{is_family\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_family'])
			if (args['is_family']) delete args['is_family']
		}
		if (url.indexOf('[/is_family]') !== -1) {
			url = url.replace('[/is_family]', '/' + args['is_family'])
			if (args['is_family']) delete args['is_family']
		}
		if (args['perm_comment'] == null) throw new Error('perm_comment is a required parameter')
		var rgx = new RegExp('\{perm_comment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['perm_comment'])
			if (args['perm_comment']) delete args['perm_comment']
		}
		if (url.indexOf('[/perm_comment]') !== -1) {
			url = url.replace('[/perm_comment]', '/' + args['perm_comment'])
			if (args['perm_comment']) delete args['perm_comment']
		}
		if (args['perm_addmeta'] == null) throw new Error('perm_addmeta is a required parameter')
		var rgx = new RegExp('\{perm_addmeta\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['perm_addmeta'])
			if (args['perm_addmeta']) delete args['perm_addmeta']
		}
		if (url.indexOf('[/perm_addmeta]') !== -1) {
			url = url.replace('[/perm_addmeta]', '/' + args['perm_addmeta'])
			if (args['perm_addmeta']) delete args['perm_addmeta']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/is_public]') !== -1) url = url.replace('[/is_public]', '')
		if (url.indexOf('[/is_friend]') !== -1) url = url.replace('[/is_friend]', '')
		if (url.indexOf('[/is_family]') !== -1) url = url.replace('[/is_family]', '')
		if (url.indexOf('[/perm_comment]') !== -1) url = url.replace('[/perm_comment]', '')
		if (url.indexOf('[/perm_addmeta]') !== -1) url = url.replace('[/perm_addmeta]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosSetSafetyLevel': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.setSafetyLevel'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{safety_level\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['safety_level'])
			if (args['safety_level']) delete args['safety_level']
		}
		if (url.indexOf('[/safety_level]') !== -1) {
			url = url.replace('[/safety_level]', '/' + args['safety_level'])
			if (args['safety_level']) delete args['safety_level']
		}
		var rgx = new RegExp('\{hidden\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hidden'])
			if (args['hidden']) delete args['hidden']
		}
		if (url.indexOf('[/hidden]') !== -1) {
			url = url.replace('[/hidden]', '/' + args['hidden'])
			if (args['hidden']) delete args['hidden']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/safety_level]') !== -1) url = url.replace('[/safety_level]', '')
		if (url.indexOf('[/hidden]') !== -1) url = url.replace('[/hidden]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosSetTags': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.setTags'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosCommentsAddComment': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.comments.addComment'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['comment_text'] == null) throw new Error('comment_text is a required parameter')
		var rgx = new RegExp('\{comment_text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/comment_text]') !== -1) {
			url = url.replace('[/comment_text]', '/' + args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/comment_text]') !== -1) url = url.replace('[/comment_text]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosCommentsDeleteComment': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.comments.deleteComment'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosCommentsEditComment': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.comments.editComment'
		args = args || {}
		if (args['comment_id'] == null) throw new Error('comment_id is a required parameter')
		var rgx = new RegExp('\{comment_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_id'])
			if (args['comment_id']) delete args['comment_id']
		}
		if (url.indexOf('[/comment_id]') !== -1) {
			url = url.replace('[/comment_id]', '/' + args['comment_id'])
			if (args['comment_id']) delete args['comment_id']
		}
		if (args['comment_text'] == null) throw new Error('comment_text is a required parameter')
		var rgx = new RegExp('\{comment_text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/comment_text]') !== -1) {
			url = url.replace('[/comment_text]', '/' + args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/comment_id]') !== -1) url = url.replace('[/comment_id]', '')
		if (url.indexOf('[/comment_text]') !== -1) url = url.replace('[/comment_text]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosCommentsGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.comments.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{min_comment_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_comment_date'])
			if (args['min_comment_date']) delete args['min_comment_date']
		}
		if (url.indexOf('[/min_comment_date]') !== -1) {
			url = url.replace('[/min_comment_date]', '/' + args['min_comment_date'])
			if (args['min_comment_date']) delete args['min_comment_date']
		}
		var rgx = new RegExp('\{max_comment_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_comment_date'])
			if (args['max_comment_date']) delete args['max_comment_date']
		}
		if (url.indexOf('[/max_comment_date]') !== -1) {
			url = url.replace('[/max_comment_date]', '/' + args['max_comment_date'])
			if (args['max_comment_date']) delete args['max_comment_date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/min_comment_date]') !== -1) url = url.replace('[/min_comment_date]', '')
		if (url.indexOf('[/max_comment_date]') !== -1) url = url.replace('[/max_comment_date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosCommentsGetRecentForContacts': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.comments.getRecentForContacts'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{date_lastcomment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_lastcomment'])
			if (args['date_lastcomment']) delete args['date_lastcomment']
		}
		if (url.indexOf('[/date_lastcomment]') !== -1) {
			url = url.replace('[/date_lastcomment]', '/' + args['date_lastcomment'])
			if (args['date_lastcomment']) delete args['date_lastcomment']
		}
		var rgx = new RegExp('\{contacts_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contacts_filter'])
			if (args['contacts_filter']) delete args['contacts_filter']
		}
		if (url.indexOf('[/contacts_filter]') !== -1) {
			url = url.replace('[/contacts_filter]', '/' + args['contacts_filter'])
			if (args['contacts_filter']) delete args['contacts_filter']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date_lastcomment]') !== -1) url = url.replace('[/date_lastcomment]', '')
		if (url.indexOf('[/contacts_filter]') !== -1) url = url.replace('[/contacts_filter]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosGeoBatchCorrectLocation': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.batchCorrectLocation'
		args = args || {}
		if (args['lat'] == null) throw new Error('lat is a required parameter')
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (args['lon'] == null) throw new Error('lon is a required parameter')
		var rgx = new RegExp('\{lon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lon'])
			if (args['lon']) delete args['lon']
		}
		if (url.indexOf('[/lon]') !== -1) {
			url = url.replace('[/lon]', '/' + args['lon'])
			if (args['lon']) delete args['lon']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/lon]') !== -1) url = url.replace('[/lon]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosGeoCorrectLocation': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.correctLocation'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosGeoGetLocation': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.getLocation'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGeoGetPerms': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.getPerms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGeoPhotosForLocation': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.photosForLocation'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['lat'] == null) throw new Error('lat is a required parameter')
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (args['lon'] == null) throw new Error('lon is a required parameter')
		var rgx = new RegExp('\{lon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lon'])
			if (args['lon']) delete args['lon']
		}
		if (url.indexOf('[/lon]') !== -1) {
			url = url.replace('[/lon]', '/' + args['lon'])
			if (args['lon']) delete args['lon']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/lon]') !== -1) url = url.replace('[/lon]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosGeoRemoveLocation': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.removeLocation'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosGeoSetContext': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.setContext'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['context'] == null) args['context'] = "0"
		var rgx = new RegExp('\{context\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['context'])
			if (args['context']) delete args['context']
		}
		if (url.indexOf('[/context]') !== -1) {
			url = url.replace('[/context]', '/' + args['context'])
			if (args['context']) delete args['context']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/context]') !== -1) url = url.replace('[/context]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosGeoSetLocation': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.setLocation'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['lat'] == null) throw new Error('lat is a required parameter')
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (args['lon'] == null) throw new Error('lon is a required parameter')
		var rgx = new RegExp('\{lon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lon'])
			if (args['lon']) delete args['lon']
		}
		if (url.indexOf('[/lon]') !== -1) {
			url = url.replace('[/lon]', '/' + args['lon'])
			if (args['lon']) delete args['lon']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (args['context'] == null) args['context'] = "0"
		var rgx = new RegExp('\{context\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['context'])
			if (args['context']) delete args['context']
		}
		if (url.indexOf('[/context]') !== -1) {
			url = url.replace('[/context]', '/' + args['context'])
			if (args['context']) delete args['context']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/lon]') !== -1) url = url.replace('[/lon]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		if (url.indexOf('[/context]') !== -1) url = url.replace('[/context]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosGeoSetPerms': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.geo.setPerms'
		args = args || {}
		if (args['is_public'] == null) throw new Error('is_public is a required parameter')
		var rgx = new RegExp('\{is_public\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_public'])
			if (args['is_public']) delete args['is_public']
		}
		if (url.indexOf('[/is_public]') !== -1) {
			url = url.replace('[/is_public]', '/' + args['is_public'])
			if (args['is_public']) delete args['is_public']
		}
		if (args['is_contact'] == null) throw new Error('is_contact is a required parameter')
		var rgx = new RegExp('\{is_contact\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_contact'])
			if (args['is_contact']) delete args['is_contact']
		}
		if (url.indexOf('[/is_contact]') !== -1) {
			url = url.replace('[/is_contact]', '/' + args['is_contact'])
			if (args['is_contact']) delete args['is_contact']
		}
		if (args['is_friend'] == null) throw new Error('is_friend is a required parameter')
		var rgx = new RegExp('\{is_friend\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_friend'])
			if (args['is_friend']) delete args['is_friend']
		}
		if (url.indexOf('[/is_friend]') !== -1) {
			url = url.replace('[/is_friend]', '/' + args['is_friend'])
			if (args['is_friend']) delete args['is_friend']
		}
		if (args['is_family'] == null) throw new Error('is_family is a required parameter')
		var rgx = new RegExp('\{is_family\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['is_family'])
			if (args['is_family']) delete args['is_family']
		}
		if (url.indexOf('[/is_family]') !== -1) {
			url = url.replace('[/is_family]', '/' + args['is_family'])
			if (args['is_family']) delete args['is_family']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/is_public]') !== -1) url = url.replace('[/is_public]', '')
		if (url.indexOf('[/is_contact]') !== -1) url = url.replace('[/is_contact]', '')
		if (url.indexOf('[/is_friend]') !== -1) url = url.replace('[/is_friend]', '')
		if (url.indexOf('[/is_family]') !== -1) url = url.replace('[/is_family]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPhotosLicensesGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.licenses.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosLicensesSetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.licenses.setInfo'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['license_id'] == null) throw new Error('license_id is a required parameter')
		var rgx = new RegExp('\{license_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['license_id'])
			if (args['license_id']) delete args['license_id']
		}
		if (url.indexOf('[/license_id]') !== -1) {
			url = url.replace('[/license_id]', '/' + args['license_id'])
			if (args['license_id']) delete args['license_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/license_id]') !== -1) url = url.replace('[/license_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosNotesAdd': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.notes.add'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['note_x'] == null) throw new Error('note_x is a required parameter')
		var rgx = new RegExp('\{note_x\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_x'])
			if (args['note_x']) delete args['note_x']
		}
		if (url.indexOf('[/note_x]') !== -1) {
			url = url.replace('[/note_x]', '/' + args['note_x'])
			if (args['note_x']) delete args['note_x']
		}
		if (args['note_y'] == null) throw new Error('note_y is a required parameter')
		var rgx = new RegExp('\{note_y\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_y'])
			if (args['note_y']) delete args['note_y']
		}
		if (url.indexOf('[/note_y]') !== -1) {
			url = url.replace('[/note_y]', '/' + args['note_y'])
			if (args['note_y']) delete args['note_y']
		}
		if (args['note_w'] == null) throw new Error('note_w is a required parameter')
		var rgx = new RegExp('\{note_w\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_w'])
			if (args['note_w']) delete args['note_w']
		}
		if (url.indexOf('[/note_w]') !== -1) {
			url = url.replace('[/note_w]', '/' + args['note_w'])
			if (args['note_w']) delete args['note_w']
		}
		if (args['note_h'] == null) throw new Error('note_h is a required parameter')
		var rgx = new RegExp('\{note_h\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_h'])
			if (args['note_h']) delete args['note_h']
		}
		if (url.indexOf('[/note_h]') !== -1) {
			url = url.replace('[/note_h]', '/' + args['note_h'])
			if (args['note_h']) delete args['note_h']
		}
		if (args['note_text'] == null) throw new Error('note_text is a required parameter')
		var rgx = new RegExp('\{note_text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_text'])
			if (args['note_text']) delete args['note_text']
		}
		if (url.indexOf('[/note_text]') !== -1) {
			url = url.replace('[/note_text]', '/' + args['note_text'])
			if (args['note_text']) delete args['note_text']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/note_x]') !== -1) url = url.replace('[/note_x]', '')
		if (url.indexOf('[/note_y]') !== -1) url = url.replace('[/note_y]', '')
		if (url.indexOf('[/note_w]') !== -1) url = url.replace('[/note_w]', '')
		if (url.indexOf('[/note_h]') !== -1) url = url.replace('[/note_h]', '')
		if (url.indexOf('[/note_text]') !== -1) url = url.replace('[/note_text]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosNotesDelete': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.notes.delete'
		args = args || {}
		if (args['note_id'] == null) throw new Error('note_id is a required parameter')
		var rgx = new RegExp('\{note_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_id'])
			if (args['note_id']) delete args['note_id']
		}
		if (url.indexOf('[/note_id]') !== -1) {
			url = url.replace('[/note_id]', '/' + args['note_id'])
			if (args['note_id']) delete args['note_id']
		}
		if (url.indexOf('[/note_id]') !== -1) url = url.replace('[/note_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosNotesEdit': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.notes.edit'
		args = args || {}
		if (args['note_id'] == null) throw new Error('note_id is a required parameter')
		var rgx = new RegExp('\{note_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_id'])
			if (args['note_id']) delete args['note_id']
		}
		if (url.indexOf('[/note_id]') !== -1) {
			url = url.replace('[/note_id]', '/' + args['note_id'])
			if (args['note_id']) delete args['note_id']
		}
		if (args['note_x'] == null) throw new Error('note_x is a required parameter')
		var rgx = new RegExp('\{note_x\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_x'])
			if (args['note_x']) delete args['note_x']
		}
		if (url.indexOf('[/note_x]') !== -1) {
			url = url.replace('[/note_x]', '/' + args['note_x'])
			if (args['note_x']) delete args['note_x']
		}
		if (args['note_y'] == null) throw new Error('note_y is a required parameter')
		var rgx = new RegExp('\{note_y\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_y'])
			if (args['note_y']) delete args['note_y']
		}
		if (url.indexOf('[/note_y]') !== -1) {
			url = url.replace('[/note_y]', '/' + args['note_y'])
			if (args['note_y']) delete args['note_y']
		}
		if (args['note_w'] == null) throw new Error('note_w is a required parameter')
		var rgx = new RegExp('\{note_w\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_w'])
			if (args['note_w']) delete args['note_w']
		}
		if (url.indexOf('[/note_w]') !== -1) {
			url = url.replace('[/note_w]', '/' + args['note_w'])
			if (args['note_w']) delete args['note_w']
		}
		if (args['note_h'] == null) throw new Error('note_h is a required parameter')
		var rgx = new RegExp('\{note_h\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_h'])
			if (args['note_h']) delete args['note_h']
		}
		if (url.indexOf('[/note_h]') !== -1) {
			url = url.replace('[/note_h]', '/' + args['note_h'])
			if (args['note_h']) delete args['note_h']
		}
		if (args['note_text'] == null) throw new Error('note_text is a required parameter')
		var rgx = new RegExp('\{note_text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note_text'])
			if (args['note_text']) delete args['note_text']
		}
		if (url.indexOf('[/note_text]') !== -1) {
			url = url.replace('[/note_text]', '/' + args['note_text'])
			if (args['note_text']) delete args['note_text']
		}
		if (url.indexOf('[/note_id]') !== -1) url = url.replace('[/note_id]', '')
		if (url.indexOf('[/note_x]') !== -1) url = url.replace('[/note_x]', '')
		if (url.indexOf('[/note_y]') !== -1) url = url.replace('[/note_y]', '')
		if (url.indexOf('[/note_w]') !== -1) url = url.replace('[/note_w]', '')
		if (url.indexOf('[/note_h]') !== -1) url = url.replace('[/note_h]', '')
		if (url.indexOf('[/note_text]') !== -1) url = url.replace('[/note_text]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosPeopleAdd': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.people.add'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{person_x\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_x'])
			if (args['person_x']) delete args['person_x']
		}
		if (url.indexOf('[/person_x]') !== -1) {
			url = url.replace('[/person_x]', '/' + args['person_x'])
			if (args['person_x']) delete args['person_x']
		}
		var rgx = new RegExp('\{person_y\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_y'])
			if (args['person_y']) delete args['person_y']
		}
		if (url.indexOf('[/person_y]') !== -1) {
			url = url.replace('[/person_y]', '/' + args['person_y'])
			if (args['person_y']) delete args['person_y']
		}
		var rgx = new RegExp('\{person_w\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_w'])
			if (args['person_w']) delete args['person_w']
		}
		if (url.indexOf('[/person_w]') !== -1) {
			url = url.replace('[/person_w]', '/' + args['person_w'])
			if (args['person_w']) delete args['person_w']
		}
		var rgx = new RegExp('\{person_h\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_h'])
			if (args['person_h']) delete args['person_h']
		}
		if (url.indexOf('[/person_h]') !== -1) {
			url = url.replace('[/person_h]', '/' + args['person_h'])
			if (args['person_h']) delete args['person_h']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/person_x]') !== -1) url = url.replace('[/person_x]', '')
		if (url.indexOf('[/person_y]') !== -1) url = url.replace('[/person_y]', '')
		if (url.indexOf('[/person_w]') !== -1) url = url.replace('[/person_w]', '')
		if (url.indexOf('[/person_h]') !== -1) url = url.replace('[/person_h]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosPeopleDelete': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.people.delete'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosPeopleDeleteCoords': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.people.deleteCoords'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosPeopleEditCoords': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.people.editCoords'
		args = args || {}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['user_id'] == null) throw new Error('user_id is a required parameter')
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (args['person_x'] == null) throw new Error('person_x is a required parameter')
		var rgx = new RegExp('\{person_x\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_x'])
			if (args['person_x']) delete args['person_x']
		}
		if (url.indexOf('[/person_x]') !== -1) {
			url = url.replace('[/person_x]', '/' + args['person_x'])
			if (args['person_x']) delete args['person_x']
		}
		if (args['person_y'] == null) throw new Error('person_y is a required parameter')
		var rgx = new RegExp('\{person_y\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_y'])
			if (args['person_y']) delete args['person_y']
		}
		if (url.indexOf('[/person_y]') !== -1) {
			url = url.replace('[/person_y]', '/' + args['person_y'])
			if (args['person_y']) delete args['person_y']
		}
		if (args['person_w'] == null) throw new Error('person_w is a required parameter')
		var rgx = new RegExp('\{person_w\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_w'])
			if (args['person_w']) delete args['person_w']
		}
		if (url.indexOf('[/person_w]') !== -1) {
			url = url.replace('[/person_w]', '/' + args['person_w'])
			if (args['person_w']) delete args['person_w']
		}
		if (args['person_h'] == null) throw new Error('person_h is a required parameter')
		var rgx = new RegExp('\{person_h\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['person_h'])
			if (args['person_h']) delete args['person_h']
		}
		if (url.indexOf('[/person_h]') !== -1) {
			url = url.replace('[/person_h]', '/' + args['person_h'])
			if (args['person_h']) delete args['person_h']
		}
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/person_x]') !== -1) url = url.replace('[/person_x]', '')
		if (url.indexOf('[/person_y]') !== -1) url = url.replace('[/person_y]', '')
		if (url.indexOf('[/person_w]') !== -1) url = url.replace('[/person_w]', '')
		if (url.indexOf('[/person_h]') !== -1) url = url.replace('[/person_h]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosPeopleGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.people.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosTransformRotate': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.transform.rotate'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['degrees'] == null) throw new Error('degrees is a required parameter')
		var rgx = new RegExp('\{degrees\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['degrees'])
			if (args['degrees']) delete args['degrees']
		}
		if (url.indexOf('[/degrees]') !== -1) {
			url = url.replace('[/degrees]', '/' + args['degrees'])
			if (args['degrees']) delete args['degrees']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/degrees]') !== -1) url = url.replace('[/degrees]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosUploadCheckTickets': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photos.upload.checkTickets'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tickets'] == null) throw new Error('tickets is a required parameter')
		var rgx = new RegExp('\{tickets\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tickets'])
			if (args['tickets']) delete args['tickets']
		}
		if (url.indexOf('[/tickets]') !== -1) {
			url = url.replace('[/tickets]', '/' + args['tickets'])
			if (args['tickets']) delete args['tickets']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tickets]') !== -1) url = url.replace('[/tickets]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosetsAddPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.addPhoto'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsCreate': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.create'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (args['primary_photo_id'] == null) throw new Error('primary_photo_id is a required parameter')
		var rgx = new RegExp('\{primary_photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (url.indexOf('[/primary_photo_id]') !== -1) {
			url = url.replace('[/primary_photo_id]', '/' + args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/primary_photo_id]') !== -1) url = url.replace('[/primary_photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsDelete': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.delete'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsEditMeta': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.editMeta'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsEditPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.editPhotos'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['primary_photo_id'] == null) throw new Error('primary_photo_id is a required parameter')
		var rgx = new RegExp('\{primary_photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (url.indexOf('[/primary_photo_id]') !== -1) {
			url = url.replace('[/primary_photo_id]', '/' + args['primary_photo_id'])
			if (args['primary_photo_id']) delete args['primary_photo_id']
		}
		if (args['photo_ids'] == null) throw new Error('photo_ids is a required parameter')
		var rgx = new RegExp('\{photo_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photo_ids]') !== -1) {
			url = url.replace('[/photo_ids]', '/' + args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/primary_photo_id]') !== -1) url = url.replace('[/primary_photo_id]', '')
		if (url.indexOf('[/photo_ids]') !== -1) url = url.replace('[/photo_ids]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsGetContext': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.getContext'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosetsGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosetsGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosetsGetPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.getPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		var rgx = new RegExp('\{extras\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['extras'])
			if (args['extras']) delete args['extras']
		}
		if (url.indexOf('[/extras]') !== -1) {
			url = url.replace('[/extras]', '/' + args['extras'])
			if (args['extras']) delete args['extras']
		}
		var rgx = new RegExp('\{privacy_filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		if (url.indexOf('[/privacy_filter]') !== -1) {
			url = url.replace('[/privacy_filter]', '/' + args['privacy_filter'])
			if (args['privacy_filter']) delete args['privacy_filter']
		}
		var rgx = new RegExp('\{media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['media'])
			if (args['media']) delete args['media']
		}
		if (url.indexOf('[/media]') !== -1) {
			url = url.replace('[/media]', '/' + args['media'])
			if (args['media']) delete args['media']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/extras]') !== -1) url = url.replace('[/extras]', '')
		if (url.indexOf('[/privacy_filter]') !== -1) url = url.replace('[/privacy_filter]', '')
		if (url.indexOf('[/media]') !== -1) url = url.replace('[/media]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPhotosetsOrderSets': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.orderSets'
		args = args || {}
		if (args['photoset_ids'] == null) throw new Error('photoset_ids is a required parameter')
		var rgx = new RegExp('\{photoset_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_ids'])
			if (args['photoset_ids']) delete args['photoset_ids']
		}
		if (url.indexOf('[/photoset_ids]') !== -1) {
			url = url.replace('[/photoset_ids]', '/' + args['photoset_ids'])
			if (args['photoset_ids']) delete args['photoset_ids']
		}
		if (url.indexOf('[/photoset_ids]') !== -1) url = url.replace('[/photoset_ids]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsRemovePhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.removePhoto'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsRemovePhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.removePhotos'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['photo_ids'] == null) throw new Error('photo_ids is a required parameter')
		var rgx = new RegExp('\{photo_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photo_ids]') !== -1) {
			url = url.replace('[/photo_ids]', '/' + args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/photo_ids]') !== -1) url = url.replace('[/photo_ids]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsReorderPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.reorderPhotos'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['photo_ids'] == null) throw new Error('photo_ids is a required parameter')
		var rgx = new RegExp('\{photo_ids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photo_ids]') !== -1) {
			url = url.replace('[/photo_ids]', '/' + args['photo_ids'])
			if (args['photo_ids']) delete args['photo_ids']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/photo_ids]') !== -1) url = url.replace('[/photo_ids]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsSetPrimaryPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.setPrimaryPhoto'
		args = args || {}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsCommentsAddComment': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.comments.addComment'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (args['comment_text'] == null) throw new Error('comment_text is a required parameter')
		var rgx = new RegExp('\{comment_text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/comment_text]') !== -1) {
			url = url.replace('[/comment_text]', '/' + args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/comment_text]') !== -1) url = url.replace('[/comment_text]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsCommentsDeleteComment': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.comments.deleteComment'
		args = args || {}
		if (args['comment_id'] == null) throw new Error('comment_id is a required parameter')
		var rgx = new RegExp('\{comment_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_id'])
			if (args['comment_id']) delete args['comment_id']
		}
		if (url.indexOf('[/comment_id]') !== -1) {
			url = url.replace('[/comment_id]', '/' + args['comment_id'])
			if (args['comment_id']) delete args['comment_id']
		}
		if (url.indexOf('[/comment_id]') !== -1) url = url.replace('[/comment_id]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsCommentsEditComment': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.comments.editComment'
		args = args || {}
		if (args['comment_id'] == null) throw new Error('comment_id is a required parameter')
		var rgx = new RegExp('\{comment_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_id'])
			if (args['comment_id']) delete args['comment_id']
		}
		if (url.indexOf('[/comment_id]') !== -1) {
			url = url.replace('[/comment_id]', '/' + args['comment_id'])
			if (args['comment_id']) delete args['comment_id']
		}
		if (args['comment_text'] == null) throw new Error('comment_text is a required parameter')
		var rgx = new RegExp('\{comment_text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/comment_text]') !== -1) {
			url = url.replace('[/comment_text]', '/' + args['comment_text'])
			if (args['comment_text']) delete args['comment_text']
		}
		if (url.indexOf('[/comment_id]') !== -1) url = url.replace('[/comment_id]', '')
		if (url.indexOf('[/comment_text]') !== -1) url = url.replace('[/comment_text]', '')
		return http({provider:'flickr',url:url,method:'POST',params:args}, opts)
	},
	'flickrPhotosetsCommentsGetList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.photosets.comments.getList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesFind': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.find'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['query'] == null) throw new Error('query is a required parameter')
		var rgx = new RegExp('\{query\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/query]') !== -1) {
			url = url.replace('[/query]', '/' + args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/query]') !== -1) url = url.replace('[/query]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesFindByLatLon': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.findByLatLon'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['lat'] == null) throw new Error('lat is a required parameter')
		var rgx = new RegExp('\{lat\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (url.indexOf('[/lat]') !== -1) {
			url = url.replace('[/lat]', '/' + args['lat'])
			if (args['lat']) delete args['lat']
		}
		if (args['lon'] == null) throw new Error('lon is a required parameter')
		var rgx = new RegExp('\{lon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lon'])
			if (args['lon']) delete args['lon']
		}
		if (url.indexOf('[/lon]') !== -1) {
			url = url.replace('[/lon]', '/' + args['lon'])
			if (args['lon']) delete args['lon']
		}
		var rgx = new RegExp('\{accuracy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/accuracy]') !== -1) {
			url = url.replace('[/accuracy]', '/' + args['accuracy'])
			if (args['accuracy']) delete args['accuracy']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/lat]') !== -1) url = url.replace('[/lat]', '')
		if (url.indexOf('[/lon]') !== -1) url = url.replace('[/lon]', '')
		if (url.indexOf('[/accuracy]') !== -1) url = url.replace('[/accuracy]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesGetChildrenWithPhotosPublic': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.getChildrenWithPhotosPublic'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesGetInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.getInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesGetInfoByUrl': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.getInfoByUrl'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesGetPlaceTypes': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.getPlaceTypes'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesGetShapeHistory': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.getShapeHistory'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesGetTopPlacesList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.getTopPlacesList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['place_type_id'] == null) throw new Error('place_type_id is a required parameter')
		var rgx = new RegExp('\{place_type_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		if (url.indexOf('[/place_type_id]') !== -1) {
			url = url.replace('[/place_type_id]', '/' + args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_type_id]') !== -1) url = url.replace('[/place_type_id]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesPlacesForBoundingBox': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.placesForBoundingBox'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['bbox'] == null) throw new Error('bbox is a required parameter')
		var rgx = new RegExp('\{bbox\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		if (url.indexOf('[/bbox]') !== -1) {
			url = url.replace('[/bbox]', '/' + args['bbox'])
			if (args['bbox']) delete args['bbox']
		}
		var rgx = new RegExp('\{place_type_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		if (url.indexOf('[/place_type_id]') !== -1) {
			url = url.replace('[/place_type_id]', '/' + args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		var rgx = new RegExp('\{place_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type'])
			if (args['place_type']) delete args['place_type']
		}
		if (url.indexOf('[/place_type]') !== -1) {
			url = url.replace('[/place_type]', '/' + args['place_type'])
			if (args['place_type']) delete args['place_type']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/bbox]') !== -1) url = url.replace('[/bbox]', '')
		if (url.indexOf('[/place_type_id]') !== -1) url = url.replace('[/place_type_id]', '')
		if (url.indexOf('[/place_type]') !== -1) url = url.replace('[/place_type]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesPlacesForContacts': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.placesForContacts'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{place_type_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		if (url.indexOf('[/place_type_id]') !== -1) {
			url = url.replace('[/place_type_id]', '/' + args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		var rgx = new RegExp('\{place_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type'])
			if (args['place_type']) delete args['place_type']
		}
		if (url.indexOf('[/place_type]') !== -1) {
			url = url.replace('[/place_type]', '/' + args['place_type'])
			if (args['place_type']) delete args['place_type']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{threshold\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['threshold'])
			if (args['threshold']) delete args['threshold']
		}
		if (url.indexOf('[/threshold]') !== -1) {
			url = url.replace('[/threshold]', '/' + args['threshold'])
			if (args['threshold']) delete args['threshold']
		}
		var rgx = new RegExp('\{contacts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['contacts'])
			if (args['contacts']) delete args['contacts']
		}
		if (url.indexOf('[/contacts]') !== -1) {
			url = url.replace('[/contacts]', '/' + args['contacts'])
			if (args['contacts']) delete args['contacts']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_type_id]') !== -1) url = url.replace('[/place_type_id]', '')
		if (url.indexOf('[/place_type]') !== -1) url = url.replace('[/place_type]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/threshold]') !== -1) url = url.replace('[/threshold]', '')
		if (url.indexOf('[/contacts]') !== -1) url = url.replace('[/contacts]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPlacesPlacesForTags': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.placesForTags'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{place_type_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		if (url.indexOf('[/place_type_id]') !== -1) {
			url = url.replace('[/place_type_id]', '/' + args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{threshold\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['threshold'])
			if (args['threshold']) delete args['threshold']
		}
		if (url.indexOf('[/threshold]') !== -1) {
			url = url.replace('[/threshold]', '/' + args['threshold'])
			if (args['threshold']) delete args['threshold']
		}
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{tag_mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag_mode'])
			if (args['tag_mode']) delete args['tag_mode']
		}
		if (url.indexOf('[/tag_mode]') !== -1) {
			url = url.replace('[/tag_mode]', '/' + args['tag_mode'])
			if (args['tag_mode']) delete args['tag_mode']
		}
		var rgx = new RegExp('\{machine_tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['machine_tags'])
			if (args['machine_tags']) delete args['machine_tags']
		}
		if (url.indexOf('[/machine_tags]') !== -1) {
			url = url.replace('[/machine_tags]', '/' + args['machine_tags'])
			if (args['machine_tags']) delete args['machine_tags']
		}
		var rgx = new RegExp('\{machine_tag_mode\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['machine_tag_mode'])
			if (args['machine_tag_mode']) delete args['machine_tag_mode']
		}
		if (url.indexOf('[/machine_tag_mode]') !== -1) {
			url = url.replace('[/machine_tag_mode]', '/' + args['machine_tag_mode'])
			if (args['machine_tag_mode']) delete args['machine_tag_mode']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_type_id]') !== -1) url = url.replace('[/place_type_id]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/threshold]') !== -1) url = url.replace('[/threshold]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/tag_mode]') !== -1) url = url.replace('[/tag_mode]', '')
		if (url.indexOf('[/machine_tags]') !== -1) url = url.replace('[/machine_tags]', '')
		if (url.indexOf('[/machine_tag_mode]') !== -1) url = url.replace('[/machine_tag_mode]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesPlacesForUser': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.placesForUser'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{place_type_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		if (url.indexOf('[/place_type_id]') !== -1) {
			url = url.replace('[/place_type_id]', '/' + args['place_type_id'])
			if (args['place_type_id']) delete args['place_type_id']
		}
		var rgx = new RegExp('\{place_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_type'])
			if (args['place_type']) delete args['place_type']
		}
		if (url.indexOf('[/place_type]') !== -1) {
			url = url.replace('[/place_type]', '/' + args['place_type'])
			if (args['place_type']) delete args['place_type']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{threshold\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['threshold'])
			if (args['threshold']) delete args['threshold']
		}
		if (url.indexOf('[/threshold]') !== -1) {
			url = url.replace('[/threshold]', '/' + args['threshold'])
			if (args['threshold']) delete args['threshold']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_type_id]') !== -1) url = url.replace('[/place_type_id]', '')
		if (url.indexOf('[/place_type]') !== -1) url = url.replace('[/place_type]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/threshold]') !== -1) url = url.replace('[/threshold]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPlacesResolvePlaceId': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.resolvePlaceId'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['place_id'] == null) throw new Error('place_id is a required parameter')
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesResolvePlaceURL': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.resolvePlaceURL'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPlacesTagsForPlace': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.places.tagsForPlace'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{woe_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		if (url.indexOf('[/woe_id]') !== -1) {
			url = url.replace('[/woe_id]', '/' + args['woe_id'])
			if (args['woe_id']) delete args['woe_id']
		}
		var rgx = new RegExp('\{place_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		if (url.indexOf('[/place_id]') !== -1) {
			url = url.replace('[/place_id]', '/' + args['place_id'])
			if (args['place_id']) delete args['place_id']
		}
		var rgx = new RegExp('\{min_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		if (url.indexOf('[/min_upload_date]') !== -1) {
			url = url.replace('[/min_upload_date]', '/' + args['min_upload_date'])
			if (args['min_upload_date']) delete args['min_upload_date']
		}
		var rgx = new RegExp('\{max_upload_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		if (url.indexOf('[/max_upload_date]') !== -1) {
			url = url.replace('[/max_upload_date]', '/' + args['max_upload_date'])
			if (args['max_upload_date']) delete args['max_upload_date']
		}
		var rgx = new RegExp('\{min_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		if (url.indexOf('[/min_taken_date]') !== -1) {
			url = url.replace('[/min_taken_date]', '/' + args['min_taken_date'])
			if (args['min_taken_date']) delete args['min_taken_date']
		}
		var rgx = new RegExp('\{max_taken_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/max_taken_date]') !== -1) {
			url = url.replace('[/max_taken_date]', '/' + args['max_taken_date'])
			if (args['max_taken_date']) delete args['max_taken_date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/woe_id]') !== -1) url = url.replace('[/woe_id]', '')
		if (url.indexOf('[/place_id]') !== -1) url = url.replace('[/place_id]', '')
		if (url.indexOf('[/min_upload_date]') !== -1) url = url.replace('[/min_upload_date]', '')
		if (url.indexOf('[/max_upload_date]') !== -1) url = url.replace('[/max_upload_date]', '')
		if (url.indexOf('[/min_taken_date]') !== -1) url = url.replace('[/min_taken_date]', '')
		if (url.indexOf('[/max_taken_date]') !== -1) url = url.replace('[/max_taken_date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrPrefsGetContentType': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.prefs.getContentType'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPrefsGetGeoPerms': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.prefs.getGeoPerms'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPrefsGetHidden': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.prefs.getHidden'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPrefsGetPrivacy': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.prefs.getPrivacy'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrPrefsGetSafetyLevel': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.prefs.getSafetyLevel'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrReflectionGetMethodInfo': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.reflection.getMethodInfo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['method_name'] == null) throw new Error('method_name is a required parameter')
		var rgx = new RegExp('\{method_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method_name'])
			if (args['method_name']) delete args['method_name']
		}
		if (url.indexOf('[/method_name]') !== -1) {
			url = url.replace('[/method_name]', '/' + args['method_name'])
			if (args['method_name']) delete args['method_name']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/method_name]') !== -1) url = url.replace('[/method_name]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrReflectionGetMethods': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.reflection.getMethods'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrStatsGetCollectionDomains': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getCollectionDomains'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{collection_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/collection_id]') !== -1) {
			url = url.replace('[/collection_id]', '/' + args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/collection_id]') !== -1) url = url.replace('[/collection_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetCollectionReferrers': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getCollectionReferrers'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		var rgx = new RegExp('\{collection_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/collection_id]') !== -1) {
			url = url.replace('[/collection_id]', '/' + args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		if (url.indexOf('[/collection_id]') !== -1) url = url.replace('[/collection_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetCollectionStats': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getCollectionStats'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		if (args['collection_id'] == null) throw new Error('collection_id is a required parameter')
		var rgx = new RegExp('\{collection_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/collection_id]') !== -1) {
			url = url.replace('[/collection_id]', '/' + args['collection_id'])
			if (args['collection_id']) delete args['collection_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/collection_id]') !== -1) url = url.replace('[/collection_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotoDomains': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotoDomains'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotoReferrers': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotoReferrers'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotoStats': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotoStats'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotosetDomains': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotosetDomains'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotosetReferrers': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotosetReferrers'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotosetStats': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotosetStats'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		if (args['photoset_id'] == null) throw new Error('photoset_id is a required parameter')
		var rgx = new RegExp('\{photoset_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/photoset_id]') !== -1) {
			url = url.replace('[/photoset_id]', '/' + args['photoset_id'])
			if (args['photoset_id']) delete args['photoset_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/photoset_id]') !== -1) url = url.replace('[/photoset_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotostreamDomains': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotostreamDomains'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotostreamReferrers': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotostreamReferrers'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPhotostreamStats': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPhotostreamStats'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['date'] == null) throw new Error('date is a required parameter')
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetPopularPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getPopularPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{per_page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		if (url.indexOf('[/per_page]') !== -1) {
			url = url.replace('[/per_page]', '/' + args['per_page'])
			if (args['per_page']) delete args['per_page']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/per_page]') !== -1) url = url.replace('[/per_page]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrStatsGetTotalViews': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.stats.getTotalViews'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/date]') !== -1) {
			url = url.replace('[/date]', '/' + args['date'])
			if (args['date']) delete args['date']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/date]') !== -1) url = url.replace('[/date]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrTagsGetClusterPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getClusterPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (args['cluster_id'] == null) throw new Error('cluster_id is a required parameter')
		var rgx = new RegExp('\{cluster_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cluster_id'])
			if (args['cluster_id']) delete args['cluster_id']
		}
		if (url.indexOf('[/cluster_id]') !== -1) {
			url = url.replace('[/cluster_id]', '/' + args['cluster_id'])
			if (args['cluster_id']) delete args['cluster_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/cluster_id]') !== -1) url = url.replace('[/cluster_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTagsGetClusters': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getClusters'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTagsGetHotList': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getHotList'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['period'])
			if (args['period']) delete args['period']
		}
		if (url.indexOf('[/period]') !== -1) {
			url = url.replace('[/period]', '/' + args['period'])
			if (args['period']) delete args['period']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/period]') !== -1) url = url.replace('[/period]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTagsGetListPhoto': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getListPhoto'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['photo_id'] == null) throw new Error('photo_id is a required parameter')
		var rgx = new RegExp('\{photo_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/photo_id]') !== -1) {
			url = url.replace('[/photo_id]', '/' + args['photo_id'])
			if (args['photo_id']) delete args['photo_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/photo_id]') !== -1) url = url.replace('[/photo_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTagsGetListUser': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getListUser'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTagsGetListUserPopular': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getListUserPopular'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTagsGetListUserRaw': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getListUserRaw'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrTagsGetRelated': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.tags.getRelated'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrTestEcho': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.test.echo'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrTestLogin': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.test.login'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrTestNull': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.test.null'
		args = args || {}
		return http({provider:'flickr',url:url,method:'GET',params:args}, opts)
	},
	'flickrUrlsGetGroup': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.urls.getGroup'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['group_id'] == null) throw new Error('group_id is a required parameter')
		var rgx = new RegExp('\{group_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/group_id]') !== -1) {
			url = url.replace('[/group_id]', '/' + args['group_id'])
			if (args['group_id']) delete args['group_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/group_id]') !== -1) url = url.replace('[/group_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrUrlsGetUserPhotos': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.urls.getUserPhotos'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrUrlsGetUserProfile': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.urls.getUserProfile'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{user_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/user_id]') !== -1) {
			url = url.replace('[/user_id]', '/' + args['user_id'])
			if (args['user_id']) delete args['user_id']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/user_id]') !== -1) url = url.replace('[/user_id]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrUrlsLookupGallery': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.urls.lookupGallery'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrUrlsLookupGroup': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.urls.lookupGroup'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'flickrUrlsLookupUser': function(args, opts) {
		var url = 'http://api.flickr.com/services//rest/?method=flickr.urls.lookupUser'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'flickr',url:url,method:'GET',params:args, auth:'none'}, opts)
	}
})