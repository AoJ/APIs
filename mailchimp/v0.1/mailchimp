/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'mailchimp'})},
	'campaign.related.get.content': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignContent'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignContent"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{for_archive\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['for_archive'])
			if (args['for_archive']) delete args['for_archive']
		}
		if (url.indexOf('[/for_archive]') !== -1) {
			url = url.replace('[/for_archive]', '/' + args['for_archive'])
			if (args['for_archive']) delete args['for_archive']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/for_archive]') !== -1) url = url.replace('[/for_archive]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.create': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignCreate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignCreate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['options'] == null) throw new Error('options is a required parameter')
		var rgx = new RegExp('\{options\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/options]') !== -1) {
			url = url.replace('[/options]', '/' + args['options'])
			if (args['options']) delete args['options']
		}
		if (args['content'] == null) throw new Error('content is a required parameter')
		var rgx = new RegExp('\{content\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content'])
			if (args['content']) delete args['content']
		}
		if (url.indexOf('[/content]') !== -1) {
			url = url.replace('[/content]', '/' + args['content'])
			if (args['content']) delete args['content']
		}
		var rgx = new RegExp('\{segment_opts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['segment_opts'])
			if (args['segment_opts']) delete args['segment_opts']
		}
		if (url.indexOf('[/segment_opts]') !== -1) {
			url = url.replace('[/segment_opts]', '/' + args['segment_opts'])
			if (args['segment_opts']) delete args['segment_opts']
		}
		var rgx = new RegExp('\{type_opts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type_opts'])
			if (args['type_opts']) delete args['type_opts']
		}
		if (url.indexOf('[/type_opts]') !== -1) {
			url = url.replace('[/type_opts]', '/' + args['type_opts'])
			if (args['type_opts']) delete args['type_opts']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/options]') !== -1) url = url.replace('[/options]', '')
		if (url.indexOf('[/content]') !== -1) url = url.replace('[/content]', '')
		if (url.indexOf('[/segment_opts]') !== -1) url = url.replace('[/segment_opts]', '')
		if (url.indexOf('[/type_opts]') !== -1) url = url.replace('[/type_opts]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignDelete'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignDelete"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.ecomm.order.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignEcommOrderAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignEcommOrderAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['order'] == null) throw new Error('order is a required parameter')
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.pause': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignPause'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignPause"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.replicate': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignReplicate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignReplicate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.resume': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignResume'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignResume"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.schedule': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignSchedule'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignSchedule"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['schedule_time'] == null) throw new Error('schedule_time is a required parameter')
		var rgx = new RegExp('\{schedule_time\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['schedule_time'])
			if (args['schedule_time']) delete args['schedule_time']
		}
		if (url.indexOf('[/schedule_time]') !== -1) {
			url = url.replace('[/schedule_time]', '/' + args['schedule_time'])
			if (args['schedule_time']) delete args['schedule_time']
		}
		var rgx = new RegExp('\{schedule_time_b\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['schedule_time_b'])
			if (args['schedule_time_b']) delete args['schedule_time_b']
		}
		if (url.indexOf('[/schedule_time_b]') !== -1) {
			url = url.replace('[/schedule_time_b]', '/' + args['schedule_time_b'])
			if (args['schedule_time_b']) delete args['schedule_time_b']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/schedule_time]') !== -1) url = url.replace('[/schedule_time]', '')
		if (url.indexOf('[/schedule_time_b]') !== -1) url = url.replace('[/schedule_time_b]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.segment.test': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignSegmentTest'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignSegmentTest"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['list_id'] == null) throw new Error('list_id is a required parameter')
		var rgx = new RegExp('\{list_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (url.indexOf('[/list_id]') !== -1) {
			url = url.replace('[/list_id]', '/' + args['list_id'])
			if (args['list_id']) delete args['list_id']
		}
		if (args['options'] == null) throw new Error('options is a required parameter')
		var rgx = new RegExp('\{options\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/options]') !== -1) {
			url = url.replace('[/options]', '/' + args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/list_id]') !== -1) url = url.replace('[/list_id]', '')
		if (url.indexOf('[/options]') !== -1) url = url.replace('[/options]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.send.now': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignSendNow'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignSendNow"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.send.test': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignSendTest'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignSendTest"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['test_emails'] == null) throw new Error('test_emails is a required parameter')
		var rgx = new RegExp('\{test_emails\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['test_emails'])
			if (args['test_emails']) delete args['test_emails']
		}
		if (url.indexOf('[/test_emails]') !== -1) {
			url = url.replace('[/test_emails]', '/' + args['test_emails'])
			if (args['test_emails']) delete args['test_emails']
		}
		var rgx = new RegExp('\{send_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['send_type'])
			if (args['send_type']) delete args['send_type']
		}
		if (url.indexOf('[/send_type]') !== -1) {
			url = url.replace('[/send_type]', '/' + args['send_type'])
			if (args['send_type']) delete args['send_type']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/test_emails]') !== -1) url = url.replace('[/test_emails]', '')
		if (url.indexOf('[/send_type]') !== -1) url = url.replace('[/send_type]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.share.report': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignShareReport'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignShareReport"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['opts'] == null) throw new Error('opts is a required parameter')
		var rgx = new RegExp('\{opts\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['opts'])
			if (args['opts']) delete args['opts']
		}
		if (url.indexOf('[/opts]') !== -1) {
			url = url.replace('[/opts]', '/' + args['opts'])
			if (args['opts']) delete args['opts']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/opts]') !== -1) url = url.replace('[/opts]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.template.content': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignTemplateContent'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignTemplateContent"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.unschedule': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignUnschedule'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignUnschedule"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignUpdate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignUpdate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.related.list': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaigns'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaigns"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		var rgx = new RegExp('\{filters\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) {
			url = url.replace('[/filters]', '/' + args['filters'])
			if (args['filters']) delete args['filters']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/filters]') !== -1) url = url.replace('[/filters]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.abuse.reports': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignAbuseReports'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignAbuseReports"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.advice': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignAdvice'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignAdvice"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.analytics': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignAnalytics'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignAnalytics"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.bounce.message': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignBounceMessage'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignBounceMessage"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.bounce.messages': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignBounceMessages'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignBounceMessages"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.click': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignClickStats'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignClickStats"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.ecomm.orders': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignEcommOrders'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignEcommOrders"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.eepurl': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignEepUrlStats'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignEepUrlStats"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.email.domain.performance': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignEmailDomainPerformance'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignEmailDomainPerformance"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.geo.opens': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignGeoOpens'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignGeoOpens"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.geo.opens.for.country': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignGeoOpensForCountry'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignGeoOpensForCountry"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['code'] == null) throw new Error('code is a required parameter')
		var rgx = new RegExp('\{code\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['code'])
			if (args['code']) delete args['code']
		}
		if (url.indexOf('[/code]') !== -1) {
			url = url.replace('[/code]', '/' + args['code'])
			if (args['code']) delete args['code']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/code]') !== -1) url = url.replace('[/code]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.members': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignMembers'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignMembers"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignStats'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignStats"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.stats.unsubscribes': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignUnsubscribes'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignUnsubscribes"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.report.data.click.detail.aim': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignClickDetailAIM'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignClickDetailAIM"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.report.data.email.stats.aim': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignEmailStatsAIM'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignEmailStatsAIM"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.report.data.email.stats.aim.all': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignEmailStatsAIMAll'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignEmailStatsAIMAll"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.report.data.not.opened.aim': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignNotOpenedAIM'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignNotOpenedAIM"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.report.data.opened.aim': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignOpenedAIM'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignOpenedAIM"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['cid'] == null) throw new Error('cid is a required parameter')
		var rgx = new RegExp('\{cid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cid'])
			if (args['cid']) delete args['cid']
		}
		if (url.indexOf('[/cid]') !== -1) {
			url = url.replace('[/cid]', '/' + args['cid'])
			if (args['cid']) delete args['cid']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/cid]') !== -1) url = url.replace('[/cid]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'ecommerce.order.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=ecommOrderAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "ecommOrderAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['order'] == null) throw new Error('order is a required parameter')
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'ecommerce.order.del': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=ecommOrderDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "ecommOrderDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['store_id'] == null) throw new Error('store_id is a required parameter')
		var rgx = new RegExp('\{store_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['store_id'])
			if (args['store_id']) delete args['store_id']
		}
		if (url.indexOf('[/store_id]') !== -1) {
			url = url.replace('[/store_id]', '/' + args['store_id'])
			if (args['store_id']) delete args['store_id']
		}
		if (args['order_id'] == null) throw new Error('order_id is a required parameter')
		var rgx = new RegExp('\{order_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order_id'])
			if (args['order_id']) delete args['order_id']
		}
		if (url.indexOf('[/order_id]') !== -1) {
			url = url.replace('[/order_id]', '/' + args['order_id'])
			if (args['order_id']) delete args['order_id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/store_id]') !== -1) url = url.replace('[/store_id]', '')
		if (url.indexOf('[/order_id]') !== -1) url = url.replace('[/order_id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'ecommerce.orders': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=ecommOrders'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "ecommOrders"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'folder.related.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=folderAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "folderAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'folder.related.del': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=folderDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "folderDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['fid'] == null) throw new Error('fid is a required parameter')
		var rgx = new RegExp('\{fid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fid'])
			if (args['fid']) delete args['fid']
		}
		if (url.indexOf('[/fid]') !== -1) {
			url = url.replace('[/fid]', '/' + args['fid'])
			if (args['fid']) delete args['fid']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/fid]') !== -1) url = url.replace('[/fid]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'folder.related.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=folderUpdate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "folderUpdate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['fid'] == null) throw new Error('fid is a required parameter')
		var rgx = new RegExp('\{fid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fid'])
			if (args['fid']) delete args['fid']
		}
		if (url.indexOf('[/fid]') !== -1) {
			url = url.replace('[/fid]', '/' + args['fid'])
			if (args['fid']) delete args['fid']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/fid]') !== -1) url = url.replace('[/fid]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'folder.related.list': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=folders'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "folders"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'gmonkeys.list.activity': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=gmonkeyActivity'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "gmonkeyActivity"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'gmonkeys.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=gmonkeyAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "gmonkeyAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'gmonkeys.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=gmonkeyDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "gmonkeyDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'gmonkeys.list': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=gmonkeyMembers'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "gmonkeyMembers"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.campaigns.for.mail': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=campaignsForEmail'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "campaignsForEmail"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		var rgx = new RegExp('\{options\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/options]') !== -1) {
			url = url.replace('[/options]', '/' + args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		if (url.indexOf('[/options]') !== -1) url = url.replace('[/options]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.chimp.chatter': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=chimpChatter'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "chimpChatter"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.generate.text': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=generateText'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "generateText"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['content'] == null) throw new Error('content is a required parameter')
		var rgx = new RegExp('\{content\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['content'])
			if (args['content']) delete args['content']
		}
		if (url.indexOf('[/content]') !== -1) {
			url = url.replace('[/content]', '/' + args['content'])
			if (args['content']) delete args['content']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/content]') !== -1) url = url.replace('[/content]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.get.account.details': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=getAccountDetails'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "getAccountDetails"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.inline.css': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=inlineCss'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "inlineCss"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['html'] == null) throw new Error('html is a required parameter')
		var rgx = new RegExp('\{html\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['html'])
			if (args['html']) delete args['html']
		}
		if (url.indexOf('[/html]') !== -1) {
			url = url.replace('[/html]', '/' + args['html'])
			if (args['html']) delete args['html']
		}
		var rgx = new RegExp('\{strip_css\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strip_css'])
			if (args['strip_css']) delete args['strip_css']
		}
		if (url.indexOf('[/strip_css]') !== -1) {
			url = url.replace('[/strip_css]', '/' + args['strip_css'])
			if (args['strip_css']) delete args['strip_css']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/html]') !== -1) url = url.replace('[/html]', '')
		if (url.indexOf('[/strip_css]') !== -1) url = url.replace('[/strip_css]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.lists.for.email': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listsForEmail'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listsForEmail"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'helper.ping': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=ping'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "ping"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.abuse.reports': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listAbuseReports'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listAbuseReports"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.activity': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listActivity'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listActivity"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.batch.subscribe': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listBatchSubscribe'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listBatchSubscribe"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['batch'] == null) throw new Error('batch is a required parameter')
		var rgx = new RegExp('\{batch\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['batch'])
			if (args['batch']) delete args['batch']
		}
		if (url.indexOf('[/batch]') !== -1) {
			url = url.replace('[/batch]', '/' + args['batch'])
			if (args['batch']) delete args['batch']
		}
		if (args['double_optin'] == null) args['double_optin'] = "true"
		var rgx = new RegExp('\{double_optin\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['double_optin'])
			if (args['double_optin']) delete args['double_optin']
		}
		if (url.indexOf('[/double_optin]') !== -1) {
			url = url.replace('[/double_optin]', '/' + args['double_optin'])
			if (args['double_optin']) delete args['double_optin']
		}
		if (args['update_existing'] == null) args['update_existing'] = "false"
		var rgx = new RegExp('\{update_existing\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['update_existing'])
			if (args['update_existing']) delete args['update_existing']
		}
		if (url.indexOf('[/update_existing]') !== -1) {
			url = url.replace('[/update_existing]', '/' + args['update_existing'])
			if (args['update_existing']) delete args['update_existing']
		}
		var rgx = new RegExp('\{replace_interests\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['replace_interests'])
			if (args['replace_interests']) delete args['replace_interests']
		}
		if (url.indexOf('[/replace_interests]') !== -1) {
			url = url.replace('[/replace_interests]', '/' + args['replace_interests'])
			if (args['replace_interests']) delete args['replace_interests']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/batch]') !== -1) url = url.replace('[/batch]', '')
		if (url.indexOf('[/double_optin]') !== -1) url = url.replace('[/double_optin]', '')
		if (url.indexOf('[/update_existing]') !== -1) url = url.replace('[/update_existing]', '')
		if (url.indexOf('[/replace_interests]') !== -1) url = url.replace('[/replace_interests]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.batch.unsubscribe': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listBatchUnsubscribe'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listBatchUnsubscribe"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['emails'] == null) throw new Error('emails is a required parameter')
		var rgx = new RegExp('\{emails\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['emails'])
			if (args['emails']) delete args['emails']
		}
		if (url.indexOf('[/emails]') !== -1) {
			url = url.replace('[/emails]', '/' + args['emails'])
			if (args['emails']) delete args['emails']
		}
		if (args['delete_member'] == null) args['delete_member'] = "false"
		var rgx = new RegExp('\{delete_member\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['delete_member'])
			if (args['delete_member']) delete args['delete_member']
		}
		if (url.indexOf('[/delete_member]') !== -1) {
			url = url.replace('[/delete_member]', '/' + args['delete_member'])
			if (args['delete_member']) delete args['delete_member']
		}
		if (args['send_goodbye'] == null) args['send_goodbye'] = "true"
		var rgx = new RegExp('\{send_goodbye\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['send_goodbye'])
			if (args['send_goodbye']) delete args['send_goodbye']
		}
		if (url.indexOf('[/send_goodbye]') !== -1) {
			url = url.replace('[/send_goodbye]', '/' + args['send_goodbye'])
			if (args['send_goodbye']) delete args['send_goodbye']
		}
		if (args['send_notify'] == null) args['send_notify'] = "false"
		var rgx = new RegExp('\{send_notify\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['send_notify'])
			if (args['send_notify']) delete args['send_notify']
		}
		if (url.indexOf('[/send_notify]') !== -1) {
			url = url.replace('[/send_notify]', '/' + args['send_notify'])
			if (args['send_notify']) delete args['send_notify']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/emails]') !== -1) url = url.replace('[/emails]', '')
		if (url.indexOf('[/delete_member]') !== -1) url = url.replace('[/delete_member]', '')
		if (url.indexOf('[/send_goodbye]') !== -1) url = url.replace('[/send_goodbye]', '')
		if (url.indexOf('[/send_notify]') !== -1) url = url.replace('[/send_notify]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.clients': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listClients'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listClients"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.growth.history': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listGrowthHistory'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listGrowthHistory"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.group.add.single': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['group_name'] == null) throw new Error('group_name is a required parameter')
		var rgx = new RegExp('\{group_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_name'])
			if (args['group_name']) delete args['group_name']
		}
		if (url.indexOf('[/group_name]') !== -1) {
			url = url.replace('[/group_name]', '/' + args['group_name'])
			if (args['group_name']) delete args['group_name']
		}
		var rgx = new RegExp('\{grouping_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/grouping_id]') !== -1) {
			url = url.replace('[/grouping_id]', '/' + args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/group_name]') !== -1) url = url.replace('[/group_name]', '')
		if (url.indexOf('[/grouping_id]') !== -1) url = url.replace('[/grouping_id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.group.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['group_name'] == null) throw new Error('group_name is a required parameter')
		var rgx = new RegExp('\{group_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_name'])
			if (args['group_name']) delete args['group_name']
		}
		if (url.indexOf('[/group_name]') !== -1) {
			url = url.replace('[/group_name]', '/' + args['group_name'])
			if (args['group_name']) delete args['group_name']
		}
		var rgx = new RegExp('\{grouping_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/grouping_id]') !== -1) {
			url = url.replace('[/grouping_id]', '/' + args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/group_name]') !== -1) url = url.replace('[/group_name]', '')
		if (url.indexOf('[/grouping_id]') !== -1) url = url.replace('[/grouping_id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.group.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupUpdate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupUpdate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['old_name'] == null) throw new Error('old_name is a required parameter')
		var rgx = new RegExp('\{old_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['old_name'])
			if (args['old_name']) delete args['old_name']
		}
		if (url.indexOf('[/old_name]') !== -1) {
			url = url.replace('[/old_name]', '/' + args['old_name'])
			if (args['old_name']) delete args['old_name']
		}
		if (args['new_name'] == null) throw new Error('new_name is a required parameter')
		var rgx = new RegExp('\{new_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['new_name'])
			if (args['new_name']) delete args['new_name']
		}
		if (url.indexOf('[/new_name]') !== -1) {
			url = url.replace('[/new_name]', '/' + args['new_name'])
			if (args['new_name']) delete args['new_name']
		}
		var rgx = new RegExp('\{optional\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['optional'])
			if (args['optional']) delete args['optional']
		}
		if (url.indexOf('[/optional]') !== -1) {
			url = url.replace('[/optional]', '/' + args['optional'])
			if (args['optional']) delete args['optional']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/old_name]') !== -1) url = url.replace('[/old_name]', '')
		if (url.indexOf('[/new_name]') !== -1) url = url.replace('[/new_name]', '')
		if (url.indexOf('[/optional]') !== -1) url = url.replace('[/optional]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.grouping.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupingAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupingAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{groups\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['groups'])
			if (args['groups']) delete args['groups']
		}
		if (url.indexOf('[/groups]') !== -1) {
			url = url.replace('[/groups]', '/' + args['groups'])
			if (args['groups']) delete args['groups']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/groups]') !== -1) url = url.replace('[/groups]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.grouping.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupingDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupingDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['grouping_id'] == null) throw new Error('grouping_id is a required parameter')
		var rgx = new RegExp('\{grouping_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/grouping_id]') !== -1) {
			url = url.replace('[/grouping_id]', '/' + args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/grouping_id]') !== -1) url = url.replace('[/grouping_id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.grouping.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupingUpdate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupingUpdate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['grouping_id'] == null) throw new Error('grouping_id is a required parameter')
		var rgx = new RegExp('\{grouping_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (url.indexOf('[/grouping_id]') !== -1) {
			url = url.replace('[/grouping_id]', '/' + args['grouping_id'])
			if (args['grouping_id']) delete args['grouping_id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['value'] == null) throw new Error('value is a required parameter')
		var rgx = new RegExp('\{value\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/value]') !== -1) {
			url = url.replace('[/value]', '/' + args['value'])
			if (args['value']) delete args['value']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/grouping_id]') !== -1) url = url.replace('[/grouping_id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/value]') !== -1) url = url.replace('[/value]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.interest.grouping.list': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listInterestGroupings'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listInterestGroupings"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.locations': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listLocations'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listLocations"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.member.activity': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMemberActivity'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMemberActivity"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.member.info': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMemberInfo'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMemberInfo"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.members': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMembers'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMembers"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['status'] == null) args['status'] = "subscribed"
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.merge.tag.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMergeVarAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMergeVarAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{options\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/options]') !== -1) {
			url = url.replace('[/options]', '/' + args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/options]') !== -1) url = url.replace('[/options]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.merge.tag.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMergeVarDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMergeVarDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.merge.tag.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMergeVarUpdate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMergeVarUpdate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (args['options'] == null) throw new Error('options is a required parameter')
		var rgx = new RegExp('\{options\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/options]') !== -1) {
			url = url.replace('[/options]', '/' + args['options'])
			if (args['options']) delete args['options']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/options]') !== -1) url = url.replace('[/options]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.merge.tags': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listMergeVars'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listMergeVars"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.static.segment.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listStaticSegmentAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listStaticSegmentAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.static.segment.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listStaticSegmentDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listStaticSegmentDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['seg_id'] == null) throw new Error('seg_id is a required parameter')
		var rgx = new RegExp('\{seg_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (url.indexOf('[/seg_id]') !== -1) {
			url = url.replace('[/seg_id]', '/' + args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/seg_id]') !== -1) url = url.replace('[/seg_id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.static.segment.members.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listStaticSegmentMembersAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listStaticSegmentMembersAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['seg_id'] == null) throw new Error('seg_id is a required parameter')
		var rgx = new RegExp('\{seg_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (url.indexOf('[/seg_id]') !== -1) {
			url = url.replace('[/seg_id]', '/' + args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (args['batch'] == null) throw new Error('batch is a required parameter')
		var rgx = new RegExp('\{batch\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['batch'])
			if (args['batch']) delete args['batch']
		}
		if (url.indexOf('[/batch]') !== -1) {
			url = url.replace('[/batch]', '/' + args['batch'])
			if (args['batch']) delete args['batch']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/seg_id]') !== -1) url = url.replace('[/seg_id]', '')
		if (url.indexOf('[/batch]') !== -1) url = url.replace('[/batch]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.static.segment.members.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listStaticSegmentMembersDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listStaticSegmentMembersDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['seg_id'] == null) throw new Error('seg_id is a required parameter')
		var rgx = new RegExp('\{seg_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (url.indexOf('[/seg_id]') !== -1) {
			url = url.replace('[/seg_id]', '/' + args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (args['batch'] == null) throw new Error('batch is a required parameter')
		var rgx = new RegExp('\{batch\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['batch'])
			if (args['batch']) delete args['batch']
		}
		if (url.indexOf('[/batch]') !== -1) {
			url = url.replace('[/batch]', '/' + args['batch'])
			if (args['batch']) delete args['batch']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/seg_id]') !== -1) url = url.replace('[/seg_id]', '')
		if (url.indexOf('[/batch]') !== -1) url = url.replace('[/batch]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.static.segment.reset': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listStaticSegmentReset'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listStaticSegmentReset"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['seg_id'] == null) throw new Error('seg_id is a required parameter')
		var rgx = new RegExp('\{seg_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (url.indexOf('[/seg_id]') !== -1) {
			url = url.replace('[/seg_id]', '/' + args['seg_id'])
			if (args['seg_id']) delete args['seg_id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/seg_id]') !== -1) url = url.replace('[/seg_id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.static.segments': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listStaticSegments'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listStaticSegments"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.subscribe': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listSubscribe'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listSubscribe"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		var rgx = new RegExp('\{merge_vars\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['merge_vars'])
			if (args['merge_vars']) delete args['merge_vars']
		}
		if (url.indexOf('[/merge_vars]') !== -1) {
			url = url.replace('[/merge_vars]', '/' + args['merge_vars'])
			if (args['merge_vars']) delete args['merge_vars']
		}
		var rgx = new RegExp('\{email_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_type'])
			if (args['email_type']) delete args['email_type']
		}
		if (url.indexOf('[/email_type]') !== -1) {
			url = url.replace('[/email_type]', '/' + args['email_type'])
			if (args['email_type']) delete args['email_type']
		}
		var rgx = new RegExp('\{double_optin\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['double_optin'])
			if (args['double_optin']) delete args['double_optin']
		}
		if (url.indexOf('[/double_optin]') !== -1) {
			url = url.replace('[/double_optin]', '/' + args['double_optin'])
			if (args['double_optin']) delete args['double_optin']
		}
		var rgx = new RegExp('\{update_existing\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['update_existing'])
			if (args['update_existing']) delete args['update_existing']
		}
		if (url.indexOf('[/update_existing]') !== -1) {
			url = url.replace('[/update_existing]', '/' + args['update_existing'])
			if (args['update_existing']) delete args['update_existing']
		}
		var rgx = new RegExp('\{replace_interests\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['replace_interests'])
			if (args['replace_interests']) delete args['replace_interests']
		}
		if (url.indexOf('[/replace_interests]') !== -1) {
			url = url.replace('[/replace_interests]', '/' + args['replace_interests'])
			if (args['replace_interests']) delete args['replace_interests']
		}
		var rgx = new RegExp('\{send_welcome\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['send_welcome'])
			if (args['send_welcome']) delete args['send_welcome']
		}
		if (url.indexOf('[/send_welcome]') !== -1) {
			url = url.replace('[/send_welcome]', '/' + args['send_welcome'])
			if (args['send_welcome']) delete args['send_welcome']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		if (url.indexOf('[/merge_vars]') !== -1) url = url.replace('[/merge_vars]', '')
		if (url.indexOf('[/email_type]') !== -1) url = url.replace('[/email_type]', '')
		if (url.indexOf('[/double_optin]') !== -1) url = url.replace('[/double_optin]', '')
		if (url.indexOf('[/update_existing]') !== -1) url = url.replace('[/update_existing]', '')
		if (url.indexOf('[/replace_interests]') !== -1) url = url.replace('[/replace_interests]', '')
		if (url.indexOf('[/send_welcome]') !== -1) url = url.replace('[/send_welcome]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.unsubscribe': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listUnsubscribe'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listUnsubscribe"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		var rgx = new RegExp('\{delete_member\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['delete_member'])
			if (args['delete_member']) delete args['delete_member']
		}
		if (url.indexOf('[/delete_member]') !== -1) {
			url = url.replace('[/delete_member]', '/' + args['delete_member'])
			if (args['delete_member']) delete args['delete_member']
		}
		var rgx = new RegExp('\{send_goodbye\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['send_goodbye'])
			if (args['send_goodbye']) delete args['send_goodbye']
		}
		if (url.indexOf('[/send_goodbye]') !== -1) {
			url = url.replace('[/send_goodbye]', '/' + args['send_goodbye'])
			if (args['send_goodbye']) delete args['send_goodbye']
		}
		var rgx = new RegExp('\{send_notify\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['send_notify'])
			if (args['send_notify']) delete args['send_notify']
		}
		if (url.indexOf('[/send_notify]') !== -1) {
			url = url.replace('[/send_notify]', '/' + args['send_notify'])
			if (args['send_notify']) delete args['send_notify']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		if (url.indexOf('[/delete_member]') !== -1) url = url.replace('[/delete_member]', '')
		if (url.indexOf('[/send_goodbye]') !== -1) url = url.replace('[/send_goodbye]', '')
		if (url.indexOf('[/send_notify]') !== -1) url = url.replace('[/send_notify]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.member.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listUpdateMember'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listUpdateMember"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (args['merge_vars'] == null) throw new Error('merge_vars is a required parameter')
		var rgx = new RegExp('\{merge_vars\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['merge_vars'])
			if (args['merge_vars']) delete args['merge_vars']
		}
		if (url.indexOf('[/merge_vars]') !== -1) {
			url = url.replace('[/merge_vars]', '/' + args['merge_vars'])
			if (args['merge_vars']) delete args['merge_vars']
		}
		var rgx = new RegExp('\{email_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_type'])
			if (args['email_type']) delete args['email_type']
		}
		if (url.indexOf('[/email_type]') !== -1) {
			url = url.replace('[/email_type]', '/' + args['email_type'])
			if (args['email_type']) delete args['email_type']
		}
		var rgx = new RegExp('\{replace_interests\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['replace_interests'])
			if (args['replace_interests']) delete args['replace_interests']
		}
		if (url.indexOf('[/replace_interests]') !== -1) {
			url = url.replace('[/replace_interests]', '/' + args['replace_interests'])
			if (args['replace_interests']) delete args['replace_interests']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		if (url.indexOf('[/merge_vars]') !== -1) url = url.replace('[/merge_vars]', '')
		if (url.indexOf('[/email_type]') !== -1) url = url.replace('[/email_type]', '')
		if (url.indexOf('[/replace_interests]') !== -1) url = url.replace('[/replace_interests]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.webhook.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listWebhookAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listWebhookAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{actions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['actions'])
			if (args['actions']) delete args['actions']
		}
		if (url.indexOf('[/actions]') !== -1) {
			url = url.replace('[/actions]', '/' + args['actions'])
			if (args['actions']) delete args['actions']
		}
		var rgx = new RegExp('\{sources\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sources'])
			if (args['sources']) delete args['sources']
		}
		if (url.indexOf('[/sources]') !== -1) {
			url = url.replace('[/sources]', '/' + args['sources'])
			if (args['sources']) delete args['sources']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/actions]') !== -1) url = url.replace('[/actions]', '')
		if (url.indexOf('[/sources]') !== -1) url = url.replace('[/sources]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.webhook.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listWebhookDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listWebhookDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.webhooks': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=listWebhooks'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "listWebhooks"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.get.all': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=lists'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "lists"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		var rgx = new RegExp('\{filters\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) {
			url = url.replace('[/filters]', '/' + args['filters'])
			if (args['filters']) delete args['filters']
		}
		var rgx = new RegExp('\{start\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start'])
			if (args['start']) delete args['start']
		}
		if (url.indexOf('[/start]') !== -1) {
			url = url.replace('[/start]', '/' + args['start'])
			if (args['start']) delete args['start']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/filters]') !== -1) url = url.replace('[/filters]', '')
		if (url.indexOf('[/start]') !== -1) url = url.replace('[/start]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'security.apikey.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=apikeyAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "apikeyAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['password'] == null) throw new Error('password is a required parameter')
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'security.apikey.expire': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=apikeyExpire'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "apikeyExpire"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['password'] == null) throw new Error('password is a required parameter')
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'security.apikey.list': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=apikeys'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "apikeys"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['password'] == null) throw new Error('password is a required parameter')
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{expired\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['expired'])
			if (args['expired']) delete args['expired']
		}
		if (url.indexOf('[/expired]') !== -1) {
			url = url.replace('[/expired]', '/' + args['expired'])
			if (args['expired']) delete args['expired']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/expired]') !== -1) url = url.replace('[/expired]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'template.add': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=templateAdd'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "templateAdd"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['html'] == null) throw new Error('html is a required parameter')
		var rgx = new RegExp('\{html\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['html'])
			if (args['html']) delete args['html']
		}
		if (url.indexOf('[/html]') !== -1) {
			url = url.replace('[/html]', '/' + args['html'])
			if (args['html']) delete args['html']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/html]') !== -1) url = url.replace('[/html]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'template.delete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=templateDel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "templateDel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'template.get.info': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=templateInfo'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "templateInfo"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['tid'] == null) throw new Error('tid is a required parameter')
		var rgx = new RegExp('\{tid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tid'])
			if (args['tid']) delete args['tid']
		}
		if (url.indexOf('[/tid]') !== -1) {
			url = url.replace('[/tid]', '/' + args['tid'])
			if (args['tid']) delete args['tid']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/tid]') !== -1) url = url.replace('[/tid]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'template.undelete': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=templateUndel'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "templateUndel"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'template.update': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=templateUpdate'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "templateUpdate"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['values'] == null) throw new Error('values is a required parameter')
		var rgx = new RegExp('\{values\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/values]') !== -1) {
			url = url.replace('[/values]', '/' + args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/values]') !== -1) url = url.replace('[/values]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'template.list': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/1.3/?method=templates'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['method'] == null) args['method'] = "templates"
		var rgx = new RegExp('\{method\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['method'])
			if (args['method']) delete args['method']
		}
		if (url.indexOf('[/method]') !== -1) {
			url = url.replace('[/method]', '/' + args['method'])
			if (args['method']) delete args['method']
		}
		var rgx = new RegExp('\{output\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output'])
			if (args['output']) delete args['output']
		}
		if (url.indexOf('[/output]') !== -1) {
			url = url.replace('[/output]', '/' + args['output'])
			if (args['output']) delete args['output']
		}
		var rgx = new RegExp('\{types\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['types'])
			if (args['types']) delete args['types']
		}
		if (url.indexOf('[/types]') !== -1) {
			url = url.replace('[/types]', '/' + args['types'])
			if (args['types']) delete args['types']
		}
		var rgx = new RegExp('\{category\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['category'])
			if (args['category']) delete args['category']
		}
		if (url.indexOf('[/category]') !== -1) {
			url = url.replace('[/category]', '/' + args['category'])
			if (args['category']) delete args['category']
		}
		var rgx = new RegExp('\{inactives\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inactives'])
			if (args['inactives']) delete args['inactives']
		}
		if (url.indexOf('[/inactives]') !== -1) {
			url = url.replace('[/inactives]', '/' + args['inactives'])
			if (args['inactives']) delete args['inactives']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/method]') !== -1) url = url.replace('[/method]', '')
		if (url.indexOf('[/output]') !== -1) url = url.replace('[/output]', '')
		if (url.indexOf('[/types]') !== -1) url = url.replace('[/types]', '')
		if (url.indexOf('[/category]') !== -1) url = url.replace('[/category]', '')
		if (url.indexOf('[/inactives]') !== -1) url = url.replace('[/inactives]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'list.export': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/export/1.0/list/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{segment\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['segment'])
			if (args['segment']) delete args['segment']
		}
		if (url.indexOf('[/segment]') !== -1) {
			url = url.replace('[/segment]', '/' + args['segment'])
			if (args['segment']) delete args['segment']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/segment]') !== -1) url = url.replace('[/segment]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'campaign.suscriber.activity.export': function(args, opts) {
		var url = 'https://{dc}.api.mailchimp.com/export/1.0/campaignSubscriberActivity/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{include_empty\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_empty'])
			if (args['include_empty']) delete args['include_empty']
		}
		if (url.indexOf('[/include_empty]') !== -1) {
			url = url.replace('[/include_empty]', '/' + args['include_empty'])
			if (args['include_empty']) delete args['include_empty']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/include_empty]') !== -1) url = url.replace('[/include_empty]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.delete.verified.email.address': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/DeleteVerifiedEmailAddress.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.list.verified.email.addresses': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/ListVerifiedEmailAddresses.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.verify.email.address': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/VerifyEmailAddress.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.bounces': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetBounces.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.send.stats': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetSendStats.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		var rgx = new RegExp('\{tag_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag_id'])
			if (args['tag_id']) delete args['tag_id']
		}
		if (url.indexOf('[/tag_id]') !== -1) {
			url = url.replace('[/tag_id]', '/' + args['tag_id'])
			if (args['tag_id']) delete args['tag_id']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		if (url.indexOf('[/tag_id]') !== -1) url = url.replace('[/tag_id]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.tags': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetTags.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.url.stats': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetUrlStats.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		var rgx = new RegExp('\{url_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url_id'])
			if (args['url_id']) delete args['url_id']
		}
		if (url.indexOf('[/url_id]') !== -1) {
			url = url.replace('[/url_id]', '/' + args['url_id'])
			if (args['url_id']) delete args['url_id']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		if (url.indexOf('[/url_id]') !== -1) url = url.replace('[/url_id]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.urls': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetUrls.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.send.email': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/SendEmail.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		if (args['track_opens'] == null) throw new Error('track_opens is a required parameter')
		var rgx = new RegExp('\{track_opens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_opens'])
			if (args['track_opens']) delete args['track_opens']
		}
		if (url.indexOf('[/track_opens]') !== -1) {
			url = url.replace('[/track_opens]', '/' + args['track_opens'])
			if (args['track_opens']) delete args['track_opens']
		}
		if (args['track_opens'] == null) throw new Error('track_opens is a required parameter')
		var rgx = new RegExp('\{track_opens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['track_opens'])
			if (args['track_opens']) delete args['track_opens']
		}
		if (url.indexOf('[/track_opens]') !== -1) {
			url = url.replace('[/track_opens]', '/' + args['track_opens'])
			if (args['track_opens']) delete args['track_opens']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		if (url.indexOf('[/track_opens]') !== -1) url = url.replace('[/track_opens]', '')
		if (url.indexOf('[/track_opens]') !== -1) url = url.replace('[/track_opens]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.send.quota': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetSendQuota.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	},
	'sts.get.send.statistics': function(args, opts) {
		var url = 'https://{dc}.sts.mailchimp.com/1.0/GetSendStatistics.{output_format}/'
		args = args || {}
		if (args['dc'] == null) throw new Error('dc is a required parameter')
		var rgx = new RegExp('\{dc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (url.indexOf('[/dc]') !== -1) {
			url = url.replace('[/dc]', '/' + args['dc'])
			if (args['dc']) delete args['dc']
		}
		if (args['apikey'] == null) throw new Error('apikey is a required parameter')
		var rgx = new RegExp('\{apikey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		if (url.indexOf('[/apikey]') !== -1) {
			url = url.replace('[/apikey]', '/' + args['apikey'])
			if (args['apikey']) delete args['apikey']
		}
		var rgx = new RegExp('\{output_format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/output_format]') !== -1) {
			url = url.replace('[/output_format]', '/' + args['output_format'])
			if (args['output_format']) delete args['output_format']
		}
		if (url.indexOf('[/dc]') !== -1) url = url.replace('[/dc]', '')
		if (url.indexOf('[/apikey]') !== -1) url = url.replace('[/apikey]', '')
		if (url.indexOf('[/output_format]') !== -1) url = url.replace('[/output_format]', '')
		return http({provider:'mailchimp',url:url,method:'GET',params:args}, opts)
	}
})