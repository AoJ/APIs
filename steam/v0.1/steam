/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:fs('/bin/steam')})},
/** 
 * GetNewsForApp returns the latest of a game specified by its appID.
 * @category News
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [appid] AppID of the game you want the news of.	   
 * @param {string} [count] How many news enties you want to get returned.	   
 * @param {string} [maxlength] Maximum length of each news entry.	   
 * @methodhttp GET
 */
	'getNewsForApp': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['appid'] == null) throw new Error('appid is a required parameter')
		var rgx = new RegExp('\{appid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appid'])
			if (args['appid']) delete args['appid']
		}
		if (url.indexOf('[/appid]') !== -1) {
			url = url.replace('[/appid]', '/' + args['appid'])
			if (args['appid']) delete args['appid']
		}
		if (args['count'] == null) throw new Error('count is a required parameter')
		var rgx = new RegExp('\{count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['count'])
			if (args['count']) delete args['count']
		}
		if (url.indexOf('[/count]') !== -1) {
			url = url.replace('[/count]', '/' + args['count'])
			if (args['count']) delete args['count']
		}
		if (args['maxlength'] == null) throw new Error('maxlength is a required parameter')
		var rgx = new RegExp('\{maxlength\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['maxlength'])
			if (args['maxlength']) delete args['maxlength']
		}
		if (url.indexOf('[/maxlength]') !== -1) {
			url = url.replace('[/maxlength]', '/' + args['maxlength'])
			if (args['maxlength']) delete args['maxlength']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/appid]') !== -1) url = url.replace('[/appid]', '')
		if (url.indexOf('[/count]') !== -1) url = url.replace('[/count]', '')
		if (url.indexOf('[/maxlength]') !== -1) url = url.replace('[/maxlength]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'none'}, opts)
	},
/** 
 * Returns on global achievements overview of a specific game in percentages.
 * @category User
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [gameid] AppID of the game you want the news of.	   
 * @methodhttp GET
 */
	'getGlobalAchievementPercentagesForApp': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v0002/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['gameid'] == null) throw new Error('gameid is a required parameter')
		var rgx = new RegExp('\{gameid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['gameid'])
			if (args['gameid']) delete args['gameid']
		}
		if (url.indexOf('[/gameid]') !== -1) {
			url = url.replace('[/gameid]', '/' + args['gameid'])
			if (args['gameid']) delete args['gameid']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/gameid]') !== -1) url = url.replace('[/gameid]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'none'}, opts)
	},
/** 
 * Returns basic profile information for a list of 64-bit Steam IDs.
 * @category User
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [steamids] Comma-delimited list of 64 bit Steam IDs to return profile information for. Up to 100 Steam IDs can be requested.	   
 * @methodhttp GET
 */
	'getPlayerSummaries': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamUser/getPlayerSummaries/v0002/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['steamids'] == null) throw new Error('steamids is a required parameter')
		var rgx = new RegExp('\{steamids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steamids'])
			if (args['steamids']) delete args['steamids']
		}
		if (url.indexOf('[/steamids]') !== -1) {
			url = url.replace('[/steamids]', '/' + args['steamids'])
			if (args['steamids']) delete args['steamids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/steamids]') !== -1) url = url.replace('[/steamids]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'manual'}, opts)
	},
/** 
 * Returns basic profile information for a list of 64-bit Steam IDs.
 * @category User
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [steamids] Comma-delimited list of 64 bit Steam IDs to return profile information for. Up to 100 Steam IDs can be requested.	   
 * @methodhttp GET
 */
	'getPlayerSummaries': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['steamids'] == null) throw new Error('steamids is a required parameter')
		var rgx = new RegExp('\{steamids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steamids'])
			if (args['steamids']) delete args['steamids']
		}
		if (url.indexOf('[/steamids]') !== -1) {
			url = url.replace('[/steamids]', '/' + args['steamids'])
			if (args['steamids']) delete args['steamids']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/steamids]') !== -1) url = url.replace('[/steamids]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'manual'}, opts)
	},
/** 
 * Returns the friend list of any Steam user, provided his Steam Community profile visibility is set to "Public".
 * @category User
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [steamid] 64 bit Steam ID to return friend list for.	   
 * @param {string} [relationship] Relationship filter. Possibles values: all, friend.	   
 * @methodhttp GET
 */
	'getFriendList': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamUser/GetFriendList/v0001/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['steamid'] == null) throw new Error('steamid is a required parameter')
		var rgx = new RegExp('\{steamid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steamid'])
			if (args['steamid']) delete args['steamid']
		}
		if (url.indexOf('[/steamid]') !== -1) {
			url = url.replace('[/steamid]', '/' + args['steamid'])
			if (args['steamid']) delete args['steamid']
		}
		if (args['relationship'] == null) throw new Error('relationship is a required parameter')
		var rgx = new RegExp('\{relationship\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['relationship'])
			if (args['relationship']) delete args['relationship']
		}
		if (url.indexOf('[/relationship]') !== -1) {
			url = url.replace('[/relationship]', '/' + args['relationship'])
			if (args['relationship']) delete args['relationship']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/steamid]') !== -1) url = url.replace('[/steamid]', '')
		if (url.indexOf('[/relationship]') !== -1) url = url.replace('[/relationship]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'manual'}, opts)
	},
/** 
 * Returns a list of achievements for this user by app id
 * @category User
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [steamid] 64 bit Steam ID to return friend list for.	   
 * @param {string} [appid] The ID for the game you're requesting	   
 * @param {string} l Language. If specified, it will return language data for the requested language.	   
 * @methodhttp GET
 */
	'getPlayerAchievements': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v0001/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['steamid'] == null) throw new Error('steamid is a required parameter')
		var rgx = new RegExp('\{steamid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steamid'])
			if (args['steamid']) delete args['steamid']
		}
		if (url.indexOf('[/steamid]') !== -1) {
			url = url.replace('[/steamid]', '/' + args['steamid'])
			if (args['steamid']) delete args['steamid']
		}
		if (args['appid'] == null) throw new Error('appid is a required parameter')
		var rgx = new RegExp('\{appid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appid'])
			if (args['appid']) delete args['appid']
		}
		if (url.indexOf('[/appid]') !== -1) {
			url = url.replace('[/appid]', '/' + args['appid'])
			if (args['appid']) delete args['appid']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1 && args['/l']) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/steamid]') !== -1) url = url.replace('[/steamid]', '')
		if (url.indexOf('[/appid]') !== -1) url = url.replace('[/appid]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'manual'}, opts)
	},
/** 
 * Returns a list of achievements for this user by app id
 * @category User
 * @param {string} [format] Output format. json (default), xml or vdf.	   
 * @param {string} [steamid] 64 bit Steam ID to return friend list for.	   
 * @param {string} [appid] The ID for the game you're requesting	   
 * @param {string} l Language. If specified, it will return language data for the requested language.	   
 * @methodhttp GET
 */
	'getUserStatsForGame': function(args, opts) {
		var url = ' http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['steamid'] == null) throw new Error('steamid is a required parameter')
		var rgx = new RegExp('\{steamid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['steamid'])
			if (args['steamid']) delete args['steamid']
		}
		if (url.indexOf('[/steamid]') !== -1) {
			url = url.replace('[/steamid]', '/' + args['steamid'])
			if (args['steamid']) delete args['steamid']
		}
		if (args['appid'] == null) throw new Error('appid is a required parameter')
		var rgx = new RegExp('\{appid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['appid'])
			if (args['appid']) delete args['appid']
		}
		if (url.indexOf('[/appid]') !== -1) {
			url = url.replace('[/appid]', '/' + args['appid'])
			if (args['appid']) delete args['appid']
		}
		var rgx = new RegExp('\{l\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/l]') !== -1 && args['/l']) {
			url = url.replace('[/l]', '/' + args['l'])
			if (args['l']) delete args['l']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/steamid]') !== -1) url = url.replace('[/steamid]', '')
		if (url.indexOf('[/appid]') !== -1) url = url.replace('[/appid]', '')
		if (url.indexOf('[/l]') !== -1) url = url.replace('[/l]', '')
		return http({provider:fs('/bin/steam'),url:url,method:'GET',params:args, auth:'manual'}, opts)
	}
})