/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'contextio'})},
	'listOauthProviders': function(args, opts) {
		var url = 'https://api.context.io/2.0/oauth_providers'
		args = args || {}
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'addOauthProviders': function(args, opts) {
		var url = 'https://api.context.io/2.0/oauth_providers'
		args = args || {}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['provider_consumer_key'] == null) throw new Error('provider_consumer_key is a required parameter')
		var rgx = new RegExp('\{provider_consumer_key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_consumer_key'])
			if (args['provider_consumer_key']) delete args['provider_consumer_key']
		}
		if (url.indexOf('[/provider_consumer_key]') !== -1) {
			url = url.replace('[/provider_consumer_key]', '/' + args['provider_consumer_key'])
			if (args['provider_consumer_key']) delete args['provider_consumer_key']
		}
		if (args['provider_consumer_secret'] == null) throw new Error('provider_consumer_secret is a required parameter')
		var rgx = new RegExp('\{provider_consumer_secret\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_consumer_secret'])
			if (args['provider_consumer_secret']) delete args['provider_consumer_secret']
		}
		if (url.indexOf('[/provider_consumer_secret]') !== -1) {
			url = url.replace('[/provider_consumer_secret]', '/' + args['provider_consumer_secret'])
			if (args['provider_consumer_secret']) delete args['provider_consumer_secret']
		}
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/provider_consumer_key]') !== -1) url = url.replace('[/provider_consumer_key]', '')
		if (url.indexOf('[/provider_consumer_secret]') !== -1) url = url.replace('[/provider_consumer_secret]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getOauthProvider': function(args, opts) {
		var url = 'https://api.context.io/2.0/oauth_providers/{key}'
		args = args || {}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'removeOauthProvider': function(args, opts) {
		var url = 'https://api.context.io/2.0/oauth_providers/{key}'
		args = args || {}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'discoverEmailImapSettings': function(args, opts) {
		var url = 'https://api.context.io/2.0/discovery'
		args = args || {}
		if (args['source_type'] == null) throw new Error('source_type is a required parameter')
		var rgx = new RegExp('\{source_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source_type'])
			if (args['source_type']) delete args['source_type']
		}
		if (url.indexOf('[/source_type]') !== -1) {
			url = url.replace('[/source_type]', '/' + args['source_type'])
			if (args['source_type']) delete args['source_type']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/source_type]') !== -1) url = url.replace('[/source_type]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listConnectTokens': function(args, opts) {
		var url = 'https://api.context.io/2.0/connect_tokens'
		args = args || {}
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'obtainNewConnectToken': function(args, opts) {
		var url = 'https://api.context.io/2.0/connect_tokens'
		args = args || {}
		if (args['callback_url'] == null) throw new Error('callback_url is a required parameter')
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		var rgx = new RegExp('\{service_level\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		if (url.indexOf('[/service_level]') !== -1) {
			url = url.replace('[/service_level]', '/' + args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{first_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		if (url.indexOf('[/first_name]') !== -1) {
			url = url.replace('[/first_name]', '/' + args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		var rgx = new RegExp('\{last_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/last_name]') !== -1) {
			url = url.replace('[/last_name]', '/' + args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		if (url.indexOf('[/service_level]') !== -1) url = url.replace('[/service_level]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/first_name]') !== -1) url = url.replace('[/first_name]', '')
		if (url.indexOf('[/last_name]') !== -1) url = url.replace('[/last_name]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getConnectToken': function(args, opts) {
		var url = 'https://api.context.io/2.0/connect_tokens/{token}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'removeConnectToken': function(args, opts) {
		var url = 'https://api.context.io/2.0/connect_tokens/{token}'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'listAccounts': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{status_ok\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status_ok'])
			if (args['status_ok']) delete args['status_ok']
		}
		if (url.indexOf('[/status_ok]') !== -1) {
			url = url.replace('[/status_ok]', '/' + args['status_ok'])
			if (args['status_ok']) delete args['status_ok']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/status_ok]') !== -1) url = url.replace('[/status_ok]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'addAccount': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts'
		args = args || {}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{first_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		if (url.indexOf('[/first_name]') !== -1) {
			url = url.replace('[/first_name]', '/' + args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		var rgx = new RegExp('\{last_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/last_name]') !== -1) {
			url = url.replace('[/last_name]', '/' + args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/first_name]') !== -1) url = url.replace('[/first_name]', '')
		if (url.indexOf('[/last_name]') !== -1) url = url.replace('[/last_name]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getAccount': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'removeAccount': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'modifyAccount': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{first_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		if (url.indexOf('[/first_name]') !== -1) {
			url = url.replace('[/first_name]', '/' + args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		var rgx = new RegExp('\{last_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/last_name]') !== -1) {
			url = url.replace('[/last_name]', '/' + args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/first_name]') !== -1) url = url.replace('[/first_name]', '')
		if (url.indexOf('[/last_name]') !== -1) url = url.replace('[/last_name]', '')
		return http({provider:'contextio',url:url,method:'PUT',params:args}, opts)
	},
	'listAccountConnectTokens': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/connect_tokens'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'obtainNewAccountConnectToken': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/connect_tokens'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['callback_url'] == null) throw new Error('callback_url is a required parameter')
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		var rgx = new RegExp('\{service_level\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		if (url.indexOf('[/service_level]') !== -1) {
			url = url.replace('[/service_level]', '/' + args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{first_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		if (url.indexOf('[/first_name]') !== -1) {
			url = url.replace('[/first_name]', '/' + args['first_name'])
			if (args['first_name']) delete args['first_name']
		}
		var rgx = new RegExp('\{last_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/last_name]') !== -1) {
			url = url.replace('[/last_name]', '/' + args['last_name'])
			if (args['last_name']) delete args['last_name']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		if (url.indexOf('[/service_level]') !== -1) url = url.replace('[/service_level]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/first_name]') !== -1) url = url.replace('[/first_name]', '')
		if (url.indexOf('[/last_name]') !== -1) url = url.replace('[/last_name]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getAccountConnectToken': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/connect_tokens/{token}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'removeAccountConnectToken': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/connect_tokens/{token}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['token'] == null) throw new Error('token is a required parameter')
		var rgx = new RegExp('\{token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/token]') !== -1) {
			url = url.replace('[/token]', '/' + args['token'])
			if (args['token']) delete args['token']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/token]') !== -1) url = url.replace('[/token]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'listAccountContacts': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/contacts'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{search\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['search'])
			if (args['search']) delete args['search']
		}
		if (url.indexOf('[/search]') !== -1) {
			url = url.replace('[/search]', '/' + args['search'])
			if (args['search']) delete args['search']
		}
		var rgx = new RegExp('\{active_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active_before'])
			if (args['active_before']) delete args['active_before']
		}
		if (url.indexOf('[/active_before]') !== -1) {
			url = url.replace('[/active_before]', '/' + args['active_before'])
			if (args['active_before']) delete args['active_before']
		}
		var rgx = new RegExp('\{active_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active_after'])
			if (args['active_after']) delete args['active_after']
		}
		if (url.indexOf('[/active_after]') !== -1) {
			url = url.replace('[/active_after]', '/' + args['active_after'])
			if (args['active_after']) delete args['active_after']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/search]') !== -1) url = url.replace('[/search]', '')
		if (url.indexOf('[/active_before]') !== -1) url = url.replace('[/active_before]', '')
		if (url.indexOf('[/active_after]') !== -1) url = url.replace('[/active_after]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountContact': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/contacts/{email}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountContactFiles': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/contacts/{email}/files'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountContactMessages': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/contacts/{email}/messages'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountContactThreads': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/contacts/{email}/threads'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountEmailAddresses': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/email_addresses'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'addAccountEmailAddress': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/email_addresses'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email_address'] == null) throw new Error('email_address is a required parameter')
		var rgx = new RegExp('\{email_address\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/email_address]') !== -1) {
			url = url.replace('[/email_address]', '/' + args['email_address'])
			if (args['email_address']) delete args['email_address']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email_address]') !== -1) url = url.replace('[/email_address]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'removeAccountEmailAddress': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/email_addresses/{email}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'setAccountEmailAddressAsPrimary': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/email_addresses/{email}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (args['primary'] == null) args['primary'] = "1"
		var rgx = new RegExp('\{primary\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['primary'])
			if (args['primary']) delete args['primary']
		}
		if (url.indexOf('[/primary]') !== -1) {
			url = url.replace('[/primary]', '/' + args['primary'])
			if (args['primary']) delete args['primary']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/primary]') !== -1) url = url.replace('[/primary]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'listAccountFiles': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/files'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{file_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['file_name'])
			if (args['file_name']) delete args['file_name']
		}
		if (url.indexOf('[/file_name]') !== -1) {
			url = url.replace('[/file_name]', '/' + args['file_name'])
			if (args['file_name']) delete args['file_name']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['to'])
			if (args['to']) delete args['to']
		}
		if (url.indexOf('[/to]') !== -1) {
			url = url.replace('[/to]', '/' + args['to'])
			if (args['to']) delete args['to']
		}
		var rgx = new RegExp('\{from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['from'])
			if (args['from']) delete args['from']
		}
		if (url.indexOf('[/from]') !== -1) {
			url = url.replace('[/from]', '/' + args['from'])
			if (args['from']) delete args['from']
		}
		var rgx = new RegExp('\{cc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cc'])
			if (args['cc']) delete args['cc']
		}
		if (url.indexOf('[/cc]') !== -1) {
			url = url.replace('[/cc]', '/' + args['cc'])
			if (args['cc']) delete args['cc']
		}
		var rgx = new RegExp('\{bcc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bcc'])
			if (args['bcc']) delete args['bcc']
		}
		if (url.indexOf('[/bcc]') !== -1) {
			url = url.replace('[/bcc]', '/' + args['bcc'])
			if (args['bcc']) delete args['bcc']
		}
		var rgx = new RegExp('\{date_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_before'])
			if (args['date_before']) delete args['date_before']
		}
		if (url.indexOf('[/date_before]') !== -1) {
			url = url.replace('[/date_before]', '/' + args['date_before'])
			if (args['date_before']) delete args['date_before']
		}
		var rgx = new RegExp('\{date_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_after'])
			if (args['date_after']) delete args['date_after']
		}
		if (url.indexOf('[/date_after]') !== -1) {
			url = url.replace('[/date_after]', '/' + args['date_after'])
			if (args['date_after']) delete args['date_after']
		}
		var rgx = new RegExp('\{indexed_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['indexed_before'])
			if (args['indexed_before']) delete args['indexed_before']
		}
		if (url.indexOf('[/indexed_before]') !== -1) {
			url = url.replace('[/indexed_before]', '/' + args['indexed_before'])
			if (args['indexed_before']) delete args['indexed_before']
		}
		var rgx = new RegExp('\{indexed_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['indexed_after'])
			if (args['indexed_after']) delete args['indexed_after']
		}
		if (url.indexOf('[/indexed_after]') !== -1) {
			url = url.replace('[/indexed_after]', '/' + args['indexed_after'])
			if (args['indexed_after']) delete args['indexed_after']
		}
		var rgx = new RegExp('\{group_by_revisions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group_by_revisions'])
			if (args['group_by_revisions']) delete args['group_by_revisions']
		}
		if (url.indexOf('[/group_by_revisions]') !== -1) {
			url = url.replace('[/group_by_revisions]', '/' + args['group_by_revisions'])
			if (args['group_by_revisions']) delete args['group_by_revisions']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/file_name]') !== -1) url = url.replace('[/file_name]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/to]') !== -1) url = url.replace('[/to]', '')
		if (url.indexOf('[/from]') !== -1) url = url.replace('[/from]', '')
		if (url.indexOf('[/cc]') !== -1) url = url.replace('[/cc]', '')
		if (url.indexOf('[/bcc]') !== -1) url = url.replace('[/bcc]', '')
		if (url.indexOf('[/date_before]') !== -1) url = url.replace('[/date_before]', '')
		if (url.indexOf('[/date_after]') !== -1) url = url.replace('[/date_after]', '')
		if (url.indexOf('[/indexed_before]') !== -1) url = url.replace('[/indexed_before]', '')
		if (url.indexOf('[/indexed_after]') !== -1) url = url.replace('[/indexed_after]', '')
		if (url.indexOf('[/group_by_revisions]') !== -1) url = url.replace('[/group_by_revisions]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountFile': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/files/{fileId}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['fileId'] == null) throw new Error('fileId is a required parameter')
		var rgx = new RegExp('\{fileId\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/fileId]') !== -1) {
			url = url.replace('[/fileId]', '/' + args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fileId]') !== -1) url = url.replace('[/fileId]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listComparableAccountFiles': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/files/{fileId}/changes'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['fileId'] == null) throw new Error('fileId is a required parameter')
		var rgx = new RegExp('\{fileId\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/fileId]') !== -1) {
			url = url.replace('[/fileId]', '/' + args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fileId]') !== -1) url = url.replace('[/fileId]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountFileContent': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/files/{fileId}/content'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['fileId'] == null) throw new Error('fileId is a required parameter')
		var rgx = new RegExp('\{fileId\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/fileId]') !== -1) {
			url = url.replace('[/fileId]', '/' + args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fileId]') !== -1) url = url.replace('[/fileId]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountFileRelatedFiles': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/files/{fileId}/related'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['fileId'] == null) throw new Error('fileId is a required parameter')
		var rgx = new RegExp('\{fileId\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/fileId]') !== -1) {
			url = url.replace('[/fileId]', '/' + args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fileId]') !== -1) url = url.replace('[/fileId]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountFileRevisions': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/files/{fileId}/revisions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['fileId'] == null) throw new Error('fileId is a required parameter')
		var rgx = new RegExp('\{fileId\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/fileId]') !== -1) {
			url = url.replace('[/fileId]', '/' + args['fileId'])
			if (args['fileId']) delete args['fileId']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fileId]') !== -1) url = url.replace('[/fileId]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountMessages': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{subject\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (url.indexOf('[/subject]') !== -1) {
			url = url.replace('[/subject]', '/' + args['subject'])
			if (args['subject']) delete args['subject']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['to'])
			if (args['to']) delete args['to']
		}
		if (url.indexOf('[/to]') !== -1) {
			url = url.replace('[/to]', '/' + args['to'])
			if (args['to']) delete args['to']
		}
		var rgx = new RegExp('\{from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['from'])
			if (args['from']) delete args['from']
		}
		if (url.indexOf('[/from]') !== -1) {
			url = url.replace('[/from]', '/' + args['from'])
			if (args['from']) delete args['from']
		}
		var rgx = new RegExp('\{cc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cc'])
			if (args['cc']) delete args['cc']
		}
		if (url.indexOf('[/cc]') !== -1) {
			url = url.replace('[/cc]', '/' + args['cc'])
			if (args['cc']) delete args['cc']
		}
		var rgx = new RegExp('\{bcc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bcc'])
			if (args['bcc']) delete args['bcc']
		}
		if (url.indexOf('[/bcc]') !== -1) {
			url = url.replace('[/bcc]', '/' + args['bcc'])
			if (args['bcc']) delete args['bcc']
		}
		var rgx = new RegExp('\{folder\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['folder'])
			if (args['folder']) delete args['folder']
		}
		if (url.indexOf('[/folder]') !== -1) {
			url = url.replace('[/folder]', '/' + args['folder'])
			if (args['folder']) delete args['folder']
		}
		var rgx = new RegExp('\{date_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_before'])
			if (args['date_before']) delete args['date_before']
		}
		if (url.indexOf('[/date_before]') !== -1) {
			url = url.replace('[/date_before]', '/' + args['date_before'])
			if (args['date_before']) delete args['date_before']
		}
		var rgx = new RegExp('\{date_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['date_after'])
			if (args['date_after']) delete args['date_after']
		}
		if (url.indexOf('[/date_after]') !== -1) {
			url = url.replace('[/date_after]', '/' + args['date_after'])
			if (args['date_after']) delete args['date_after']
		}
		var rgx = new RegExp('\{indexed_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['indexed_before'])
			if (args['indexed_before']) delete args['indexed_before']
		}
		if (url.indexOf('[/indexed_before]') !== -1) {
			url = url.replace('[/indexed_before]', '/' + args['indexed_before'])
			if (args['indexed_before']) delete args['indexed_before']
		}
		var rgx = new RegExp('\{indexed_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['indexed_after'])
			if (args['indexed_after']) delete args['indexed_after']
		}
		if (url.indexOf('[/indexed_after]') !== -1) {
			url = url.replace('[/indexed_after]', '/' + args['indexed_after'])
			if (args['indexed_after']) delete args['indexed_after']
		}
		var rgx = new RegExp('\{include_body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_body'])
			if (args['include_body']) delete args['include_body']
		}
		if (url.indexOf('[/include_body]') !== -1) {
			url = url.replace('[/include_body]', '/' + args['include_body'])
			if (args['include_body']) delete args['include_body']
		}
		var rgx = new RegExp('\{include_headers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_headers'])
			if (args['include_headers']) delete args['include_headers']
		}
		if (url.indexOf('[/include_headers]') !== -1) {
			url = url.replace('[/include_headers]', '/' + args['include_headers'])
			if (args['include_headers']) delete args['include_headers']
		}
		var rgx = new RegExp('\{include_flags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_flags'])
			if (args['include_flags']) delete args['include_flags']
		}
		if (url.indexOf('[/include_flags]') !== -1) {
			url = url.replace('[/include_flags]', '/' + args['include_flags'])
			if (args['include_flags']) delete args['include_flags']
		}
		var rgx = new RegExp('\{body_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body_type'])
			if (args['body_type']) delete args['body_type']
		}
		if (url.indexOf('[/body_type]') !== -1) {
			url = url.replace('[/body_type]', '/' + args['body_type'])
			if (args['body_type']) delete args['body_type']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/subject]') !== -1) url = url.replace('[/subject]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/to]') !== -1) url = url.replace('[/to]', '')
		if (url.indexOf('[/from]') !== -1) url = url.replace('[/from]', '')
		if (url.indexOf('[/cc]') !== -1) url = url.replace('[/cc]', '')
		if (url.indexOf('[/bcc]') !== -1) url = url.replace('[/bcc]', '')
		if (url.indexOf('[/folder]') !== -1) url = url.replace('[/folder]', '')
		if (url.indexOf('[/date_before]') !== -1) url = url.replace('[/date_before]', '')
		if (url.indexOf('[/date_after]') !== -1) url = url.replace('[/date_after]', '')
		if (url.indexOf('[/indexed_before]') !== -1) url = url.replace('[/indexed_before]', '')
		if (url.indexOf('[/indexed_after]') !== -1) url = url.replace('[/indexed_after]', '')
		if (url.indexOf('[/include_body]') !== -1) url = url.replace('[/include_body]', '')
		if (url.indexOf('[/include_headers]') !== -1) url = url.replace('[/include_headers]', '')
		if (url.indexOf('[/include_flags]') !== -1) url = url.replace('[/include_flags]', '')
		if (url.indexOf('[/body_type]') !== -1) url = url.replace('[/body_type]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountMessage': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'copyMoveAccountMessage': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (args['dst_folder'] == null) throw new Error('dst_folder is a required parameter')
		var rgx = new RegExp('\{dst_folder\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dst_folder'])
			if (args['dst_folder']) delete args['dst_folder']
		}
		if (url.indexOf('[/dst_folder]') !== -1) {
			url = url.replace('[/dst_folder]', '/' + args['dst_folder'])
			if (args['dst_folder']) delete args['dst_folder']
		}
		var rgx = new RegExp('\{dst_source\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dst_source'])
			if (args['dst_source']) delete args['dst_source']
		}
		if (url.indexOf('[/dst_source]') !== -1) {
			url = url.replace('[/dst_source]', '/' + args['dst_source'])
			if (args['dst_source']) delete args['dst_source']
		}
		var rgx = new RegExp('\{move\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['move'])
			if (args['move']) delete args['move']
		}
		if (url.indexOf('[/move]') !== -1) {
			url = url.replace('[/move]', '/' + args['move'])
			if (args['move']) delete args['move']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		if (url.indexOf('[/dst_folder]') !== -1) url = url.replace('[/dst_folder]', '')
		if (url.indexOf('[/dst_source]') !== -1) url = url.replace('[/dst_source]', '')
		if (url.indexOf('[/move]') !== -1) url = url.replace('[/move]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getAccountMessageBody': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}/body'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountMessageSource': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}/source'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountMessageFlags': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}/flags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'setAccountMessageFlags': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}/flags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		var rgx = new RegExp('\{seen\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['seen'])
			if (args['seen']) delete args['seen']
		}
		if (url.indexOf('[/seen]') !== -1) {
			url = url.replace('[/seen]', '/' + args['seen'])
			if (args['seen']) delete args['seen']
		}
		var rgx = new RegExp('\{answered\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answered'])
			if (args['answered']) delete args['answered']
		}
		if (url.indexOf('[/answered]') !== -1) {
			url = url.replace('[/answered]', '/' + args['answered'])
			if (args['answered']) delete args['answered']
		}
		var rgx = new RegExp('\{flagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['flagged'])
			if (args['flagged']) delete args['flagged']
		}
		if (url.indexOf('[/flagged]') !== -1) {
			url = url.replace('[/flagged]', '/' + args['flagged'])
			if (args['flagged']) delete args['flagged']
		}
		var rgx = new RegExp('\{deleted\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['deleted'])
			if (args['deleted']) delete args['deleted']
		}
		if (url.indexOf('[/deleted]') !== -1) {
			url = url.replace('[/deleted]', '/' + args['deleted'])
			if (args['deleted']) delete args['deleted']
		}
		var rgx = new RegExp('\{draft\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['draft'])
			if (args['draft']) delete args['draft']
		}
		if (url.indexOf('[/draft]') !== -1) {
			url = url.replace('[/draft]', '/' + args['draft'])
			if (args['draft']) delete args['draft']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		if (url.indexOf('[/seen]') !== -1) url = url.replace('[/seen]', '')
		if (url.indexOf('[/answered]') !== -1) url = url.replace('[/answered]', '')
		if (url.indexOf('[/flagged]') !== -1) url = url.replace('[/flagged]', '')
		if (url.indexOf('[/deleted]') !== -1) url = url.replace('[/deleted]', '')
		if (url.indexOf('[/draft]') !== -1) url = url.replace('[/draft]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'listAccountMessageHeaders': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}/headers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountMessageThread': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/messages/{message_id}/thread'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['message_id'] == null) throw new Error('message_id is a required parameter')
		var rgx = new RegExp('\{message_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/message_id]') !== -1) {
			url = url.replace('[/message_id]', '/' + args['message_id'])
			if (args['message_id']) delete args['message_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/message_id]') !== -1) url = url.replace('[/message_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountSources': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{status_ok\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status_ok'])
			if (args['status_ok']) delete args['status_ok']
		}
		if (url.indexOf('[/status_ok]') !== -1) {
			url = url.replace('[/status_ok]', '/' + args['status_ok'])
			if (args['status_ok']) delete args['status_ok']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/status_ok]') !== -1) url = url.replace('[/status_ok]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'addAccountSource': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (args['server'] == null) throw new Error('server is a required parameter')
		var rgx = new RegExp('\{server\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['server'])
			if (args['server']) delete args['server']
		}
		if (url.indexOf('[/server]') !== -1) {
			url = url.replace('[/server]', '/' + args['server'])
			if (args['server']) delete args['server']
		}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['use_ssl'] == null) throw new Error('use_ssl is a required parameter')
		var rgx = new RegExp('\{use_ssl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['use_ssl'])
			if (args['use_ssl']) delete args['use_ssl']
		}
		if (url.indexOf('[/use_ssl]') !== -1) {
			url = url.replace('[/use_ssl]', '/' + args['use_ssl'])
			if (args['use_ssl']) delete args['use_ssl']
		}
		if (args['port'] == null) throw new Error('port is a required parameter')
		var rgx = new RegExp('\{port\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['port'])
			if (args['port']) delete args['port']
		}
		if (url.indexOf('[/port]') !== -1) {
			url = url.replace('[/port]', '/' + args['port'])
			if (args['port']) delete args['port']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{service_level\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		if (url.indexOf('[/service_level]') !== -1) {
			url = url.replace('[/service_level]', '/' + args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		var rgx = new RegExp('\{sync_period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sync_period'])
			if (args['sync_period']) delete args['sync_period']
		}
		if (url.indexOf('[/sync_period]') !== -1) {
			url = url.replace('[/sync_period]', '/' + args['sync_period'])
			if (args['sync_period']) delete args['sync_period']
		}
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{provider_token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_token'])
			if (args['provider_token']) delete args['provider_token']
		}
		if (url.indexOf('[/provider_token]') !== -1) {
			url = url.replace('[/provider_token]', '/' + args['provider_token'])
			if (args['provider_token']) delete args['provider_token']
		}
		var rgx = new RegExp('\{provider_token_secret\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_token_secret'])
			if (args['provider_token_secret']) delete args['provider_token_secret']
		}
		if (url.indexOf('[/provider_token_secret]') !== -1) {
			url = url.replace('[/provider_token_secret]', '/' + args['provider_token_secret'])
			if (args['provider_token_secret']) delete args['provider_token_secret']
		}
		var rgx = new RegExp('\{provider_consumer_key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_consumer_key'])
			if (args['provider_consumer_key']) delete args['provider_consumer_key']
		}
		if (url.indexOf('[/provider_consumer_key]') !== -1) {
			url = url.replace('[/provider_consumer_key]', '/' + args['provider_consumer_key'])
			if (args['provider_consumer_key']) delete args['provider_consumer_key']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/server]') !== -1) url = url.replace('[/server]', '')
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/use_ssl]') !== -1) url = url.replace('[/use_ssl]', '')
		if (url.indexOf('[/port]') !== -1) url = url.replace('[/port]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/service_level]') !== -1) url = url.replace('[/service_level]', '')
		if (url.indexOf('[/sync_period]') !== -1) url = url.replace('[/sync_period]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/provider_token]') !== -1) url = url.replace('[/provider_token]', '')
		if (url.indexOf('[/provider_token_secret]') !== -1) url = url.replace('[/provider_token_secret]', '')
		if (url.indexOf('[/provider_consumer_key]') !== -1) url = url.replace('[/provider_consumer_key]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getAccountSource': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'removeAccountSource': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'modifyAccountSource': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{service_level\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		if (url.indexOf('[/service_level]') !== -1) {
			url = url.replace('[/service_level]', '/' + args['service_level'])
			if (args['service_level']) delete args['service_level']
		}
		var rgx = new RegExp('\{sync_period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sync_period'])
			if (args['sync_period']) delete args['sync_period']
		}
		if (url.indexOf('[/sync_period]') !== -1) {
			url = url.replace('[/sync_period]', '/' + args['sync_period'])
			if (args['sync_period']) delete args['sync_period']
		}
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{provider_token\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_token'])
			if (args['provider_token']) delete args['provider_token']
		}
		if (url.indexOf('[/provider_token]') !== -1) {
			url = url.replace('[/provider_token]', '/' + args['provider_token'])
			if (args['provider_token']) delete args['provider_token']
		}
		var rgx = new RegExp('\{provider_token_secret\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_token_secret'])
			if (args['provider_token_secret']) delete args['provider_token_secret']
		}
		if (url.indexOf('[/provider_token_secret]') !== -1) {
			url = url.replace('[/provider_token_secret]', '/' + args['provider_token_secret'])
			if (args['provider_token_secret']) delete args['provider_token_secret']
		}
		var rgx = new RegExp('\{provider_consumer_key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['provider_consumer_key'])
			if (args['provider_consumer_key']) delete args['provider_consumer_key']
		}
		if (url.indexOf('[/provider_consumer_key]') !== -1) {
			url = url.replace('[/provider_consumer_key]', '/' + args['provider_consumer_key'])
			if (args['provider_consumer_key']) delete args['provider_consumer_key']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/service_level]') !== -1) url = url.replace('[/service_level]', '')
		if (url.indexOf('[/sync_period]') !== -1) url = url.replace('[/sync_period]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/provider_token]') !== -1) url = url.replace('[/provider_token]', '')
		if (url.indexOf('[/provider_token_secret]') !== -1) url = url.replace('[/provider_token_secret]', '')
		if (url.indexOf('[/provider_consumer_key]') !== -1) url = url.replace('[/provider_consumer_key]', '')
		return http({provider:'contextio',url:url,method:'PUT',params:args}, opts)
	},
	'listAccountSourceFolders': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}/folders'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'createAccountSourceFolder': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}/folders/{folder}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		if (args['folder'] == null) throw new Error('folder is a required parameter')
		var rgx = new RegExp('\{folder\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['folder'])
			if (args['folder']) delete args['folder']
		}
		if (url.indexOf('[/folder]') !== -1) {
			url = url.replace('[/folder]', '/' + args['folder'])
			if (args['folder']) delete args['folder']
		}
		var rgx = new RegExp('\{delim\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['delim'])
			if (args['delim']) delete args['delim']
		}
		if (url.indexOf('[/delim]') !== -1) {
			url = url.replace('[/delim]', '/' + args['delim'])
			if (args['delim']) delete args['delim']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		if (url.indexOf('[/folder]') !== -1) url = url.replace('[/folder]', '')
		if (url.indexOf('[/delim]') !== -1) url = url.replace('[/delim]', '')
		return http({provider:'contextio',url:url,method:'PUT',params:args}, opts)
	},
	'getAccountSourceSyncStatus': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}/sync'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'syncAccountSource': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sources/{label}/sync'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['label'] == null) throw new Error('label is a required parameter')
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getAllAccountSourcesSyncStatus': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sync'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'syncAllAccountSources': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/sync'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'listAccountThreads': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/threads'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{subject\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (url.indexOf('[/subject]') !== -1) {
			url = url.replace('[/subject]', '/' + args['subject'])
			if (args['subject']) delete args['subject']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['to'])
			if (args['to']) delete args['to']
		}
		if (url.indexOf('[/to]') !== -1) {
			url = url.replace('[/to]', '/' + args['to'])
			if (args['to']) delete args['to']
		}
		var rgx = new RegExp('\{from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['from'])
			if (args['from']) delete args['from']
		}
		if (url.indexOf('[/from]') !== -1) {
			url = url.replace('[/from]', '/' + args['from'])
			if (args['from']) delete args['from']
		}
		var rgx = new RegExp('\{cc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['cc'])
			if (args['cc']) delete args['cc']
		}
		if (url.indexOf('[/cc]') !== -1) {
			url = url.replace('[/cc]', '/' + args['cc'])
			if (args['cc']) delete args['cc']
		}
		var rgx = new RegExp('\{bcc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['bcc'])
			if (args['bcc']) delete args['bcc']
		}
		if (url.indexOf('[/bcc]') !== -1) {
			url = url.replace('[/bcc]', '/' + args['bcc'])
			if (args['bcc']) delete args['bcc']
		}
		var rgx = new RegExp('\{folder\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['folder'])
			if (args['folder']) delete args['folder']
		}
		if (url.indexOf('[/folder]') !== -1) {
			url = url.replace('[/folder]', '/' + args['folder'])
			if (args['folder']) delete args['folder']
		}
		var rgx = new RegExp('\{indexed_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['indexed_before'])
			if (args['indexed_before']) delete args['indexed_before']
		}
		if (url.indexOf('[/indexed_before]') !== -1) {
			url = url.replace('[/indexed_before]', '/' + args['indexed_before'])
			if (args['indexed_before']) delete args['indexed_before']
		}
		var rgx = new RegExp('\{indexed_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['indexed_after'])
			if (args['indexed_after']) delete args['indexed_after']
		}
		if (url.indexOf('[/indexed_after]') !== -1) {
			url = url.replace('[/indexed_after]', '/' + args['indexed_after'])
			if (args['indexed_after']) delete args['indexed_after']
		}
		var rgx = new RegExp('\{active_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active_before'])
			if (args['active_before']) delete args['active_before']
		}
		if (url.indexOf('[/active_before]') !== -1) {
			url = url.replace('[/active_before]', '/' + args['active_before'])
			if (args['active_before']) delete args['active_before']
		}
		var rgx = new RegExp('\{active_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active_after'])
			if (args['active_after']) delete args['active_after']
		}
		if (url.indexOf('[/active_after]') !== -1) {
			url = url.replace('[/active_after]', '/' + args['active_after'])
			if (args['active_after']) delete args['active_after']
		}
		var rgx = new RegExp('\{started_before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['started_before'])
			if (args['started_before']) delete args['started_before']
		}
		if (url.indexOf('[/started_before]') !== -1) {
			url = url.replace('[/started_before]', '/' + args['started_before'])
			if (args['started_before']) delete args['started_before']
		}
		var rgx = new RegExp('\{started_after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['started_after'])
			if (args['started_after']) delete args['started_after']
		}
		if (url.indexOf('[/started_after]') !== -1) {
			url = url.replace('[/started_after]', '/' + args['started_after'])
			if (args['started_after']) delete args['started_after']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/subject]') !== -1) url = url.replace('[/subject]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/to]') !== -1) url = url.replace('[/to]', '')
		if (url.indexOf('[/from]') !== -1) url = url.replace('[/from]', '')
		if (url.indexOf('[/cc]') !== -1) url = url.replace('[/cc]', '')
		if (url.indexOf('[/bcc]') !== -1) url = url.replace('[/bcc]', '')
		if (url.indexOf('[/folder]') !== -1) url = url.replace('[/folder]', '')
		if (url.indexOf('[/indexed_before]') !== -1) url = url.replace('[/indexed_before]', '')
		if (url.indexOf('[/indexed_after]') !== -1) url = url.replace('[/indexed_after]', '')
		if (url.indexOf('[/active_before]') !== -1) url = url.replace('[/active_before]', '')
		if (url.indexOf('[/active_after]') !== -1) url = url.replace('[/active_after]', '')
		if (url.indexOf('[/started_before]') !== -1) url = url.replace('[/started_before]', '')
		if (url.indexOf('[/started_after]') !== -1) url = url.replace('[/started_after]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'getAccountThread': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/threads/{thread_id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['thread_id'] == null) throw new Error('thread_id is a required parameter')
		var rgx = new RegExp('\{thread_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thread_id'])
			if (args['thread_id']) delete args['thread_id']
		}
		if (url.indexOf('[/thread_id]') !== -1) {
			url = url.replace('[/thread_id]', '/' + args['thread_id'])
			if (args['thread_id']) delete args['thread_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/thread_id]') !== -1) url = url.replace('[/thread_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'listAccountWebhooks': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/webhooks'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'createAccountWebhook': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/webhooks'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['callback_url'] == null) throw new Error('callback_url is a required parameter')
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (args['failure_notif_url'] == null) throw new Error('failure_notif_url is a required parameter')
		var rgx = new RegExp('\{failure_notif_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['failure_notif_url'])
			if (args['failure_notif_url']) delete args['failure_notif_url']
		}
		if (url.indexOf('[/failure_notif_url]') !== -1) {
			url = url.replace('[/failure_notif_url]', '/' + args['failure_notif_url'])
			if (args['failure_notif_url']) delete args['failure_notif_url']
		}
		var rgx = new RegExp('\{filter_to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_to'])
			if (args['filter_to']) delete args['filter_to']
		}
		if (url.indexOf('[/filter_to]') !== -1) {
			url = url.replace('[/filter_to]', '/' + args['filter_to'])
			if (args['filter_to']) delete args['filter_to']
		}
		var rgx = new RegExp('\{filter_from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_from'])
			if (args['filter_from']) delete args['filter_from']
		}
		if (url.indexOf('[/filter_from]') !== -1) {
			url = url.replace('[/filter_from]', '/' + args['filter_from'])
			if (args['filter_from']) delete args['filter_from']
		}
		var rgx = new RegExp('\{filter_cc\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_cc'])
			if (args['filter_cc']) delete args['filter_cc']
		}
		if (url.indexOf('[/filter_cc]') !== -1) {
			url = url.replace('[/filter_cc]', '/' + args['filter_cc'])
			if (args['filter_cc']) delete args['filter_cc']
		}
		var rgx = new RegExp('\{filter_subject\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_subject'])
			if (args['filter_subject']) delete args['filter_subject']
		}
		if (url.indexOf('[/filter_subject]') !== -1) {
			url = url.replace('[/filter_subject]', '/' + args['filter_subject'])
			if (args['filter_subject']) delete args['filter_subject']
		}
		var rgx = new RegExp('\{filter_thread\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_thread'])
			if (args['filter_thread']) delete args['filter_thread']
		}
		if (url.indexOf('[/filter_thread]') !== -1) {
			url = url.replace('[/filter_thread]', '/' + args['filter_thread'])
			if (args['filter_thread']) delete args['filter_thread']
		}
		var rgx = new RegExp('\{filter_new_important\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_new_important'])
			if (args['filter_new_important']) delete args['filter_new_important']
		}
		if (url.indexOf('[/filter_new_important]') !== -1) {
			url = url.replace('[/filter_new_important]', '/' + args['filter_new_important'])
			if (args['filter_new_important']) delete args['filter_new_important']
		}
		var rgx = new RegExp('\{filter_file_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_file_name'])
			if (args['filter_file_name']) delete args['filter_file_name']
		}
		if (url.indexOf('[/filter_file_name]') !== -1) {
			url = url.replace('[/filter_file_name]', '/' + args['filter_file_name'])
			if (args['filter_file_name']) delete args['filter_file_name']
		}
		var rgx = new RegExp('\{filter_file_revisions\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_file_revisions'])
			if (args['filter_file_revisions']) delete args['filter_file_revisions']
		}
		if (url.indexOf('[/filter_file_revisions]') !== -1) {
			url = url.replace('[/filter_file_revisions]', '/' + args['filter_file_revisions'])
			if (args['filter_file_revisions']) delete args['filter_file_revisions']
		}
		var rgx = new RegExp('\{filter_folder_added\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_folder_added'])
			if (args['filter_folder_added']) delete args['filter_folder_added']
		}
		if (url.indexOf('[/filter_folder_added]') !== -1) {
			url = url.replace('[/filter_folder_added]', '/' + args['filter_folder_added'])
			if (args['filter_folder_added']) delete args['filter_folder_added']
		}
		var rgx = new RegExp('\{filter_folder_removed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter_folder_removed'])
			if (args['filter_folder_removed']) delete args['filter_folder_removed']
		}
		if (url.indexOf('[/filter_folder_removed]') !== -1) {
			url = url.replace('[/filter_folder_removed]', '/' + args['filter_folder_removed'])
			if (args['filter_folder_removed']) delete args['filter_folder_removed']
		}
		var rgx = new RegExp('\{sync_period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sync_period'])
			if (args['sync_period']) delete args['sync_period']
		}
		if (url.indexOf('[/sync_period]') !== -1) {
			url = url.replace('[/sync_period]', '/' + args['sync_period'])
			if (args['sync_period']) delete args['sync_period']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		if (url.indexOf('[/failure_notif_url]') !== -1) url = url.replace('[/failure_notif_url]', '')
		if (url.indexOf('[/filter_to]') !== -1) url = url.replace('[/filter_to]', '')
		if (url.indexOf('[/filter_from]') !== -1) url = url.replace('[/filter_from]', '')
		if (url.indexOf('[/filter_cc]') !== -1) url = url.replace('[/filter_cc]', '')
		if (url.indexOf('[/filter_subject]') !== -1) url = url.replace('[/filter_subject]', '')
		if (url.indexOf('[/filter_thread]') !== -1) url = url.replace('[/filter_thread]', '')
		if (url.indexOf('[/filter_new_important]') !== -1) url = url.replace('[/filter_new_important]', '')
		if (url.indexOf('[/filter_file_name]') !== -1) url = url.replace('[/filter_file_name]', '')
		if (url.indexOf('[/filter_file_revisions]') !== -1) url = url.replace('[/filter_file_revisions]', '')
		if (url.indexOf('[/filter_folder_added]') !== -1) url = url.replace('[/filter_folder_added]', '')
		if (url.indexOf('[/filter_folder_removed]') !== -1) url = url.replace('[/filter_folder_removed]', '')
		if (url.indexOf('[/sync_period]') !== -1) url = url.replace('[/sync_period]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	},
	'getAccountWebhook': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/webhooks/{webhook_id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['webhook_id'] == null) throw new Error('webhook_id is a required parameter')
		var rgx = new RegExp('\{webhook_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['webhook_id'])
			if (args['webhook_id']) delete args['webhook_id']
		}
		if (url.indexOf('[/webhook_id]') !== -1) {
			url = url.replace('[/webhook_id]', '/' + args['webhook_id'])
			if (args['webhook_id']) delete args['webhook_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/webhook_id]') !== -1) url = url.replace('[/webhook_id]', '')
		return http({provider:'contextio',url:url,method:'GET',params:args}, opts)
	},
	'cancelAccountWebhook': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/webhooks/{webhook_id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['webhook_id'] == null) throw new Error('webhook_id is a required parameter')
		var rgx = new RegExp('\{webhook_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['webhook_id'])
			if (args['webhook_id']) delete args['webhook_id']
		}
		if (url.indexOf('[/webhook_id]') !== -1) {
			url = url.replace('[/webhook_id]', '/' + args['webhook_id'])
			if (args['webhook_id']) delete args['webhook_id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/webhook_id]') !== -1) url = url.replace('[/webhook_id]', '')
		return http({provider:'contextio',url:url,method:'DELETE',params:args}, opts)
	},
	'modifyAccountWebhook': function(args, opts) {
		var url = 'https://api.context.io/2.0/accounts/{id}/webhooks/{webhook_id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['webhook_id'] == null) throw new Error('webhook_id is a required parameter')
		var rgx = new RegExp('\{webhook_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['webhook_id'])
			if (args['webhook_id']) delete args['webhook_id']
		}
		if (url.indexOf('[/webhook_id]') !== -1) {
			url = url.replace('[/webhook_id]', '/' + args['webhook_id'])
			if (args['webhook_id']) delete args['webhook_id']
		}
		if (args['active'] == null) throw new Error('active is a required parameter')
		var rgx = new RegExp('\{active\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['active'])
			if (args['active']) delete args['active']
		}
		if (url.indexOf('[/active]') !== -1) {
			url = url.replace('[/active]', '/' + args['active'])
			if (args['active']) delete args['active']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/webhook_id]') !== -1) url = url.replace('[/webhook_id]', '')
		if (url.indexOf('[/active]') !== -1) url = url.replace('[/active]', '')
		return http({provider:'contextio',url:url,method:'POST',params:args}, opts)
	}
})