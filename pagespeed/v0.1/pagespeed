/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'pagespeed'})},
	'run': function(args, opts) {
		var url = 'https://www.googleapis.com/pagespeedonline/v1/runPagespeed'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{locale\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['locale'])
			if (args['locale']) delete args['locale']
		}
		if (url.indexOf('[/locale]') !== -1) {
			url = url.replace('[/locale]', '/' + args['locale'])
			if (args['locale']) delete args['locale']
		}
		var rgx = new RegExp('\{rule\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rule'])
			if (args['rule']) delete args['rule']
		}
		if (url.indexOf('[/rule]') !== -1) {
			url = url.replace('[/rule]', '/' + args['rule'])
			if (args['rule']) delete args['rule']
		}
		var rgx = new RegExp('\{strategy\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strategy'])
			if (args['strategy']) delete args['strategy']
		}
		if (url.indexOf('[/strategy]') !== -1) {
			url = url.replace('[/strategy]', '/' + args['strategy'])
			if (args['strategy']) delete args['strategy']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{prettyPrint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyPrint'])
			if (args['prettyPrint']) delete args['prettyPrint']
		}
		if (url.indexOf('[/prettyPrint]') !== -1) {
			url = url.replace('[/prettyPrint]', '/' + args['prettyPrint'])
			if (args['prettyPrint']) delete args['prettyPrint']
		}
		var rgx = new RegExp('\{userIp\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userIp'])
			if (args['userIp']) delete args['userIp']
		}
		if (url.indexOf('[/userIp]') !== -1) {
			url = url.replace('[/userIp]', '/' + args['userIp'])
			if (args['userIp']) delete args['userIp']
		}
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/locale]') !== -1) url = url.replace('[/locale]', '')
		if (url.indexOf('[/rule]') !== -1) url = url.replace('[/rule]', '')
		if (url.indexOf('[/strategy]') !== -1) url = url.replace('[/strategy]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/prettyPrint]') !== -1) url = url.replace('[/prettyPrint]', '')
		if (url.indexOf('[/userIp]') !== -1) url = url.replace('[/userIp]', '')
		return http({provider:'pagespeed',url:url,method:'GET',params:args}, opts)
	}
})