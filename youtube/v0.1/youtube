/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'youtube'})},
	'searchVideos': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/videos'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{3d\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['3d'])
			if (args['3d']) delete args['3d']
		}
		if (url.indexOf('[/3d]') !== -1) {
			url = url.replace('[/3d]', '/' + args['3d'])
			if (args['3d']) delete args['3d']
		}
		var rgx = new RegExp('\{caption\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['caption'])
			if (args['caption']) delete args['caption']
		}
		if (url.indexOf('[/caption]') !== -1) {
			url = url.replace('[/caption]', '/' + args['caption'])
			if (args['caption']) delete args['caption']
		}
		var rgx = new RegExp('\{category\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['category'])
			if (args['category']) delete args['category']
		}
		if (url.indexOf('[/category]') !== -1) {
			url = url.replace('[/category]', '/' + args['category'])
			if (args['category']) delete args['category']
		}
		var rgx = new RegExp('\{course\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['course'])
			if (args['course']) delete args['course']
		}
		if (url.indexOf('[/course]') !== -1) {
			url = url.replace('[/course]', '/' + args['course'])
			if (args['course']) delete args['course']
		}
		var rgx = new RegExp('\{duration\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['duration'])
			if (args['duration']) delete args['duration']
		}
		if (url.indexOf('[/duration]') !== -1) {
			url = url.replace('[/duration]', '/' + args['duration'])
			if (args['duration']) delete args['duration']
		}
		var rgx = new RegExp('\{ends-after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ends-after'])
			if (args['ends-after']) delete args['ends-after']
		}
		if (url.indexOf('[/ends-after]') !== -1) {
			url = url.replace('[/ends-after]', '/' + args['ends-after'])
			if (args['ends-after']) delete args['ends-after']
		}
		var rgx = new RegExp('\{ends-before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ends-before'])
			if (args['ends-before']) delete args['ends-before']
		}
		if (url.indexOf('[/ends-before]') !== -1) {
			url = url.replace('[/ends-before]', '/' + args['ends-before'])
			if (args['ends-before']) delete args['ends-before']
		}
		var rgx = new RegExp('\{fmt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fmt'])
			if (args['fmt']) delete args['fmt']
		}
		if (url.indexOf('[/fmt]') !== -1) {
			url = url.replace('[/fmt]', '/' + args['fmt'])
			if (args['fmt']) delete args['fmt']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{genre\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['genre'])
			if (args['genre']) delete args['genre']
		}
		if (url.indexOf('[/genre]') !== -1) {
			url = url.replace('[/genre]', '/' + args['genre'])
			if (args['genre']) delete args['genre']
		}
		var rgx = new RegExp('\{hd\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hd'])
			if (args['hd']) delete args['hd']
		}
		if (url.indexOf('[/hd]') !== -1) {
			url = url.replace('[/hd]', '/' + args['hd'])
			if (args['hd']) delete args['hd']
		}
		var rgx = new RegExp('\{hint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hint'])
			if (args['hint']) delete args['hint']
		}
		if (url.indexOf('[/hint]') !== -1) {
			url = url.replace('[/hint]', '/' + args['hint'])
			if (args['hint']) delete args['hint']
		}
		var rgx = new RegExp('\{hl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hl'])
			if (args['hl']) delete args['hl']
		}
		if (url.indexOf('[/hl]') !== -1) {
			url = url.replace('[/hl]', '/' + args['hl'])
			if (args['hl']) delete args['hl']
		}
		var rgx = new RegExp('\{inline\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inline'])
			if (args['inline']) delete args['inline']
		}
		if (url.indexOf('[/inline]') !== -1) {
			url = url.replace('[/inline]', '/' + args['inline'])
			if (args['inline']) delete args['inline']
		}
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/lang]') !== -1) {
			url = url.replace('[/lang]', '/' + args['lang'])
			if (args['lang']) delete args['lang']
		}
		var rgx = new RegExp('\{license\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['license'])
			if (args['license']) delete args['license']
		}
		if (url.indexOf('[/license]') !== -1) {
			url = url.replace('[/license]', '/' + args['license'])
			if (args['license']) delete args['license']
		}
		var rgx = new RegExp('\{location\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['location'])
			if (args['location']) delete args['location']
		}
		if (url.indexOf('[/location]') !== -1) {
			url = url.replace('[/location]', '/' + args['location'])
			if (args['location']) delete args['location']
		}
		var rgx = new RegExp('\{location-radius\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['location-radius'])
			if (args['location-radius']) delete args['location-radius']
		}
		if (url.indexOf('[/location-radius]') !== -1) {
			url = url.replace('[/location-radius]', '/' + args['location-radius'])
			if (args['location-radius']) delete args['location-radius']
		}
		var rgx = new RegExp('\{lr\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lr'])
			if (args['lr']) delete args['lr']
		}
		if (url.indexOf('[/lr]') !== -1) {
			url = url.replace('[/lr]', '/' + args['lr'])
			if (args['lr']) delete args['lr']
		}
		var rgx = new RegExp('\{movie-genre\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['movie-genre'])
			if (args['movie-genre']) delete args['movie-genre']
		}
		if (url.indexOf('[/movie-genre]') !== -1) {
			url = url.replace('[/movie-genre]', '/' + args['movie-genre'])
			if (args['movie-genre']) delete args['movie-genre']
		}
		var rgx = new RegExp('\{orderby\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['orderby'])
			if (args['orderby']) delete args['orderby']
		}
		if (url.indexOf('[/orderby]') !== -1) {
			url = url.replace('[/orderby]', '/' + args['orderby'])
			if (args['orderby']) delete args['orderby']
		}
		var rgx = new RegExp('\{paid-content\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['paid-content'])
			if (args['paid-content']) delete args['paid-content']
		}
		if (url.indexOf('[/paid-content]') !== -1) {
			url = url.replace('[/paid-content]', '/' + args['paid-content'])
			if (args['paid-content']) delete args['paid-content']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		var rgx = new RegExp('\{restriction\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['restriction'])
			if (args['restriction']) delete args['restriction']
		}
		if (url.indexOf('[/restriction]') !== -1) {
			url = url.replace('[/restriction]', '/' + args['restriction'])
			if (args['restriction']) delete args['restriction']
		}
		var rgx = new RegExp('\{safeSearch\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['safeSearch'])
			if (args['safeSearch']) delete args['safeSearch']
		}
		if (url.indexOf('[/safeSearch]') !== -1) {
			url = url.replace('[/safeSearch]', '/' + args['safeSearch'])
			if (args['safeSearch']) delete args['safeSearch']
		}
		var rgx = new RegExp('\{starts-after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['starts-after'])
			if (args['starts-after']) delete args['starts-after']
		}
		if (url.indexOf('[/starts-after]') !== -1) {
			url = url.replace('[/starts-after]', '/' + args['starts-after'])
			if (args['starts-after']) delete args['starts-after']
		}
		var rgx = new RegExp('\{starts-before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['starts-before'])
			if (args['starts-before']) delete args['starts-before']
		}
		if (url.indexOf('[/starts-before]') !== -1) {
			url = url.replace('[/starts-before]', '/' + args['starts-before'])
			if (args['starts-before']) delete args['starts-before']
		}
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{time\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['time'])
			if (args['time']) delete args['time']
		}
		if (url.indexOf('[/time]') !== -1) {
			url = url.replace('[/time]', '/' + args['time'])
			if (args['time']) delete args['time']
		}
		var rgx = new RegExp('\{uploader\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['uploader'])
			if (args['uploader']) delete args['uploader']
		}
		if (url.indexOf('[/uploader]') !== -1) {
			url = url.replace('[/uploader]', '/' + args['uploader'])
			if (args['uploader']) delete args['uploader']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/3d]') !== -1) url = url.replace('[/3d]', '')
		if (url.indexOf('[/caption]') !== -1) url = url.replace('[/caption]', '')
		if (url.indexOf('[/category]') !== -1) url = url.replace('[/category]', '')
		if (url.indexOf('[/course]') !== -1) url = url.replace('[/course]', '')
		if (url.indexOf('[/duration]') !== -1) url = url.replace('[/duration]', '')
		if (url.indexOf('[/ends-after]') !== -1) url = url.replace('[/ends-after]', '')
		if (url.indexOf('[/ends-before]') !== -1) url = url.replace('[/ends-before]', '')
		if (url.indexOf('[/fmt]') !== -1) url = url.replace('[/fmt]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/genre]') !== -1) url = url.replace('[/genre]', '')
		if (url.indexOf('[/hd]') !== -1) url = url.replace('[/hd]', '')
		if (url.indexOf('[/hint]') !== -1) url = url.replace('[/hint]', '')
		if (url.indexOf('[/hl]') !== -1) url = url.replace('[/hl]', '')
		if (url.indexOf('[/inline]') !== -1) url = url.replace('[/inline]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/lang]') !== -1) url = url.replace('[/lang]', '')
		if (url.indexOf('[/license]') !== -1) url = url.replace('[/license]', '')
		if (url.indexOf('[/location]') !== -1) url = url.replace('[/location]', '')
		if (url.indexOf('[/location-radius]') !== -1) url = url.replace('[/location-radius]', '')
		if (url.indexOf('[/lr]') !== -1) url = url.replace('[/lr]', '')
		if (url.indexOf('[/movie-genre]') !== -1) url = url.replace('[/movie-genre]', '')
		if (url.indexOf('[/orderby]') !== -1) url = url.replace('[/orderby]', '')
		if (url.indexOf('[/paid-content]') !== -1) url = url.replace('[/paid-content]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		if (url.indexOf('[/restriction]') !== -1) url = url.replace('[/restriction]', '')
		if (url.indexOf('[/safeSearch]') !== -1) url = url.replace('[/safeSearch]', '')
		if (url.indexOf('[/starts-after]') !== -1) url = url.replace('[/starts-after]', '')
		if (url.indexOf('[/starts-before]') !== -1) url = url.replace('[/starts-before]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/time]') !== -1) url = url.replace('[/time]', '')
		if (url.indexOf('[/uploader]') !== -1) url = url.replace('[/uploader]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'videoResponse': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/videos/{videoID}/responses'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['videoID'] == null) args['videoID'] = "api"
		var rgx = new RegExp('\{videoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (url.indexOf('[/videoID]') !== -1) {
			url = url.replace('[/videoID]', '/' + args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/videoID]') !== -1) url = url.replace('[/videoID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'deleteVideoResponse': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/videos/{videoID}/responses/{videoResponseID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['videoID'] == null) throw new Error('videoID is a required parameter')
		var rgx = new RegExp('\{videoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (url.indexOf('[/videoID]') !== -1) {
			url = url.replace('[/videoID]', '/' + args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (args['videoResponseID'] == null) throw new Error('videoResponseID is a required parameter')
		var rgx = new RegExp('\{videoResponseID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['videoResponseID'])
			if (args['videoResponseID']) delete args['videoResponseID']
		}
		if (url.indexOf('[/videoResponseID]') !== -1) {
			url = url.replace('[/videoResponseID]', '/' + args['videoResponseID'])
			if (args['videoResponseID']) delete args['videoResponseID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/videoID]') !== -1) url = url.replace('[/videoID]', '')
		if (url.indexOf('[/videoResponseID]') !== -1) url = url.replace('[/videoResponseID]', '')
		return http({provider:'youtube',url:url,method:'DELETE',params:args}, opts)
	},
	'favoriteFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/favorites'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userDeleteFavorite': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/favorites/{favoriteVideoID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['favoriteVideoID'] == null) throw new Error('favoriteVideoID is a required parameter')
		var rgx = new RegExp('\{favoriteVideoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['favoriteVideoID'])
			if (args['favoriteVideoID']) delete args['favoriteVideoID']
		}
		if (url.indexOf('[/favoriteVideoID]') !== -1) {
			url = url.replace('[/favoriteVideoID]', '/' + args['favoriteVideoID'])
			if (args['favoriteVideoID']) delete args['favoriteVideoID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/favoriteVideoID]') !== -1) url = url.replace('[/favoriteVideoID]', '')
		return http({provider:'youtube',url:url,method:'DELETE',params:args}, opts)
	},
	'playlistFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/playlists/{playlistID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['playlistID'] == null) throw new Error('playlistID is a required parameter')
		var rgx = new RegExp('\{playlistID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlistID'])
			if (args['playlistID']) delete args['playlistID']
		}
		if (url.indexOf('[/playlistID]') !== -1) {
			url = url.replace('[/playlistID]', '/' + args['playlistID'])
			if (args['playlistID']) delete args['playlistID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/playlistID]') !== -1) url = url.replace('[/playlistID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userPlaylistFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/playlists'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'RemoveVideoFromPlaylist': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/playlists/{playlistID}/{playlistEntryID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['playlistID'] == null) throw new Error('playlistID is a required parameter')
		var rgx = new RegExp('\{playlistID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlistID'])
			if (args['playlistID']) delete args['playlistID']
		}
		if (url.indexOf('[/playlistID]') !== -1) {
			url = url.replace('[/playlistID]', '/' + args['playlistID'])
			if (args['playlistID']) delete args['playlistID']
		}
		if (args['playlistEntryID'] == null) throw new Error('playlistEntryID is a required parameter')
		var rgx = new RegExp('\{playlistEntryID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlistEntryID'])
			if (args['playlistEntryID']) delete args['playlistEntryID']
		}
		if (url.indexOf('[/playlistEntryID]') !== -1) {
			url = url.replace('[/playlistEntryID]', '/' + args['playlistEntryID'])
			if (args['playlistEntryID']) delete args['playlistEntryID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/playlistID]') !== -1) url = url.replace('[/playlistID]', '')
		if (url.indexOf('[/playlistEntryID]') !== -1) url = url.replace('[/playlistEntryID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'DELETE',params:args}, opts)
	},
	'deletePlaylist': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/playlists/{playlistID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['playlistID'] == null) throw new Error('playlistID is a required parameter')
		var rgx = new RegExp('\{playlistID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['playlistID'])
			if (args['playlistID']) delete args['playlistID']
		}
		if (url.indexOf('[/playlistID]') !== -1) {
			url = url.replace('[/playlistID]', '/' + args['playlistID'])
			if (args['playlistID']) delete args['playlistID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/playlistID]') !== -1) url = url.replace('[/playlistID]', '')
		return http({provider:'youtube',url:url,method:'DELETE',params:args}, opts)
	},
	'watchLaterPlaylistGet': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/watch_later'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'deleteWatchLaterVideo': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/watch_later/{videoID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['videoID'] == null) args['videoID'] = "default"
		var rgx = new RegExp('\{videoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (url.indexOf('[/videoID]') !== -1) {
			url = url.replace('[/videoID]', '/' + args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/videoID]') !== -1) url = url.replace('[/videoID]', '')
		return http({provider:'youtube',url:url,method:'DELETE',params:args}, opts)
	},
	'searchPlaylists': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/playlists/snippets'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userProfile': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'usersContactFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/contacts'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args}, opts)
	},
	'userUploadFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/uploads'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userRecommendations': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/recommendations'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args}, opts)
	},
	'userActivityFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/events'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'usersActivityFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/events'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['author'] == null) throw new Error('author is a required parameter')
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userInbox': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/inbox'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args}, opts)
	},
	'deleteMessage': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/inbox/{messageID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['messageID'] == null) throw new Error('messageID is a required parameter')
		var rgx = new RegExp('\{messageID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['messageID'])
			if (args['messageID']) delete args['messageID']
		}
		if (url.indexOf('[/messageID]') !== -1) {
			url = url.replace('[/messageID]', '/' + args['messageID'])
			if (args['messageID']) delete args['messageID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/messageID]') !== -1) url = url.replace('[/messageID]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args}, opts)
	},
	'subscriptionsFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/subscriptions'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'newSubscriptionVideo': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/newsubscriptionvideo'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) args['userID'] = "default"
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'deleteSubscription': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/subscriptions/{subscriptionID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['subscriptionID'] == null) throw new Error('subscriptionID is a required parameter')
		var rgx = new RegExp('\{subscriptionID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subscriptionID'])
			if (args['subscriptionID']) delete args['subscriptionID']
		}
		if (url.indexOf('[/subscriptionID]') !== -1) {
			url = url.replace('[/subscriptionID]', '/' + args['subscriptionID'])
			if (args['subscriptionID']) delete args['subscriptionID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/subscriptionID]') !== -1) url = url.replace('[/subscriptionID]', '')
		return http({provider:'youtube',url:url,method:'DELETE',params:args}, opts)
	},
	'subtivityFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/default/subtivity'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args}, opts)
	},
	'searchChannels': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/channels'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'featuredLiveEvents': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/charts/live/events/featured'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'currentLiveEvents': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/charts/live/events/live_now'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'upcomingLiveEvents': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/charts/live/events/upcoming'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{time\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['time'])
			if (args['time']) delete args['time']
		}
		if (url.indexOf('[/time]') !== -1) {
			url = url.replace('[/time]', '/' + args['time'])
			if (args['time']) delete args['time']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/time]') !== -1) url = url.replace('[/time]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'recentlyBroadcastedLiveEvents': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/charts/live/events/recently_broadcasted'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'recentlyEndedLiveEvents': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/users/{userID}/live/events'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['userID'] == null) throw new Error('userID is a required parameter')
		var rgx = new RegExp('\{userID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (url.indexOf('[/userID]') !== -1) {
			url = url.replace('[/userID]', '/' + args['userID'])
			if (args['userID']) delete args['userID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		var rgx = new RegExp('\{region\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/region]') !== -1) {
			url = url.replace('[/region]', '/' + args['region'])
			if (args['region']) delete args['region']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/userID]') !== -1) url = url.replace('[/userID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		if (url.indexOf('[/region]') !== -1) url = url.replace('[/region]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'videoCommentsFeeds': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/videos/{videoID}/comments'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['videoID'] == null) args['videoID'] = "default"
		var rgx = new RegExp('\{videoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (url.indexOf('[/videoID]') !== -1) {
			url = url.replace('[/videoID]', '/' + args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (args['alt'] == null) args['alt'] = "json"
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{author\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['author'])
			if (args['author']) delete args['author']
		}
		if (url.indexOf('[/author]') !== -1) {
			url = url.replace('[/author]', '/' + args['author'])
			if (args['author']) delete args['author']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{field\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['field'])
			if (args['field']) delete args['field']
		}
		if (url.indexOf('[/field]') !== -1) {
			url = url.replace('[/field]', '/' + args['field'])
			if (args['field']) delete args['field']
		}
		var rgx = new RegExp('\{fields-language\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		if (url.indexOf('[/fields-language]') !== -1) {
			url = url.replace('[/fields-language]', '/' + args['fields-language'])
			if (args['fields-language']) delete args['fields-language']
		}
		var rgx = new RegExp('\{max-results\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (url.indexOf('[/max-results]') !== -1) {
			url = url.replace('[/max-results]', '/' + args['max-results'])
			if (args['max-results']) delete args['max-results']
		}
		if (args['prettyprint'] == null) args['prettyprint'] = "true"
		var rgx = new RegExp('\{prettyprint\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		if (url.indexOf('[/prettyprint]') !== -1) {
			url = url.replace('[/prettyprint]', '/' + args['prettyprint'])
			if (args['prettyprint']) delete args['prettyprint']
		}
		var rgx = new RegExp('\{start-index\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		if (url.indexOf('[/start-index]') !== -1) {
			url = url.replace('[/start-index]', '/' + args['start-index'])
			if (args['start-index']) delete args['start-index']
		}
		var rgx = new RegExp('\{strict\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['strict'])
			if (args['strict']) delete args['strict']
		}
		if (url.indexOf('[/strict]') !== -1) {
			url = url.replace('[/strict]', '/' + args['strict'])
			if (args['strict']) delete args['strict']
		}
		var rgx = new RegExp('\{v\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/v]') !== -1) {
			url = url.replace('[/v]', '/' + args['v'])
			if (args['v']) delete args['v']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/videoID]') !== -1) url = url.replace('[/videoID]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/author]') !== -1) url = url.replace('[/author]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/field]') !== -1) url = url.replace('[/field]', '')
		if (url.indexOf('[/fields-language]') !== -1) url = url.replace('[/fields-language]', '')
		if (url.indexOf('[/max-results]') !== -1) url = url.replace('[/max-results]', '')
		if (url.indexOf('[/prettyprint]') !== -1) url = url.replace('[/prettyprint]', '')
		if (url.indexOf('[/start-index]') !== -1) url = url.replace('[/start-index]', '')
		if (url.indexOf('[/strict]') !== -1) url = url.replace('[/strict]', '')
		if (url.indexOf('[/v]') !== -1) url = url.replace('[/v]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'deleteVideoComments': function(args, opts) {
		var url = 'http://gdata.youtube.com//feeds/{projection}/videos/{videoID}/comments/{commentID}'
		args = args || {}
		if (args['projection'] == null) args['projection'] = "api"
		var rgx = new RegExp('\{projection\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (url.indexOf('[/projection]') !== -1) {
			url = url.replace('[/projection]', '/' + args['projection'])
			if (args['projection']) delete args['projection']
		}
		if (args['videoID'] == null) args['videoID'] = "default"
		var rgx = new RegExp('\{videoID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (url.indexOf('[/videoID]') !== -1) {
			url = url.replace('[/videoID]', '/' + args['videoID'])
			if (args['videoID']) delete args['videoID']
		}
		if (args['commentID'] == null) args['commentID'] = "default"
		var rgx = new RegExp('\{commentID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['commentID'])
			if (args['commentID']) delete args['commentID']
		}
		if (url.indexOf('[/commentID]') !== -1) {
			url = url.replace('[/commentID]', '/' + args['commentID'])
			if (args['commentID']) delete args['commentID']
		}
		if (url.indexOf('[/projection]') !== -1) url = url.replace('[/projection]', '')
		if (url.indexOf('[/videoID]') !== -1) url = url.replace('[/videoID]', '')
		if (url.indexOf('[/commentID]') !== -1) url = url.replace('[/commentID]', '')
		return http({provider:'youtube',url:url,method:'GET',params:args, auth:'none'}, opts)
	}
})