/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'bluevia'})},
	'SMS_SendSMS_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/outbound/requests'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'SMS_SendSMS_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/outbound/requests'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'SMS_CheckDeliveryStatus_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/outbound/requests/{SMSId}/deliverystatus'
		args = args || {}
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'SMS_CheckDeliveryStatus_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/outbound/requests/{SMSId}/deliverystatus'
		args = args || {}
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'SMS_SendSMS_MO': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/outbound/requests'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'SMS_GetReceivedSMS_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/inbound/{shortNumber}/messages'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'SMS_GetReceivedSMS_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/SMS/inbound/{shortNumber}/messages'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'MMS_SendMMS_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/outbound/requests'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'MMS_SendMMS_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/outbound/requests'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'MMS_CheckDeliveryStatus_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/outbound/requests/{messageId}/deliverystatus'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'MMS_CheckDeliveryStatus_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/outbound/requests/{messageId}/deliverystatus'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'MMS_SendMMS_MO': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/outbound/requests'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'MMS_GetReceivedMMS_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/inbound/{shortNumber}/messages'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'MMS_GetReceivedMMS_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/MMS/inbound/{shortNumber}/messages'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['Authorization'] == null) throw new Error('Authorization is a required parameter')
		var rgx = new RegExp('\{Authorization\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/Authorization]') !== -1) {
			url = url.replace('[/Authorization]', '/' + args['Authorization'])
			if (args['Authorization']) delete args['Authorization']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/Authorization]') !== -1) url = url.replace('[/Authorization]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserInfo_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{dataSets\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dataSets'])
			if (args['dataSets']) delete args['dataSets']
		}
		if (url.indexOf('[/dataSets]') !== -1) {
			url = url.replace('[/dataSets]', '/' + args['dataSets'])
			if (args['dataSets']) delete args['dataSets']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/dataSets]') !== -1) url = url.replace('[/dataSets]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserInfo_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{dataSets\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dataSets'])
			if (args['dataSets']) delete args['dataSets']
		}
		if (url.indexOf('[/dataSets]') !== -1) {
			url = url.replace('[/dataSets]', '/' + args['dataSets'])
			if (args['dataSets']) delete args['dataSets']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/dataSets]') !== -1) url = url.replace('[/dataSets]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserInfoFiltered': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{dataSets\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dataSets'])
			if (args['dataSets']) delete args['dataSets']
		}
		if (url.indexOf('[/dataSets]') !== -1) {
			url = url.replace('[/dataSets]', '/' + args['dataSets'])
			if (args['dataSets']) delete args['dataSets']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/dataSets]') !== -1) url = url.replace('[/dataSets]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserPersonalInfo_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$}/UserInfo/UserPersonalInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserPersonalInfo_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserPersonalInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserPersonalInfoFiltered': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserPersonalInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserProfile_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserProfile'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserProfile_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserProfile'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserProfileFiltered': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserProfile'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserAccess_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserAccessInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserAccess_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserAccessInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserAccessFiltered': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserAccessInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserTerminalInfo_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserTerminalInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserTerminalInfo_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserTerminalInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Directory_GetUserTerminalInfoFiltered': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Directory/alias:$oauth_token$/UserInfo/UserTerminalInfo'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		var rgx = new RegExp('\{fields\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/fields]') !== -1) {
			url = url.replace('[/fields]', '/' + args['fields'])
			if (args['fields']) delete args['fields']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/fields]') !== -1) url = url.replace('[/fields]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Ad_GetAd_Text': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Advertising/requests'
		args = args || {}
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'Ad_GetAd_Banner': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Advertising/requests'
		args = args || {}
		return http({provider:'bluevia',url:url,method:'POST',params:args}, opts)
	},
	'Location_GetLocation_XML': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Location/TerminalLocation'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['locatedParty'] == null) throw new Error('locatedParty is a required parameter')
		var rgx = new RegExp('\{locatedParty\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['locatedParty'])
			if (args['locatedParty']) delete args['locatedParty']
		}
		if (url.indexOf('[/locatedParty]') !== -1) {
			url = url.replace('[/locatedParty]', '/' + args['locatedParty'])
			if (args['locatedParty']) delete args['locatedParty']
		}
		var rgx = new RegExp('\{acceptableAccuracy \}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['acceptableAccuracy '])
			if (args['acceptableAccuracy ']) delete args['acceptableAccuracy ']
		}
		if (url.indexOf('[/acceptableAccuracy ]') !== -1) {
			url = url.replace('[/acceptableAccuracy ]', '/' + args['acceptableAccuracy '])
			if (args['acceptableAccuracy ']) delete args['acceptableAccuracy ']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/locatedParty]') !== -1) url = url.replace('[/locatedParty]', '')
		if (url.indexOf('[/acceptableAccuracy ]') !== -1) url = url.replace('[/acceptableAccuracy ]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Location_GetLocation_JSON': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Location/TerminalLocation'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['locatedParty'] == null) throw new Error('locatedParty is a required parameter')
		var rgx = new RegExp('\{locatedParty\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['locatedParty'])
			if (args['locatedParty']) delete args['locatedParty']
		}
		if (url.indexOf('[/locatedParty]') !== -1) {
			url = url.replace('[/locatedParty]', '/' + args['locatedParty'])
			if (args['locatedParty']) delete args['locatedParty']
		}
		var rgx = new RegExp('\{acceptableAccuracy \}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['acceptableAccuracy '])
			if (args['acceptableAccuracy ']) delete args['acceptableAccuracy ']
		}
		if (url.indexOf('[/acceptableAccuracy ]') !== -1) {
			url = url.replace('[/acceptableAccuracy ]', '/' + args['acceptableAccuracy '])
			if (args['acceptableAccuracy ']) delete args['acceptableAccuracy ']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/locatedParty]') !== -1) url = url.replace('[/locatedParty]', '')
		if (url.indexOf('[/acceptableAccuracy ]') !== -1) url = url.replace('[/acceptableAccuracy ]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	},
	'Location_GetLocation_Accuracy': function(args, opts) {
		var url = 'https://api.bluevia.com/services/REST/Location/TerminalLocation'
		args = args || {}
		if (args['version'] == null) args['version'] = "v1"
		var rgx = new RegExp('\{version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['version'])
			if (args['version']) delete args['version']
		}
		if (url.indexOf('[/version]') !== -1) {
			url = url.replace('[/version]', '/' + args['version'])
			if (args['version']) delete args['version']
		}
		var rgx = new RegExp('\{alt\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (url.indexOf('[/alt]') !== -1) {
			url = url.replace('[/alt]', '/' + args['alt'])
			if (args['alt']) delete args['alt']
		}
		if (args['locatedParty'] == null) throw new Error('locatedParty is a required parameter')
		var rgx = new RegExp('\{locatedParty\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['locatedParty'])
			if (args['locatedParty']) delete args['locatedParty']
		}
		if (url.indexOf('[/locatedParty]') !== -1) {
			url = url.replace('[/locatedParty]', '/' + args['locatedParty'])
			if (args['locatedParty']) delete args['locatedParty']
		}
		var rgx = new RegExp('\{acceptableAccuracy \}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['acceptableAccuracy '])
			if (args['acceptableAccuracy ']) delete args['acceptableAccuracy ']
		}
		if (url.indexOf('[/acceptableAccuracy ]') !== -1) {
			url = url.replace('[/acceptableAccuracy ]', '/' + args['acceptableAccuracy '])
			if (args['acceptableAccuracy ']) delete args['acceptableAccuracy ']
		}
		if (url.indexOf('[/version]') !== -1) url = url.replace('[/version]', '')
		if (url.indexOf('[/alt]') !== -1) url = url.replace('[/alt]', '')
		if (url.indexOf('[/locatedParty]') !== -1) url = url.replace('[/locatedParty]', '')
		if (url.indexOf('[/acceptableAccuracy ]') !== -1) url = url.replace('[/acceptableAccuracy ]', '')
		return http({provider:'bluevia',url:url,method:'GET',params:args}, opts)
	}
})