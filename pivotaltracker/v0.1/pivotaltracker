/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'pivotaltracker'})},
	'getTokensActive': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//tokens/active'
		args = args || {}
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'postTokensActive': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//tokens/active'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['password'] == null) throw new Error('password is a required parameter')
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'getActivities': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//activities'
		args = args || {}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{occurred_since_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['occurred_since_date'])
			if (args['occurred_since_date']) delete args['occurred_since_date']
		}
		if (url.indexOf('[/occurred_since_date]') !== -1) {
			url = url.replace('[/occurred_since_date]', '/' + args['occurred_since_date'])
			if (args['occurred_since_date']) delete args['occurred_since_date']
		}
		var rgx = new RegExp('\{newer_than_version\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['newer_than_version'])
			if (args['newer_than_version']) delete args['newer_than_version']
		}
		if (url.indexOf('[/newer_than_version]') !== -1) {
			url = url.replace('[/newer_than_version]', '/' + args['newer_than_version'])
			if (args['newer_than_version']) delete args['newer_than_version']
		}
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/occurred_since_date]') !== -1) url = url.replace('[/occurred_since_date]', '')
		if (url.indexOf('[/newer_than_version]') !== -1) url = url.replace('[/newer_than_version]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getProjectActivities': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/activities'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{occurred_since_date\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['occurred_since_date'])
			if (args['occurred_since_date']) delete args['occurred_since_date']
		}
		if (url.indexOf('[/occurred_since_date]') !== -1) {
			url = url.replace('[/occurred_since_date]', '/' + args['occurred_since_date'])
			if (args['occurred_since_date']) delete args['occurred_since_date']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/occurred_since_date]') !== -1) url = url.replace('[/occurred_since_date]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getSingleProject': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getAllProjects': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects'
		args = args || {}
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'postAddProject': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects'
		args = args || {}
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'getAllMemberships': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/memberships'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'postAddMembership': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/memberships'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'getMembershipInfo': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/memberships/{MEMBERSHIP_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['MEMBERSHIP_ID'] == null) throw new Error('MEMBERSHIP_ID is a required parameter')
		var rgx = new RegExp('\{MEMBERSHIP_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['MEMBERSHIP_ID'])
			if (args['MEMBERSHIP_ID']) delete args['MEMBERSHIP_ID']
		}
		if (url.indexOf('[/MEMBERSHIP_ID]') !== -1) {
			url = url.replace('[/MEMBERSHIP_ID]', '/' + args['MEMBERSHIP_ID'])
			if (args['MEMBERSHIP_ID']) delete args['MEMBERSHIP_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/MEMBERSHIP_ID]') !== -1) url = url.replace('[/MEMBERSHIP_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'deleteRemoveMembership': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/memberships/{MEMBERSHIP_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['MEMBERSHIP_ID'] == null) throw new Error('MEMBERSHIP_ID is a required parameter')
		var rgx = new RegExp('\{MEMBERSHIP_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['MEMBERSHIP_ID'])
			if (args['MEMBERSHIP_ID']) delete args['MEMBERSHIP_ID']
		}
		if (url.indexOf('[/MEMBERSHIP_ID]') !== -1) {
			url = url.replace('[/MEMBERSHIP_ID]', '/' + args['MEMBERSHIP_ID'])
			if (args['MEMBERSHIP_ID']) delete args['MEMBERSHIP_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/MEMBERSHIP_ID]') !== -1) url = url.replace('[/MEMBERSHIP_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'DELETE',params:args}, opts)
	},
	'getIterations': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/iterations'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getIterationsDone': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/iterations/done'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getIterationsCurrent': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/iterations/current'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getIterationsBacklog': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/iterations/backlog'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getIterationsCurrentBacklog': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/iterations/current_backlog'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getStory': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'getAllStories': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'postAddStory': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'putStory': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'PUT',params:args}, opts)
	},
	'deleteStory': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'DELETE',params:args}, opts)
	},
	'postAddNote': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/notes'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'PUT',params:args}, opts)
	},
	'putDeliverAllFinished': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/deliver_all_finished'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'postMoveStories': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/moves'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'getViewTask': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/tasks/{TASK_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (args['TASK_ID'] == null) throw new Error('TASK_ID is a required parameter')
		var rgx = new RegExp('\{TASK_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['TASK_ID'])
			if (args['TASK_ID']) delete args['TASK_ID']
		}
		if (url.indexOf('[/TASK_ID]') !== -1) {
			url = url.replace('[/TASK_ID]', '/' + args['TASK_ID'])
			if (args['TASK_ID']) delete args['TASK_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		if (url.indexOf('[/TASK_ID]') !== -1) url = url.replace('[/TASK_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'putUpdateTask': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/tasks/{TASK_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (args['TASK_ID'] == null) throw new Error('TASK_ID is a required parameter')
		var rgx = new RegExp('\{TASK_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['TASK_ID'])
			if (args['TASK_ID']) delete args['TASK_ID']
		}
		if (url.indexOf('[/TASK_ID]') !== -1) {
			url = url.replace('[/TASK_ID]', '/' + args['TASK_ID'])
			if (args['TASK_ID']) delete args['TASK_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		if (url.indexOf('[/TASK_ID]') !== -1) url = url.replace('[/TASK_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'PUT',params:args}, opts)
	},
	'deleteTask': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/tasks/{TASK_ID}'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (args['TASK_ID'] == null) throw new Error('TASK_ID is a required parameter')
		var rgx = new RegExp('\{TASK_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['TASK_ID'])
			if (args['TASK_ID']) delete args['TASK_ID']
		}
		if (url.indexOf('[/TASK_ID]') !== -1) {
			url = url.replace('[/TASK_ID]', '/' + args['TASK_ID'])
			if (args['TASK_ID']) delete args['TASK_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		if (url.indexOf('[/TASK_ID]') !== -1) url = url.replace('[/TASK_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'DELETE',params:args}, opts)
	},
	'getAllTasks': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/tasks'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'GET',params:args}, opts)
	},
	'postAddTask': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/tasks'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'postUploadAttachment': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//projects/{PROJECT_ID}/stories/{STORY_ID}/attachments'
		args = args || {}
		if (args['PROJECT_ID'] == null) throw new Error('PROJECT_ID is a required parameter')
		var rgx = new RegExp('\{PROJECT_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) {
			url = url.replace('[/PROJECT_ID]', '/' + args['PROJECT_ID'])
			if (args['PROJECT_ID']) delete args['PROJECT_ID']
		}
		if (args['STORY_ID'] == null) throw new Error('STORY_ID is a required parameter')
		var rgx = new RegExp('\{STORY_ID\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/STORY_ID]') !== -1) {
			url = url.replace('[/STORY_ID]', '/' + args['STORY_ID'])
			if (args['STORY_ID']) delete args['STORY_ID']
		}
		if (url.indexOf('[/PROJECT_ID]') !== -1) url = url.replace('[/PROJECT_ID]', '')
		if (url.indexOf('[/STORY_ID]') !== -1) url = url.replace('[/STORY_ID]', '')
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	},
	'postSourceCommits': function(args, opts) {
		var url = 'https://www.pivotaltracker.com/services/v3//source_commits'
		args = args || {}
		return http({provider:'pivotaltracker',url:url,method:'POST',params:args}, opts)
	}
})