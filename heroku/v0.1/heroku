/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'heroku'})},
	'listAddons': function(args, opts) {
		var url = 'https://api.heroku.com/addons'
		args = args || {}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'listAppAddons': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/addons'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'installAppAddon': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/addons/{addon}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['addon'] == null) throw new Error('addon is a required parameter')
		var rgx = new RegExp('\{addon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['addon'])
			if (args['addon']) delete args['addon']
		}
		if (url.indexOf('[/addon]') !== -1) {
			url = url.replace('[/addon]', '/' + args['addon'])
			if (args['addon']) delete args['addon']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/addon]') !== -1) url = url.replace('[/addon]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'upgradeAppAddon': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/addons/{addon}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['addon'] == null) throw new Error('addon is a required parameter')
		var rgx = new RegExp('\{addon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['addon'])
			if (args['addon']) delete args['addon']
		}
		if (url.indexOf('[/addon]') !== -1) {
			url = url.replace('[/addon]', '/' + args['addon'])
			if (args['addon']) delete args['addon']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/addon]') !== -1) url = url.replace('[/addon]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'PUT',params:args}, opts)
	},
	'uninstallAppAddon': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/addons/{addon}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['addon'] == null) throw new Error('addon is a required parameter')
		var rgx = new RegExp('\{addon\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['addon'])
			if (args['addon']) delete args['addon']
		}
		if (url.indexOf('[/addon]') !== -1) {
			url = url.replace('[/addon]', '/' + args['addon'])
			if (args['addon']) delete args['addon']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/addon]') !== -1) url = url.replace('[/addon]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'DELETE',params:args}, opts)
	},
	'listApps': function(args, opts) {
		var url = 'https://api.heroku.com/apps'
		args = args || {}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'createApp': function(args, opts) {
		var url = 'https://api.heroku.com/apps'
		args = args || {}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'getAppInfo': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{name}'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'destroyApp': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{name}'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'DELETE',params:args}, opts)
	},
	'listCollaborators': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/collaborators'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'removeCollaborator': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/collaborators/{email}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'DELETE',params:args}, opts)
	},
	'listConfigVars': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/config_vars'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'addConfigVars': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/config_vars'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'PUT',params:args}, opts)
	},
	'removeConfigVar': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/config_vars/{key}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'DELETE',params:args}, opts)
	},
	'listDomains': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/domains'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'removeDomain': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/domains/{domain_name}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['domain_name'] == null) throw new Error('domain_name is a required parameter')
		var rgx = new RegExp('\{domain_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain_name'])
			if (args['domain_name']) delete args['domain_name']
		}
		if (url.indexOf('[/domain_name]') !== -1) {
			url = url.replace('[/domain_name]', '/' + args['domain_name'])
			if (args['domain_name']) delete args['domain_name']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/domain_name]') !== -1) url = url.replace('[/domain_name]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'DELETE',params:args}, opts)
	},
	'listSSHkeys': function(args, opts) {
		var url = 'https://api.heroku.com/user/keys'
		args = args || {}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'associateSSHkey': function(args, opts) {
		var url = 'https://api.heroku.com/user/keys'
		args = args || {}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'removeSSHkey': function(args, opts) {
		var url = 'https://api.heroku.com/user/keys/{key}'
		args = args || {}
		if (args['key'] == null) throw new Error('key is a required parameter')
		var rgx = new RegExp('\{key\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['key'])
			if (args['key']) delete args['key']
		}
		if (url.indexOf('[/key]') !== -1) {
			url = url.replace('[/key]', '/' + args['key'])
			if (args['key']) delete args['key']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/key]') !== -1) url = url.replace('[/key]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'DELETE',params:args}, opts)
	},
	'getAppLogs': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/logs'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['logplex'] == null) args['logplex'] = "true"
		var rgx = new RegExp('\{logplex\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['logplex'])
			if (args['logplex']) delete args['logplex']
		}
		if (url.indexOf('[/logplex]') !== -1) {
			url = url.replace('[/logplex]', '/' + args['logplex'])
			if (args['logplex']) delete args['logplex']
		}
		var rgx = new RegExp('\{num\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['num'])
			if (args['num']) delete args['num']
		}
		if (url.indexOf('[/num]') !== -1) {
			url = url.replace('[/num]', '/' + args['num'])
			if (args['num']) delete args['num']
		}
		var rgx = new RegExp('\{ps\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ps'])
			if (args['ps']) delete args['ps']
		}
		if (url.indexOf('[/ps]') !== -1) {
			url = url.replace('[/ps]', '/' + args['ps'])
			if (args['ps']) delete args['ps']
		}
		var rgx = new RegExp('\{source\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['source'])
			if (args['source']) delete args['source']
		}
		if (url.indexOf('[/source]') !== -1) {
			url = url.replace('[/source]', '/' + args['source'])
			if (args['source']) delete args['source']
		}
		var rgx = new RegExp('\{tail\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tail'])
			if (args['tail']) delete args['tail']
		}
		if (url.indexOf('[/tail]') !== -1) {
			url = url.replace('[/tail]', '/' + args['tail'])
			if (args['tail']) delete args['tail']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/logplex]') !== -1) url = url.replace('[/logplex]', '')
		if (url.indexOf('[/num]') !== -1) url = url.replace('[/num]', '')
		if (url.indexOf('[/ps]') !== -1) url = url.replace('[/ps]', '')
		if (url.indexOf('[/source]') !== -1) url = url.replace('[/source]', '')
		if (url.indexOf('[/tail]') !== -1) url = url.replace('[/tail]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'ListProcesses': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/ps'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'runOne-offProcess': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/ps'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (args['command'] == null) throw new Error('command is a required parameter')
		var rgx = new RegExp('\{command\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['command'])
			if (args['command']) delete args['command']
		}
		if (url.indexOf('[/command]') !== -1) {
			url = url.replace('[/command]', '/' + args['command'])
			if (args['command']) delete args['command']
		}
		var rgx = new RegExp('\{attach\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attach'])
			if (args['attach']) delete args['attach']
		}
		if (url.indexOf('[/attach]') !== -1) {
			url = url.replace('[/attach]', '/' + args['attach'])
			if (args['attach']) delete args['attach']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		if (url.indexOf('[/command]') !== -1) url = url.replace('[/command]', '')
		if (url.indexOf('[/attach]') !== -1) url = url.replace('[/attach]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'restartProcesses': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/ps/restart'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		var rgx = new RegExp('\{ps\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['ps'])
			if (args['ps']) delete args['ps']
		}
		if (url.indexOf('[/ps]') !== -1) {
			url = url.replace('[/ps]', '/' + args['ps'])
			if (args['ps']) delete args['ps']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/ps]') !== -1) url = url.replace('[/ps]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'stopProcesses': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/ps/stop'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'scaleProcesses': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/ps/scale'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['qty'] == null) throw new Error('qty is a required parameter')
		var rgx = new RegExp('\{qty\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['qty'])
			if (args['qty']) delete args['qty']
		}
		if (url.indexOf('[/qty]') !== -1) {
			url = url.replace('[/qty]', '/' + args['qty'])
			if (args['qty']) delete args['qty']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/qty]') !== -1) url = url.replace('[/qty]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'listReleases': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/releases'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'rollbackToRelease': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/releases'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (args['rollback'] == null) throw new Error('rollback is a required parameter')
		var rgx = new RegExp('\{rollback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rollback'])
			if (args['rollback']) delete args['rollback']
		}
		if (url.indexOf('[/rollback]') !== -1) {
			url = url.replace('[/rollback]', '/' + args['rollback'])
			if (args['rollback']) delete args['rollback']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		if (url.indexOf('[/rollback]') !== -1) url = url.replace('[/rollback]', '')
		return http({provider:'heroku',url:url,method:'POST',params:args}, opts)
	},
	'getReleaseInfo': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/releases/{release}'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['release'] == null) throw new Error('release is a required parameter')
		var rgx = new RegExp('\{release\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['release'])
			if (args['release']) delete args['release']
		}
		if (url.indexOf('[/release]') !== -1) {
			url = url.replace('[/release]', '/' + args['release'])
			if (args['release']) delete args['release']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/release]') !== -1) url = url.replace('[/release]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'listStacks': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/stack'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'GET',params:args}, opts)
	},
	'migrateApp': function(args, opts) {
		var url = 'https://api.heroku.com/apps/{app}/stack'
		args = args || {}
		if (args['app'] == null) throw new Error('app is a required parameter')
		var rgx = new RegExp('\{app\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['app'])
			if (args['app']) delete args['app']
		}
		if (url.indexOf('[/app]') !== -1) {
			url = url.replace('[/app]', '/' + args['app'])
			if (args['app']) delete args['app']
		}
		if (args['Accept'] == null) args['Accept'] = "application/json"
		var rgx = new RegExp('\{Accept\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/Accept]') !== -1) {
			url = url.replace('[/Accept]', '/' + args['Accept'])
			if (args['Accept']) delete args['Accept']
		}
		if (url.indexOf('[/app]') !== -1) url = url.replace('[/app]', '')
		if (url.indexOf('[/Accept]') !== -1) url = url.replace('[/Accept]', '')
		return http({provider:'heroku',url:url,method:'PUT',params:args}, opts)
	}
})