/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'facecom'})},
	'faces.detect': function(args, opts) {
		var url = 'http://api.face.com/faces/detect.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['urls'] == null) throw new Error('urls is a required parameter')
		var rgx = new RegExp('\{urls\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['urls'])
			if (args['urls']) delete args['urls']
		}
		if (url.indexOf('[/urls]') !== -1) {
			url = url.replace('[/urls]', '/' + args['urls'])
			if (args['urls']) delete args['urls']
		}
		var rgx = new RegExp('\{detector\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['detector'])
			if (args['detector']) delete args['detector']
		}
		if (url.indexOf('[/detector]') !== -1) {
			url = url.replace('[/detector]', '/' + args['detector'])
			if (args['detector']) delete args['detector']
		}
		var rgx = new RegExp('\{attributes\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attributes'])
			if (args['attributes']) delete args['attributes']
		}
		if (url.indexOf('[/attributes]') !== -1) {
			url = url.replace('[/attributes]', '/' + args['attributes'])
			if (args['attributes']) delete args['attributes']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/urls]') !== -1) url = url.replace('[/urls]', '')
		if (url.indexOf('[/detector]') !== -1) url = url.replace('[/detector]', '')
		if (url.indexOf('[/attributes]') !== -1) url = url.replace('[/attributes]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		return http({provider:'facecom',url:url,method:'POST',params:args}, opts)
	},
	'faces.recognize': function(args, opts) {
		var url = 'http://api.face.com/faces/recognize.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['uids'] == null) throw new Error('uids is a required parameter')
		var rgx = new RegExp('\{uids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['uids'])
			if (args['uids']) delete args['uids']
		}
		if (url.indexOf('[/uids]') !== -1) {
			url = url.replace('[/uids]', '/' + args['uids'])
			if (args['uids']) delete args['uids']
		}
		if (args['urls'] == null) throw new Error('urls is a required parameter')
		var rgx = new RegExp('\{urls\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['urls'])
			if (args['urls']) delete args['urls']
		}
		if (url.indexOf('[/urls]') !== -1) {
			url = url.replace('[/urls]', '/' + args['urls'])
			if (args['urls']) delete args['urls']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{detector\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['detector'])
			if (args['detector']) delete args['detector']
		}
		if (url.indexOf('[/detector]') !== -1) {
			url = url.replace('[/detector]', '/' + args['detector'])
			if (args['detector']) delete args['detector']
		}
		var rgx = new RegExp('\{attributes\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['attributes'])
			if (args['attributes']) delete args['attributes']
		}
		if (url.indexOf('[/attributes]') !== -1) {
			url = url.replace('[/attributes]', '/' + args['attributes'])
			if (args['attributes']) delete args['attributes']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/uids]') !== -1) url = url.replace('[/uids]', '')
		if (url.indexOf('[/urls]') !== -1) url = url.replace('[/urls]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/detector]') !== -1) url = url.replace('[/detector]', '')
		if (url.indexOf('[/attributes]') !== -1) url = url.replace('[/attributes]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'POST',params:args}, opts)
	},
	'faces.train': function(args, opts) {
		var url = 'http://api.face.com/faces/train.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['uids'] == null) throw new Error('uids is a required parameter')
		var rgx = new RegExp('\{uids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['uids'])
			if (args['uids']) delete args['uids']
		}
		if (url.indexOf('[/uids]') !== -1) {
			url = url.replace('[/uids]', '/' + args['uids'])
			if (args['uids']) delete args['uids']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/uids]') !== -1) url = url.replace('[/uids]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'GET',params:args}, opts)
	},
	'faces.status': function(args, opts) {
		var url = 'http://api.face.com/faces/status.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['uids'] == null) throw new Error('uids is a required parameter')
		var rgx = new RegExp('\{uids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['uids'])
			if (args['uids']) delete args['uids']
		}
		if (url.indexOf('[/uids]') !== -1) {
			url = url.replace('[/uids]', '/' + args['uids'])
			if (args['uids']) delete args['uids']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{callback_url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		if (url.indexOf('[/callback_url]') !== -1) {
			url = url.replace('[/callback_url]', '/' + args['callback_url'])
			if (args['callback_url']) delete args['callback_url']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/uids]') !== -1) url = url.replace('[/uids]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/callback_url]') !== -1) url = url.replace('[/callback_url]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'GET',params:args}, opts)
	},
	'tags.get': function(args, opts) {
		var url = 'http://api.face.com/tags/get.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{together\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['together'])
			if (args['together']) delete args['together']
		}
		if (url.indexOf('[/together]') !== -1) {
			url = url.replace('[/together]', '/' + args['together'])
			if (args['together']) delete args['together']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{namespace\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		if (url.indexOf('[/namespace]') !== -1) {
			url = url.replace('[/namespace]', '/' + args['namespace'])
			if (args['namespace']) delete args['namespace']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/together]') !== -1) url = url.replace('[/together]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/namespace]') !== -1) url = url.replace('[/namespace]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'GET',params:args}, opts)
	},
	'tags.add': function(args, opts) {
		var url = 'http://api.face.com/tags/add'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (args['x'] == null) throw new Error('x is a required parameter')
		var rgx = new RegExp('\{x\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['x'])
			if (args['x']) delete args['x']
		}
		if (url.indexOf('[/x]') !== -1) {
			url = url.replace('[/x]', '/' + args['x'])
			if (args['x']) delete args['x']
		}
		if (args['y'] == null) throw new Error('y is a required parameter')
		var rgx = new RegExp('\{y\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['y'])
			if (args['y']) delete args['y']
		}
		if (url.indexOf('[/y]') !== -1) {
			url = url.replace('[/y]', '/' + args['y'])
			if (args['y']) delete args['y']
		}
		if (args['width'] == null) throw new Error('width is a required parameter')
		var rgx = new RegExp('\{width\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['width'])
			if (args['width']) delete args['width']
		}
		if (url.indexOf('[/width]') !== -1) {
			url = url.replace('[/width]', '/' + args['width'])
			if (args['width']) delete args['width']
		}
		if (args['uid'] == null) throw new Error('uid is a required parameter')
		var rgx = new RegExp('\{uid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['uid'])
			if (args['uid']) delete args['uid']
		}
		if (url.indexOf('[/uid]') !== -1) {
			url = url.replace('[/uid]', '/' + args['uid'])
			if (args['uid']) delete args['uid']
		}
		if (args['tagger_id'] == null) throw new Error('tagger_id is a required parameter')
		var rgx = new RegExp('\{tagger_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagger_id'])
			if (args['tagger_id']) delete args['tagger_id']
		}
		if (url.indexOf('[/tagger_id]') !== -1) {
			url = url.replace('[/tagger_id]', '/' + args['tagger_id'])
			if (args['tagger_id']) delete args['tagger_id']
		}
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/x]') !== -1) url = url.replace('[/x]', '')
		if (url.indexOf('[/y]') !== -1) url = url.replace('[/y]', '')
		if (url.indexOf('[/width]') !== -1) url = url.replace('[/width]', '')
		if (url.indexOf('[/uid]') !== -1) url = url.replace('[/uid]', '')
		if (url.indexOf('[/tagger_id]') !== -1) url = url.replace('[/tagger_id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'POST',params:args}, opts)
	},
	'tags.save': function(args, opts) {
		var url = 'http://api.face.com/tags/save.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tids'] == null) throw new Error('tids is a required parameter')
		var rgx = new RegExp('\{tids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tids'])
			if (args['tids']) delete args['tids']
		}
		if (url.indexOf('[/tids]') !== -1) {
			url = url.replace('[/tids]', '/' + args['tids'])
			if (args['tids']) delete args['tids']
		}
		if (args['uid'] == null) throw new Error('uid is a required parameter')
		var rgx = new RegExp('\{uid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['uid'])
			if (args['uid']) delete args['uid']
		}
		if (url.indexOf('[/uid]') !== -1) {
			url = url.replace('[/uid]', '/' + args['uid'])
			if (args['uid']) delete args['uid']
		}
		var rgx = new RegExp('\{tagger_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagger_id'])
			if (args['tagger_id']) delete args['tagger_id']
		}
		if (url.indexOf('[/tagger_id]') !== -1) {
			url = url.replace('[/tagger_id]', '/' + args['tagger_id'])
			if (args['tagger_id']) delete args['tagger_id']
		}
		var rgx = new RegExp('\{label\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['label'])
			if (args['label']) delete args['label']
		}
		if (url.indexOf('[/label]') !== -1) {
			url = url.replace('[/label]', '/' + args['label'])
			if (args['label']) delete args['label']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tids]') !== -1) url = url.replace('[/tids]', '')
		if (url.indexOf('[/uid]') !== -1) url = url.replace('[/uid]', '')
		if (url.indexOf('[/tagger_id]') !== -1) url = url.replace('[/tagger_id]', '')
		if (url.indexOf('[/label]') !== -1) url = url.replace('[/label]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'POST',params:args}, opts)
	},
	'tags.remove': function(args, opts) {
		var url = 'http://api.face.com/tags/remove.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['tids'] == null) throw new Error('tids is a required parameter')
		var rgx = new RegExp('\{tids\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tids'])
			if (args['tids']) delete args['tids']
		}
		if (url.indexOf('[/tids]') !== -1) {
			url = url.replace('[/tids]', '/' + args['tids'])
			if (args['tids']) delete args['tids']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		var rgx = new RegExp('\{password\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['password'])
			if (args['password']) delete args['password']
		}
		if (url.indexOf('[/password]') !== -1) {
			url = url.replace('[/password]', '/' + args['password'])
			if (args['password']) delete args['password']
		}
		var rgx = new RegExp('\{user_auth\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/user_auth]') !== -1) {
			url = url.replace('[/user_auth]', '/' + args['user_auth'])
			if (args['user_auth']) delete args['user_auth']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/tids]') !== -1) url = url.replace('[/tids]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		if (url.indexOf('[/password]') !== -1) url = url.replace('[/password]', '')
		if (url.indexOf('[/user_auth]') !== -1) url = url.replace('[/user_auth]', '')
		return http({provider:'facecom',url:url,method:'DELETE',params:args}, opts)
	},
	'account.limits': function(args, opts) {
		var url = 'http://api.face.com/account/limits.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'facecom',url:url,method:'GET',params:args}, opts)
	},
	'account.users': function(args, opts) {
		var url = 'http://api.face.com/account/users.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['namespaces'] == null) throw new Error('namespaces is a required parameter')
		var rgx = new RegExp('\{namespaces\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['namespaces'])
			if (args['namespaces']) delete args['namespaces']
		}
		if (url.indexOf('[/namespaces]') !== -1) {
			url = url.replace('[/namespaces]', '/' + args['namespaces'])
			if (args['namespaces']) delete args['namespaces']
		}
		var rgx = new RegExp('\{callback\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/callback]') !== -1) {
			url = url.replace('[/callback]', '/' + args['callback'])
			if (args['callback']) delete args['callback']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/namespaces]') !== -1) url = url.replace('[/namespaces]', '')
		if (url.indexOf('[/callback]') !== -1) url = url.replace('[/callback]', '')
		return http({provider:'facecom',url:url,method:'GET',params:args}, opts)
	}
})