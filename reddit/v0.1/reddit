/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'reddit'})},
	'linkByFullname': function(args, opts) {
		var url = 'http://www.reddit.com//by_id/{fullname}.{format}'
		args = args || {}
		if (args['fullname'] == null) throw new Error('fullname is a required parameter')
		var rgx = new RegExp('\{fullname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fullname'])
			if (args['fullname']) delete args['fullname']
		}
		if (url.indexOf('[/fullname]') !== -1) {
			url = url.replace('[/fullname]', '/' + args['fullname'])
			if (args['fullname']) delete args['fullname']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/fullname]') !== -1) url = url.replace('[/fullname]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'linkByFullnameComments': function(args, opts) {
		var url = 'http://www.reddit.com//comments/{id36}.{format}'
		args = args || {}
		if (args['id36'] == null) throw new Error('id36 is a required parameter')
		var rgx = new RegExp('\{id36\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id36'])
			if (args['id36']) delete args['id36']
		}
		if (url.indexOf('[/id36]') !== -1) {
			url = url.replace('[/id36]', '/' + args['id36'])
			if (args['id36']) delete args['id36']
		}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/id36]') !== -1) url = url.replace('[/id36]', '')
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getInfo': function(args, opts) {
		var url = 'http://www.reddit.com//api/info.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'postExpando': function(args, opts) {
		var url = 'http://www.reddit.com//api/expando'
		args = args || {}
		if (args['link_id'] == null) throw new Error('link_id is a required parameter')
		var rgx = new RegExp('\{link_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link_id'])
			if (args['link_id']) delete args['link_id']
		}
		if (url.indexOf('[/link_id]') !== -1) {
			url = url.replace('[/link_id]', '/' + args['link_id'])
			if (args['link_id']) delete args['link_id']
		}
		if (url.indexOf('[/link_id]') !== -1) url = url.replace('[/link_id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'login': function(args, opts) {
		var url = 'http://www.reddit.com//api/login/{username}'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		if (args['passwd'] == null) throw new Error('passwd is a required parameter')
		var rgx = new RegExp('\{passwd\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['passwd'])
			if (args['passwd']) delete args['passwd']
		}
		if (url.indexOf('[/passwd]') !== -1) {
			url = url.replace('[/passwd]', '/' + args['passwd'])
			if (args['passwd']) delete args['passwd']
		}
		if (args['api_type'] == null) args['api_type'] = "json"
		var rgx = new RegExp('\{api_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['api_type'])
			if (args['api_type']) delete args['api_type']
		}
		if (url.indexOf('[/api_type]') !== -1) {
			url = url.replace('[/api_type]', '/' + args['api_type'])
			if (args['api_type']) delete args['api_type']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/passwd]') !== -1) url = url.replace('[/passwd]', '')
		if (url.indexOf('[/api_type]') !== -1) url = url.replace('[/api_type]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'userAbout': function(args, opts) {
		var url = 'http://www.reddit.com//user/{username}/about.json'
		args = args || {}
		if (args['username'] == null) throw new Error('username is a required parameter')
		var rgx = new RegExp('\{username\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) {
			url = url.replace('[/username]', '/' + args['username'])
			if (args['username']) delete args['username']
		}
		if (url.indexOf('[/username]') !== -1) url = url.replace('[/username]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getMe': function(args, opts) {
		var url = 'http://www.reddit.com//api/me.json'
		args = args || {}
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	},
	'getMine': function(args, opts) {
		var url = 'http://www.reddit.com//reddits/mine.{format}'
		args = args || {}
		if (args['format'] == null) args['format'] = "json"
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	},
	'postRegister': function(args, opts) {
		var url = 'http://www.reddit.com//api/register'
		args = args || {}
		if (args['user'] == null) throw new Error('user is a required parameter')
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (args['passwd'] == null) throw new Error('passwd is a required parameter')
		var rgx = new RegExp('\{passwd\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['passwd'])
			if (args['passwd']) delete args['passwd']
		}
		if (url.indexOf('[/passwd]') !== -1) {
			url = url.replace('[/passwd]', '/' + args['passwd'])
			if (args['passwd']) delete args['passwd']
		}
		if (args['passwd2'] == null) throw new Error('passwd2 is a required parameter')
		var rgx = new RegExp('\{passwd2\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['passwd2'])
			if (args['passwd2']) delete args['passwd2']
		}
		if (url.indexOf('[/passwd2]') !== -1) {
			url = url.replace('[/passwd2]', '/' + args['passwd2'])
			if (args['passwd2']) delete args['passwd2']
		}
		if (args['dest'] == null) throw new Error('dest is a required parameter')
		var rgx = new RegExp('\{dest\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dest'])
			if (args['dest']) delete args['dest']
		}
		if (url.indexOf('[/dest]') !== -1) {
			url = url.replace('[/dest]', '/' + args['dest'])
			if (args['dest']) delete args['dest']
		}
		if (args['rem'] == null) throw new Error('rem is a required parameter')
		var rgx = new RegExp('\{rem\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['rem'])
			if (args['rem']) delete args['rem']
		}
		if (url.indexOf('[/rem]') !== -1) {
			url = url.replace('[/rem]', '/' + args['rem'])
			if (args['rem']) delete args['rem']
		}
		if (args['reason'] == null) throw new Error('reason is a required parameter')
		var rgx = new RegExp('\{reason\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['reason'])
			if (args['reason']) delete args['reason']
		}
		if (url.indexOf('[/reason]') !== -1) {
			url = url.replace('[/reason]', '/' + args['reason'])
			if (args['reason']) delete args['reason']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/passwd]') !== -1) url = url.replace('[/passwd]', '')
		if (url.indexOf('[/passwd2]') !== -1) url = url.replace('[/passwd2]', '')
		if (url.indexOf('[/dest]') !== -1) url = url.replace('[/dest]', '')
		if (url.indexOf('[/rem]') !== -1) url = url.replace('[/rem]', '')
		if (url.indexOf('[/reason]') !== -1) url = url.replace('[/reason]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postDeleteUser': function(args, opts) {
		var url = 'http://www.reddit.com//api/delete_user'
		args = args || {}
		if (args['areyousure1'] == null) throw new Error('areyousure1 is a required parameter')
		var rgx = new RegExp('\{areyousure1\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['areyousure1'])
			if (args['areyousure1']) delete args['areyousure1']
		}
		if (url.indexOf('[/areyousure1]') !== -1) {
			url = url.replace('[/areyousure1]', '/' + args['areyousure1'])
			if (args['areyousure1']) delete args['areyousure1']
		}
		if (args['areyousure2'] == null) throw new Error('areyousure2 is a required parameter')
		var rgx = new RegExp('\{areyousure2\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['areyousure2'])
			if (args['areyousure2']) delete args['areyousure2']
		}
		if (url.indexOf('[/areyousure2]') !== -1) {
			url = url.replace('[/areyousure2]', '/' + args['areyousure2'])
			if (args['areyousure2']) delete args['areyousure2']
		}
		if (args['areyousure2'] == null) throw new Error('areyousure2 is a required parameter')
		var rgx = new RegExp('\{areyousure2\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['areyousure2'])
			if (args['areyousure2']) delete args['areyousure2']
		}
		if (url.indexOf('[/areyousure2]') !== -1) {
			url = url.replace('[/areyousure2]', '/' + args['areyousure2'])
			if (args['areyousure2']) delete args['areyousure2']
		}
		if (url.indexOf('[/areyousure1]') !== -1) url = url.replace('[/areyousure1]', '')
		if (url.indexOf('[/areyousure2]') !== -1) url = url.replace('[/areyousure2]', '')
		if (url.indexOf('[/areyousure2]') !== -1) url = url.replace('[/areyousure2]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postLeavemoderator': function(args, opts) {
		var url = 'http://www.reddit.com//api/leavemoderator'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postLeavecontributor': function(args, opts) {
		var url = 'http://www.reddit.com//api/leavecontributor'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postPassword': function(args, opts) {
		var url = 'http://www.reddit.com//api/password'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postResetpassword': function(args, opts) {
		var url = 'http://www.reddit.com//api/resetpassword'
		args = args || {}
		if (args['reset'] == null) throw new Error('reset is a required parameter')
		var rgx = new RegExp('\{reset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['reset'])
			if (args['reset']) delete args['reset']
		}
		if (url.indexOf('[/reset]') !== -1) {
			url = url.replace('[/reset]', '/' + args['reset'])
			if (args['reset']) delete args['reset']
		}
		if (args['passwd'] == null) throw new Error('passwd is a required parameter')
		var rgx = new RegExp('\{passwd\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['passwd'])
			if (args['passwd']) delete args['passwd']
		}
		if (url.indexOf('[/passwd]') !== -1) {
			url = url.replace('[/passwd]', '/' + args['passwd'])
			if (args['passwd']) delete args['passwd']
		}
		if (args['passwd2'] == null) throw new Error('passwd2 is a required parameter')
		var rgx = new RegExp('\{passwd2\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['passwd2'])
			if (args['passwd2']) delete args['passwd2']
		}
		if (url.indexOf('[/passwd2]') !== -1) {
			url = url.replace('[/passwd2]', '/' + args['passwd2'])
			if (args['passwd2']) delete args['passwd2']
		}
		if (url.indexOf('[/reset]') !== -1) url = url.replace('[/reset]', '')
		if (url.indexOf('[/passwd]') !== -1) url = url.replace('[/passwd]', '')
		if (url.indexOf('[/passwd2]') !== -1) url = url.replace('[/passwd2]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'submit': function(args, opts) {
		var url = 'http://www.reddit.com//api/submit'
		args = args || {}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (args['kind'] == null) throw new Error('kind is a required parameter')
		var rgx = new RegExp('\{kind\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (url.indexOf('[/kind]') !== -1) {
			url = url.replace('[/kind]', '/' + args['kind'])
			if (args['kind']) delete args['kind']
		}
		if (args['sr'] == null) throw new Error('sr is a required parameter')
		var rgx = new RegExp('\{sr\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sr'])
			if (args['sr']) delete args['sr']
		}
		if (url.indexOf('[/sr]') !== -1) {
			url = url.replace('[/sr]', '/' + args['sr'])
			if (args['sr']) delete args['sr']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['r'] == null) throw new Error('r is a required parameter')
		var rgx = new RegExp('\{r\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['r'])
			if (args['r']) delete args['r']
		}
		if (url.indexOf('[/r]') !== -1) {
			url = url.replace('[/r]', '/' + args['r'])
			if (args['r']) delete args['r']
		}
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		if (url.indexOf('[/kind]') !== -1) url = url.replace('[/kind]', '')
		if (url.indexOf('[/sr]') !== -1) url = url.replace('[/sr]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/r]') !== -1) url = url.replace('[/r]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'share': function(args, opts) {
		var url = 'http://www.reddit.com//api/share'
		args = args || {}
		if (args['parent'] == null) throw new Error('parent is a required parameter')
		var rgx = new RegExp('\{parent\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['parent'])
			if (args['parent']) delete args['parent']
		}
		if (url.indexOf('[/parent]') !== -1) {
			url = url.replace('[/parent]', '/' + args['parent'])
			if (args['parent']) delete args['parent']
		}
		if (args['share_from'] == null) throw new Error('share_from is a required parameter')
		var rgx = new RegExp('\{share_from\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['share_from'])
			if (args['share_from']) delete args['share_from']
		}
		if (url.indexOf('[/share_from]') !== -1) {
			url = url.replace('[/share_from]', '/' + args['share_from'])
			if (args['share_from']) delete args['share_from']
		}
		if (args['replyto'] == null) throw new Error('replyto is a required parameter')
		var rgx = new RegExp('\{replyto\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['replyto'])
			if (args['replyto']) delete args['replyto']
		}
		if (url.indexOf('[/replyto]') !== -1) {
			url = url.replace('[/replyto]', '/' + args['replyto'])
			if (args['replyto']) delete args['replyto']
		}
		if (args['share_to'] == null) throw new Error('share_to is a required parameter')
		var rgx = new RegExp('\{share_to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['share_to'])
			if (args['share_to']) delete args['share_to']
		}
		if (url.indexOf('[/share_to]') !== -1) {
			url = url.replace('[/share_to]', '/' + args['share_to'])
			if (args['share_to']) delete args['share_to']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		var rgx = new RegExp('\{renderstyle\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['renderstyle'])
			if (args['renderstyle']) delete args['renderstyle']
		}
		if (url.indexOf('[/renderstyle]') !== -1) {
			url = url.replace('[/renderstyle]', '/' + args['renderstyle'])
			if (args['renderstyle']) delete args['renderstyle']
		}
		if (url.indexOf('[/parent]') !== -1) url = url.replace('[/parent]', '')
		if (url.indexOf('[/share_from]') !== -1) url = url.replace('[/share_from]', '')
		if (url.indexOf('[/replyto]') !== -1) url = url.replace('[/replyto]', '')
		if (url.indexOf('[/share_to]') !== -1) url = url.replace('[/share_to]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		if (url.indexOf('[/renderstyle]') !== -1) url = url.replace('[/renderstyle]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postVote': function(args, opts) {
		var url = 'http://www.reddit.com//api/vote'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['dir'] == null) throw new Error('dir is a required parameter')
		var rgx = new RegExp('\{dir\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['dir'])
			if (args['dir']) delete args['dir']
		}
		if (url.indexOf('[/dir]') !== -1) {
			url = url.replace('[/dir]', '/' + args['dir'])
			if (args['dir']) delete args['dir']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/dir]') !== -1) url = url.replace('[/dir]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postFetchTitle': function(args, opts) {
		var url = 'http://www.reddit.com//api/fetch_title'
		args = args || {}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postMarknsfw': function(args, opts) {
		var url = 'http://www.reddit.com//api/marknsfw'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUnmarknsfw': function(args, opts) {
		var url = 'http://www.reddit.com//api/unmarknsfw'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postSave': function(args, opts) {
		var url = 'http://www.reddit.com//api/save'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUnsave': function(args, opts) {
		var url = 'http://www.reddit.com//api/unsave'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postHide': function(args, opts) {
		var url = 'http://www.reddit.com//api/hide'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUnhide': function(args, opts) {
		var url = 'http://www.reddit.com//api/unhide'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postDel': function(args, opts) {
		var url = 'http://www.reddit.com//api/del'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postEditusertext': function(args, opts) {
		var url = 'http://www.reddit.com//api/editusertext'
		args = args || {}
		if (args['thing_id'] == null) throw new Error('thing_id is a required parameter')
		var rgx = new RegExp('\{thing_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['thing_id'])
			if (args['thing_id']) delete args['thing_id']
		}
		if (url.indexOf('[/thing_id]') !== -1) {
			url = url.replace('[/thing_id]', '/' + args['thing_id'])
			if (args['thing_id']) delete args['thing_id']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/thing_id]') !== -1) url = url.replace('[/thing_id]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postRemove': function(args, opts) {
		var url = 'http://www.reddit.com//api/remove'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postApprove': function(args, opts) {
		var url = 'http://www.reddit.com//api/approve'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postDistinguish': function(args, opts) {
		var url = 'http://www.reddit.com//api/distinguish'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['how'] == null) throw new Error('how is a required parameter')
		var rgx = new RegExp('\{how\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['how'])
			if (args['how']) delete args['how']
		}
		if (url.indexOf('[/how]') !== -1) {
			url = url.replace('[/how]', '/' + args['how'])
			if (args['how']) delete args['how']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/how]') !== -1) url = url.replace('[/how]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postCompose': function(args, opts) {
		var url = 'http://www.reddit.com//api/compose'
		args = args || {}
		if (args['to'] == null) throw new Error('to is a required parameter')
		var rgx = new RegExp('\{to\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['to'])
			if (args['to']) delete args['to']
		}
		if (url.indexOf('[/to]') !== -1) {
			url = url.replace('[/to]', '/' + args['to'])
			if (args['to']) delete args['to']
		}
		if (args['subject'] == null) throw new Error('subject is a required parameter')
		var rgx = new RegExp('\{subject\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (url.indexOf('[/subject]') !== -1) {
			url = url.replace('[/subject]', '/' + args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (args['captcha'] == null) throw new Error('captcha is a required parameter')
		var rgx = new RegExp('\{captcha\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['captcha'])
			if (args['captcha']) delete args['captcha']
		}
		if (url.indexOf('[/captcha]') !== -1) {
			url = url.replace('[/captcha]', '/' + args['captcha'])
			if (args['captcha']) delete args['captcha']
		}
		if (url.indexOf('[/to]') !== -1) url = url.replace('[/to]', '')
		if (url.indexOf('[/subject]') !== -1) url = url.replace('[/subject]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		if (url.indexOf('[/captcha]') !== -1) url = url.replace('[/captcha]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postCollapseMessage': function(args, opts) {
		var url = 'http://www.reddit.com//api/collapse_message'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUncollapseMessage': function(args, opts) {
		var url = 'http://www.reddit.com//api/uncollapse_message'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUnreadMessage': function(args, opts) {
		var url = 'http://www.reddit.com//api/unread_message'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postReadMessage': function(args, opts) {
		var url = 'http://www.reddit.com//api/read_message'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postHideMessage': function(args, opts) {
		var url = 'http://www.reddit.com//api/hide_message'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUnhideMessage': function(args, opts) {
		var url = 'http://www.reddit.com//api/unhide_message'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postMoremessages': function(args, opts) {
		var url = 'http://www.reddit.com//api/moremessages'
		args = args || {}
		if (args['parent_id'] == null) throw new Error('parent_id is a required parameter')
		var rgx = new RegExp('\{parent_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['parent_id'])
			if (args['parent_id']) delete args['parent_id']
		}
		if (url.indexOf('[/parent_id]') !== -1) {
			url = url.replace('[/parent_id]', '/' + args['parent_id'])
			if (args['parent_id']) delete args['parent_id']
		}
		if (url.indexOf('[/parent_id]') !== -1) url = url.replace('[/parent_id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postComment': function(args, opts) {
		var url = 'http://www.reddit.com//api/comment'
		args = args || {}
		if (args['parent'] == null) throw new Error('parent is a required parameter')
		var rgx = new RegExp('\{parent\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['parent'])
			if (args['parent']) delete args['parent']
		}
		if (url.indexOf('[/parent]') !== -1) {
			url = url.replace('[/parent]', '/' + args['parent'])
			if (args['parent']) delete args['parent']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/parent]') !== -1) url = url.replace('[/parent]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postMorechildren': function(args, opts) {
		var url = 'http://www.reddit.com//api/morechildren'
		args = args || {}
		if (args['link_id'] == null) throw new Error('link_id is a required parameter')
		var rgx = new RegExp('\{link_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link_id'])
			if (args['link_id']) delete args['link_id']
		}
		if (url.indexOf('[/link_id]') !== -1) {
			url = url.replace('[/link_id]', '/' + args['link_id'])
			if (args['link_id']) delete args['link_id']
		}
		if (args['where'] == null) throw new Error('where is a required parameter')
		var rgx = new RegExp('\{where\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['where'])
			if (args['where']) delete args['where']
		}
		if (url.indexOf('[/where]') !== -1) {
			url = url.replace('[/where]', '/' + args['where'])
			if (args['where']) delete args['where']
		}
		if (args['children'] == null) throw new Error('children is a required parameter')
		var rgx = new RegExp('\{children\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['children'])
			if (args['children']) delete args['children']
		}
		if (url.indexOf('[/children]') !== -1) {
			url = url.replace('[/children]', '/' + args['children'])
			if (args['children']) delete args['children']
		}
		if (args['pv_hex'] == null) throw new Error('pv_hex is a required parameter')
		var rgx = new RegExp('\{pv_hex\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pv_hex'])
			if (args['pv_hex']) delete args['pv_hex']
		}
		if (url.indexOf('[/pv_hex]') !== -1) {
			url = url.replace('[/pv_hex]', '/' + args['pv_hex'])
			if (args['pv_hex']) delete args['pv_hex']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/link_id]') !== -1) url = url.replace('[/link_id]', '')
		if (url.indexOf('[/where]') !== -1) url = url.replace('[/where]', '')
		if (url.indexOf('[/children]') !== -1) url = url.replace('[/children]', '')
		if (url.indexOf('[/pv_hex]') !== -1) url = url.replace('[/pv_hex]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postFriend': function(args, opts) {
		var url = 'http://www.reddit.com//api/friend'
		args = args || {}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['container'] == null) throw new Error('container is a required parameter')
		var rgx = new RegExp('\{container\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['container'])
			if (args['container']) delete args['container']
		}
		if (url.indexOf('[/container]') !== -1) {
			url = url.replace('[/container]', '/' + args['container'])
			if (args['container']) delete args['container']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		var rgx = new RegExp('\{note\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/note]') !== -1) {
			url = url.replace('[/note]', '/' + args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/container]') !== -1) url = url.replace('[/container]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/note]') !== -1) url = url.replace('[/note]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUnfriend': function(args, opts) {
		var url = 'http://www.reddit.com//api/unfriend'
		args = args || {}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['container'] == null) throw new Error('container is a required parameter')
		var rgx = new RegExp('\{container\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['container'])
			if (args['container']) delete args['container']
		}
		if (url.indexOf('[/container]') !== -1) {
			url = url.replace('[/container]', '/' + args['container'])
			if (args['container']) delete args['container']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/container]') !== -1) url = url.replace('[/container]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postFriendNote': function(args, opts) {
		var url = 'http://www.reddit.com//api/friend_note'
		args = args || {}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{note\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/note]') !== -1) {
			url = url.replace('[/note]', '/' + args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/note]') !== -1) url = url.replace('[/note]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postUpdate': function(args, opts) {
		var url = 'http://www.reddit.com//api/update'
		args = args || {}
		if (args['curpass'] == null) throw new Error('curpass is a required parameter')
		var rgx = new RegExp('\{curpass\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['curpass'])
			if (args['curpass']) delete args['curpass']
		}
		if (url.indexOf('[/curpass]') !== -1) {
			url = url.replace('[/curpass]', '/' + args['curpass'])
			if (args['curpass']) delete args['curpass']
		}
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		var rgx = new RegExp('\{newpass\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['newpass'])
			if (args['newpass']) delete args['newpass']
		}
		if (url.indexOf('[/newpass]') !== -1) {
			url = url.replace('[/newpass]', '/' + args['newpass'])
			if (args['newpass']) delete args['newpass']
		}
		var rgx = new RegExp('\{verpass\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['verpass'])
			if (args['verpass']) delete args['verpass']
		}
		if (url.indexOf('[/verpass]') !== -1) {
			url = url.replace('[/verpass]', '/' + args['verpass'])
			if (args['verpass']) delete args['verpass']
		}
		var rgx = new RegExp('\{verify\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['verify'])
			if (args['verify']) delete args['verify']
		}
		if (url.indexOf('[/verify]') !== -1) {
			url = url.replace('[/verify]', '/' + args['verify'])
			if (args['verify']) delete args['verify']
		}
		if (url.indexOf('[/curpass]') !== -1) url = url.replace('[/curpass]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/newpass]') !== -1) url = url.replace('[/newpass]', '')
		if (url.indexOf('[/verpass]') !== -1) url = url.replace('[/verpass]', '')
		if (url.indexOf('[/verify]') !== -1) url = url.replace('[/verify]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postTbCommentspanelShow': function(args, opts) {
		var url = 'http://www.reddit.com//api/tb_commentspanel_show'
		args = args || {}
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postTbCommentspanelHide': function(args, opts) {
		var url = 'http://www.reddit.com//api/tb_commentspanel_hide'
		args = args || {}
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postSiteAdmin': function(args, opts) {
		var url = 'http://www.reddit.com//api/site_admin'
		args = args || {}
		if (args['sr'] == null) throw new Error('sr is a required parameter')
		var rgx = new RegExp('\{sr\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sr'])
			if (args['sr']) delete args['sr']
		}
		if (url.indexOf('[/sr]') !== -1) {
			url = url.replace('[/sr]', '/' + args['sr'])
			if (args['sr']) delete args['sr']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		if (args['header-title'] == null) throw new Error('header-title is a required parameter')
		var rgx = new RegExp('\{header-title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['header-title'])
			if (args['header-title']) delete args['header-title']
		}
		if (url.indexOf('[/header-title]') !== -1) {
			url = url.replace('[/header-title]', '/' + args['header-title'])
			if (args['header-title']) delete args['header-title']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (args['description'] == null) throw new Error('description is a required parameter')
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (args['lang'] == null) throw new Error('lang is a required parameter')
		var rgx = new RegExp('\{lang\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (url.indexOf('[/lang]') !== -1) {
			url = url.replace('[/lang]', '/' + args['lang'])
			if (args['lang']) delete args['lang']
		}
		if (args['over_18'] == null) throw new Error('over_18 is a required parameter')
		var rgx = new RegExp('\{over_18\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['over_18'])
			if (args['over_18']) delete args['over_18']
		}
		if (url.indexOf('[/over_18]') !== -1) {
			url = url.replace('[/over_18]', '/' + args['over_18'])
			if (args['over_18']) delete args['over_18']
		}
		if (args['allow_top'] == null) throw new Error('allow_top is a required parameter')
		var rgx = new RegExp('\{allow_top\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['allow_top'])
			if (args['allow_top']) delete args['allow_top']
		}
		if (url.indexOf('[/allow_top]') !== -1) {
			url = url.replace('[/allow_top]', '/' + args['allow_top'])
			if (args['allow_top']) delete args['allow_top']
		}
		if (args['show_media'] == null) throw new Error('show_media is a required parameter')
		var rgx = new RegExp('\{show_media\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['show_media'])
			if (args['show_media']) delete args['show_media']
		}
		if (url.indexOf('[/show_media]') !== -1) {
			url = url.replace('[/show_media]', '/' + args['show_media'])
			if (args['show_media']) delete args['show_media']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['link_type'] == null) throw new Error('link_type is a required parameter')
		var rgx = new RegExp('\{link_type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link_type'])
			if (args['link_type']) delete args['link_type']
		}
		if (url.indexOf('[/link_type]') !== -1) {
			url = url.replace('[/link_type]', '/' + args['link_type'])
			if (args['link_type']) delete args['link_type']
		}
		if (args['sponsorship-text'] == null) throw new Error('sponsorship-text is a required parameter')
		var rgx = new RegExp('\{sponsorship-text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sponsorship-text'])
			if (args['sponsorship-text']) delete args['sponsorship-text']
		}
		if (url.indexOf('[/sponsorship-text]') !== -1) {
			url = url.replace('[/sponsorship-text]', '/' + args['sponsorship-text'])
			if (args['sponsorship-text']) delete args['sponsorship-text']
		}
		if (args['sponsorship-name'] == null) throw new Error('sponsorship-name is a required parameter')
		var rgx = new RegExp('\{sponsorship-name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sponsorship-name'])
			if (args['sponsorship-name']) delete args['sponsorship-name']
		}
		if (url.indexOf('[/sponsorship-name]') !== -1) {
			url = url.replace('[/sponsorship-name]', '/' + args['sponsorship-name'])
			if (args['sponsorship-name']) delete args['sponsorship-name']
		}
		if (args['sponsorship-url'] == null) throw new Error('sponsorship-url is a required parameter')
		var rgx = new RegExp('\{sponsorship-url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sponsorship-url'])
			if (args['sponsorship-url']) delete args['sponsorship-url']
		}
		if (url.indexOf('[/sponsorship-url]') !== -1) {
			url = url.replace('[/sponsorship-url]', '/' + args['sponsorship-url'])
			if (args['sponsorship-url']) delete args['sponsorship-url']
		}
		if (args['css_on_cname'] == null) throw new Error('css_on_cname is a required parameter')
		var rgx = new RegExp('\{css_on_cname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['css_on_cname'])
			if (args['css_on_cname']) delete args['css_on_cname']
		}
		if (url.indexOf('[/css_on_cname]') !== -1) {
			url = url.replace('[/css_on_cname]', '/' + args['css_on_cname'])
			if (args['css_on_cname']) delete args['css_on_cname']
		}
		if (url.indexOf('[/sr]') !== -1) url = url.replace('[/sr]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/header-title]') !== -1) url = url.replace('[/header-title]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		if (url.indexOf('[/lang]') !== -1) url = url.replace('[/lang]', '')
		if (url.indexOf('[/over_18]') !== -1) url = url.replace('[/over_18]', '')
		if (url.indexOf('[/allow_top]') !== -1) url = url.replace('[/allow_top]', '')
		if (url.indexOf('[/show_media]') !== -1) url = url.replace('[/show_media]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/link_type]') !== -1) url = url.replace('[/link_type]', '')
		if (url.indexOf('[/sponsorship-text]') !== -1) url = url.replace('[/sponsorship-text]', '')
		if (url.indexOf('[/sponsorship-name]') !== -1) url = url.replace('[/sponsorship-name]', '')
		if (url.indexOf('[/sponsorship-url]') !== -1) url = url.replace('[/sponsorship-url]', '')
		if (url.indexOf('[/css_on_cname]') !== -1) url = url.replace('[/css_on_cname]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postSubredditStylesheet': function(args, opts) {
		var url = 'http://www.reddit.com//api/subreddit_stylesheet'
		args = args || {}
		if (args['stylesheet_contents'] == null) throw new Error('stylesheet_contents is a required parameter')
		var rgx = new RegExp('\{stylesheet_contents\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['stylesheet_contents'])
			if (args['stylesheet_contents']) delete args['stylesheet_contents']
		}
		if (url.indexOf('[/stylesheet_contents]') !== -1) {
			url = url.replace('[/stylesheet_contents]', '/' + args['stylesheet_contents'])
			if (args['stylesheet_contents']) delete args['stylesheet_contents']
		}
		if (args['op'] == null) throw new Error('op is a required parameter')
		var rgx = new RegExp('\{op\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['op'])
			if (args['op']) delete args['op']
		}
		if (url.indexOf('[/op]') !== -1) {
			url = url.replace('[/op]', '/' + args['op'])
			if (args['op']) delete args['op']
		}
		if (url.indexOf('[/stylesheet_contents]') !== -1) url = url.replace('[/stylesheet_contents]', '')
		if (url.indexOf('[/op]') !== -1) url = url.replace('[/op]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postDeleteSrImg': function(args, opts) {
		var url = 'http://www.reddit.com//api/delete_sr_img'
		args = args || {}
		if (args['img_name'] == null) throw new Error('img_name is a required parameter')
		var rgx = new RegExp('\{img_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['img_name'])
			if (args['img_name']) delete args['img_name']
		}
		if (url.indexOf('[/img_name]') !== -1) {
			url = url.replace('[/img_name]', '/' + args['img_name'])
			if (args['img_name']) delete args['img_name']
		}
		if (url.indexOf('[/img_name]') !== -1) url = url.replace('[/img_name]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postDeleteSrHeader': function(args, opts) {
		var url = 'http://www.reddit.com//api/delete_sr_header'
		args = args || {}
		if (args['img_name'] == null) throw new Error('img_name is a required parameter')
		var rgx = new RegExp('\{img_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['img_name'])
			if (args['img_name']) delete args['img_name']
		}
		if (url.indexOf('[/img_name]') !== -1) {
			url = url.replace('[/img_name]', '/' + args['img_name'])
			if (args['img_name']) delete args['img_name']
		}
		if (url.indexOf('[/img_name]') !== -1) url = url.replace('[/img_name]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'getUploadSrImg': function(args, opts) {
		var url = 'http://www.reddit.com//api/upload_sr_img'
		args = args || {}
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	},
	'postUploadSrImg': function(args, opts) {
		var url = 'http://www.reddit.com//api/upload_sr_img'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['formid'] == null) throw new Error('formid is a required parameter')
		var rgx = new RegExp('\{formid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['formid'])
			if (args['formid']) delete args['formid']
		}
		if (url.indexOf('[/formid]') !== -1) {
			url = url.replace('[/formid]', '/' + args['formid'])
			if (args['formid']) delete args['formid']
		}
		if (args['header'] == null) throw new Error('header is a required parameter')
		var rgx = new RegExp('\{header\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['header'])
			if (args['header']) delete args['header']
		}
		if (url.indexOf('[/header]') !== -1) {
			url = url.replace('[/header]', '/' + args['header'])
			if (args['header']) delete args['header']
		}
		if (args['sponsor'] == null) throw new Error('sponsor is a required parameter')
		var rgx = new RegExp('\{sponsor\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sponsor'])
			if (args['sponsor']) delete args['sponsor']
		}
		if (url.indexOf('[/sponsor]') !== -1) {
			url = url.replace('[/sponsor]', '/' + args['sponsor'])
			if (args['sponsor']) delete args['sponsor']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/formid]') !== -1) url = url.replace('[/formid]', '')
		if (url.indexOf('[/header]') !== -1) url = url.replace('[/header]', '')
		if (url.indexOf('[/sponsor]') !== -1) url = url.replace('[/sponsor]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postSubscribe': function(args, opts) {
		var url = 'http://www.reddit.com//api/subscribe'
		args = args || {}
		if (args['action'] == null) throw new Error('action is a required parameter')
		var rgx = new RegExp('\{action\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['action'])
			if (args['action']) delete args['action']
		}
		if (url.indexOf('[/action]') !== -1) {
			url = url.replace('[/action]', '/' + args['action'])
			if (args['action']) delete args['action']
		}
		if (args['sr'] == null) throw new Error('sr is a required parameter')
		var rgx = new RegExp('\{sr\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sr'])
			if (args['sr']) delete args['sr']
		}
		if (url.indexOf('[/sr]') !== -1) {
			url = url.replace('[/sr]', '/' + args['sr'])
			if (args['sr']) delete args['sr']
		}
		if (url.indexOf('[/action]') !== -1) url = url.replace('[/action]', '')
		if (url.indexOf('[/sr]') !== -1) url = url.replace('[/sr]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postSearchRedditNames': function(args, opts) {
		var url = 'http://www.reddit.com//api/search_reddit_names'
		args = args || {}
		if (args['query'] == null) throw new Error('query is a required parameter')
		var rgx = new RegExp('\{query\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/query]') !== -1) {
			url = url.replace('[/query]', '/' + args['query'])
			if (args['query']) delete args['query']
		}
		if (url.indexOf('[/query]') !== -1) url = url.replace('[/query]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args, auth:'none'}, opts)
	},
	'flairlist': function(args, opts) {
		var url = 'http://www.reddit.com//api/flairlist'
		args = args || {}
		if (args['r'] == null) throw new Error('r is a required parameter')
		var rgx = new RegExp('\{r\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['r'])
			if (args['r']) delete args['r']
		}
		if (url.indexOf('[/r]') !== -1) {
			url = url.replace('[/r]', '/' + args['r'])
			if (args['r']) delete args['r']
		}
		if (args['limit'] == null) args['limit'] = "100"
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (args['after'] == null) throw new Error('after is a required parameter')
		var rgx = new RegExp('\{after\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['after'])
			if (args['after']) delete args['after']
		}
		if (url.indexOf('[/after]') !== -1) {
			url = url.replace('[/after]', '/' + args['after'])
			if (args['after']) delete args['after']
		}
		if (args['before'] == null) throw new Error('before is a required parameter')
		var rgx = new RegExp('\{before\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/before]') !== -1) {
			url = url.replace('[/before]', '/' + args['before'])
			if (args['before']) delete args['before']
		}
		if (url.indexOf('[/r]') !== -1) url = url.replace('[/r]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/after]') !== -1) url = url.replace('[/after]', '')
		if (url.indexOf('[/before]') !== -1) url = url.replace('[/before]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	},
	'flair': function(args, opts) {
		var url = 'http://www.reddit.com//api/flair'
		args = args || {}
		if (args['r'] == null) throw new Error('r is a required parameter')
		var rgx = new RegExp('\{r\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['r'])
			if (args['r']) delete args['r']
		}
		if (url.indexOf('[/r]') !== -1) {
			url = url.replace('[/r]', '/' + args['r'])
			if (args['r']) delete args['r']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		var rgx = new RegExp('\{css_class\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['css_class'])
			if (args['css_class']) delete args['css_class']
		}
		if (url.indexOf('[/css_class]') !== -1) {
			url = url.replace('[/css_class]', '/' + args['css_class'])
			if (args['css_class']) delete args['css_class']
		}
		if (url.indexOf('[/r]') !== -1) url = url.replace('[/r]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		if (url.indexOf('[/css_class]') !== -1) url = url.replace('[/css_class]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	},
	'flaircsv': function(args, opts) {
		var url = 'http://www.reddit.com//api/flaircsv.json'
		args = args || {}
		if (args['r'] == null) throw new Error('r is a required parameter')
		var rgx = new RegExp('\{r\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['r'])
			if (args['r']) delete args['r']
		}
		if (url.indexOf('[/r]') !== -1) {
			url = url.replace('[/r]', '/' + args['r'])
			if (args['r']) delete args['r']
		}
		if (args['flair_csv'] == null) throw new Error('flair_csv is a required parameter')
		var rgx = new RegExp('\{flair_csv\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['flair_csv'])
			if (args['flair_csv']) delete args['flair_csv']
		}
		if (url.indexOf('[/flair_csv]') !== -1) {
			url = url.replace('[/flair_csv]', '/' + args['flair_csv'])
			if (args['flair_csv']) delete args['flair_csv']
		}
		if (url.indexOf('[/r]') !== -1) url = url.replace('[/r]', '')
		if (url.indexOf('[/flair_csv]') !== -1) url = url.replace('[/flair_csv]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postFeedback': function(args, opts) {
		var url = 'http://www.reddit.com//api/feedback'
		args = args || {}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (args['email'] == null) throw new Error('email is a required parameter')
		var rgx = new RegExp('\{email\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['email'])
			if (args['email']) delete args['email']
		}
		if (url.indexOf('[/email]') !== -1) {
			url = url.replace('[/email]', '/' + args['email'])
			if (args['email']) delete args['email']
		}
		if (args['reason'] == null) throw new Error('reason is a required parameter')
		var rgx = new RegExp('\{reason\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['reason'])
			if (args['reason']) delete args['reason']
		}
		if (url.indexOf('[/reason]') !== -1) {
			url = url.replace('[/reason]', '/' + args['reason'])
			if (args['reason']) delete args['reason']
		}
		if (args['text'] == null) throw new Error('text is a required parameter')
		var rgx = new RegExp('\{text\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/text]') !== -1) {
			url = url.replace('[/text]', '/' + args['text'])
			if (args['text']) delete args['text']
		}
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/email]') !== -1) url = url.replace('[/email]', '')
		if (url.indexOf('[/reason]') !== -1) url = url.replace('[/reason]', '')
		if (url.indexOf('[/text]') !== -1) url = url.replace('[/text]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postReport': function(args, opts) {
		var url = 'http://www.reddit.com//api/report'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postSearchfeedback': function(args, opts) {
		var url = 'http://www.reddit.com//api/searchfeedback'
		args = args || {}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (args['sort'] == null) throw new Error('sort is a required parameter')
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['t'] == null) throw new Error('t is a required parameter')
		var rgx = new RegExp('\{t\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['t'])
			if (args['t']) delete args['t']
		}
		if (url.indexOf('[/t]') !== -1) {
			url = url.replace('[/t]', '/' + args['t'])
			if (args['t']) delete args['t']
		}
		if (args['approval'] == null) throw new Error('approval is a required parameter')
		var rgx = new RegExp('\{approval\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['approval'])
			if (args['approval']) delete args['approval']
		}
		if (url.indexOf('[/approval]') !== -1) {
			url = url.replace('[/approval]', '/' + args['approval'])
			if (args['approval']) delete args['approval']
		}
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/t]') !== -1) url = url.replace('[/t]', '')
		if (url.indexOf('[/approval]') !== -1) url = url.replace('[/approval]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'getBookmarklet': function(args, opts) {
		var url = 'http://www.reddit.com//api/bookmarklet'
		args = args || {}
		if (args['what'] == null) throw new Error('what is a required parameter')
		var rgx = new RegExp('\{what\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['what'])
			if (args['what']) delete args['what']
		}
		if (url.indexOf('[/what]') !== -1) {
			url = url.replace('[/what]', '/' + args['what'])
			if (args['what']) delete args['what']
		}
		if (args['u'] == null) throw new Error('u is a required parameter')
		var rgx = new RegExp('\{u\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['u'])
			if (args['u']) delete args['u']
		}
		if (url.indexOf('[/u]') !== -1) {
			url = url.replace('[/u]', '/' + args['u'])
			if (args['u']) delete args['u']
		}
		if (url.indexOf('[/what]') !== -1) url = url.replace('[/what]', '')
		if (url.indexOf('[/u]') !== -1) url = url.replace('[/u]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	},
	'postEditError': function(args, opts) {
		var url = 'http://www.reddit.com//api/edit_error'
		args = args || {}
		if (args['hexkey'] == null) throw new Error('hexkey is a required parameter')
		var rgx = new RegExp('\{hexkey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hexkey'])
			if (args['hexkey']) delete args['hexkey']
		}
		if (url.indexOf('[/hexkey]') !== -1) {
			url = url.replace('[/hexkey]', '/' + args['hexkey'])
			if (args['hexkey']) delete args['hexkey']
		}
		if (args['nickname'] == null) throw new Error('nickname is a required parameter')
		var rgx = new RegExp('\{nickname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['nickname'])
			if (args['nickname']) delete args['nickname']
		}
		if (url.indexOf('[/nickname]') !== -1) {
			url = url.replace('[/nickname]', '/' + args['nickname'])
			if (args['nickname']) delete args['nickname']
		}
		if (args['status'] == null) throw new Error('status is a required parameter')
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/hexkey]') !== -1) url = url.replace('[/hexkey]', '')
		if (url.indexOf('[/nickname]') !== -1) url = url.replace('[/nickname]', '')
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postNoframe': function(args, opts) {
		var url = 'http://www.reddit.com//api/noframe'
		args = args || {}
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'postFrame': function(args, opts) {
		var url = 'http://www.reddit.com//api/frame'
		args = args || {}
		return http({provider:'reddit',url:url,method:'POST',params:args}, opts)
	},
	'getGadget': function(args, opts) {
		var url = 'http://www.reddit.com//api/gadget'
		args = args || {}
		if (args['type'] == null) args['type'] = "click"
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (args['links'] == null) throw new Error('links is a required parameter')
		var rgx = new RegExp('\{links\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['links'])
			if (args['links']) delete args['links']
		}
		if (url.indexOf('[/links]') !== -1) {
			url = url.replace('[/links]', '/' + args['links'])
			if (args['links']) delete args['links']
		}
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/links]') !== -1) url = url.replace('[/links]', '')
		return http({provider:'reddit',url:url,method:'GET',params:args}, opts)
	}
})