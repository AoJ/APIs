/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'facebook'})},
	'search': function(args, opts) {
		var url = 'https://graph.facebook.com/search'
		args = args || {}
		if (args['q'] == null) throw new Error('q is a required parameter')
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (args['type'] == null) throw new Error('type is a required parameter')
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (typeof args['center'] == 'object' && args['center'].lat !== undefined && args['center'].lng !== undefined) args['center'] = args['center'].lat + ',' + args['center'].lng
		var rgx = new RegExp('\{center\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['center'])
			if (args['center']) delete args['center']
		}
		if (url.indexOf('[/center]') !== -1) {
			url = url.replace('[/center]', '/' + args['center'])
			if (args['center']) delete args['center']
		}
		var rgx = new RegExp('\{distance\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['distance'])
			if (args['distance']) delete args['distance']
		}
		if (url.indexOf('[/distance]') !== -1) {
			url = url.replace('[/distance]', '/' + args['distance'])
			if (args['distance']) delete args['distance']
		}
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		if (url.indexOf('[/center]') !== -1) url = url.replace('[/center]', '')
		if (url.indexOf('[/distance]') !== -1) url = url.replace('[/distance]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getAlbum': function(args, opts) {
		var url = 'https://graph.facebook.com/{album}'
		args = args || {}
		if (args['album'] == null) args['album'] = "99394368305"
		var rgx = new RegExp('\{album\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album'])
			if (args['album']) delete args['album']
		}
		if (url.indexOf('[/album]') !== -1) {
			url = url.replace('[/album]', '/' + args['album'])
			if (args['album']) delete args['album']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/album]') !== -1) url = url.replace('[/album]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getAlbumPhotos': function(args, opts) {
		var url = 'https://graph.facebook.com/{album}/photos'
		args = args || {}
		if (args['album'] == null) args['album'] = "99394368305"
		var rgx = new RegExp('\{album\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album'])
			if (args['album']) delete args['album']
		}
		if (url.indexOf('[/album]') !== -1) {
			url = url.replace('[/album]', '/' + args['album'])
			if (args['album']) delete args['album']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/album]') !== -1) url = url.replace('[/album]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getAlbumComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{album}/comments'
		args = args || {}
		if (args['album'] == null) args['album'] = "99394368305"
		var rgx = new RegExp('\{album\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album'])
			if (args['album']) delete args['album']
		}
		if (url.indexOf('[/album]') !== -1) {
			url = url.replace('[/album]', '/' + args['album'])
			if (args['album']) delete args['album']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/album]') !== -1) url = url.replace('[/album]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEvent': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventFeed': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/feed'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventNoReply': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/noreply'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventMaybe': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/maybe'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventInvited': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/invited'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventAttending': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/attending'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventDeclined': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/declined'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getEventPicture': function(args, opts) {
		var url = 'https://graph.facebook.com/{event}/picture'
		args = args || {}
		if (args['event'] == null) args['event'] = "331218348435"
		var rgx = new RegExp('\{event\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event'])
			if (args['event']) delete args['event']
		}
		if (url.indexOf('[/event]') !== -1) {
			url = url.replace('[/event]', '/' + args['event'])
			if (args['event']) delete args['event']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/event]') !== -1) url = url.replace('[/event]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getGroup': function(args, opts) {
		var url = 'https://graph.facebook.com/{group}'
		args = args || {}
		if (args['group'] == null) args['group'] = "2204501798"
		var rgx = new RegExp('\{group\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group'])
			if (args['group']) delete args['group']
		}
		if (url.indexOf('[/group]') !== -1) {
			url = url.replace('[/group]', '/' + args['group'])
			if (args['group']) delete args['group']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/group]') !== -1) url = url.replace('[/group]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getGroupFeed': function(args, opts) {
		var url = 'https://graph.facebook.com/{group}/feed'
		args = args || {}
		if (args['group'] == null) args['group'] = "2204501798"
		var rgx = new RegExp('\{group\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group'])
			if (args['group']) delete args['group']
		}
		if (url.indexOf('[/group]') !== -1) {
			url = url.replace('[/group]', '/' + args['group'])
			if (args['group']) delete args['group']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/group]') !== -1) url = url.replace('[/group]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getGroupMembers': function(args, opts) {
		var url = 'https://graph.facebook.com/{group}/members'
		args = args || {}
		if (args['group'] == null) args['group'] = "2204501798"
		var rgx = new RegExp('\{group\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group'])
			if (args['group']) delete args['group']
		}
		if (url.indexOf('[/group]') !== -1) {
			url = url.replace('[/group]', '/' + args['group'])
			if (args['group']) delete args['group']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/group]') !== -1) url = url.replace('[/group]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getGroupPicture': function(args, opts) {
		var url = 'https://graph.facebook.com/{group}/picture'
		args = args || {}
		if (args['group'] == null) args['group'] = "2204501798"
		var rgx = new RegExp('\{group\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['group'])
			if (args['group']) delete args['group']
		}
		if (url.indexOf('[/group]') !== -1) {
			url = url.replace('[/group]', '/' + args['group'])
			if (args['group']) delete args['group']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/group]') !== -1) url = url.replace('[/group]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getLink': function(args, opts) {
		var url = 'https://graph.facebook.com/{link}'
		args = args || {}
		if (args['link'] == null) args['link'] = "114961875194024"
		var rgx = new RegExp('\{link\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link'])
			if (args['link']) delete args['link']
		}
		if (url.indexOf('[/link]') !== -1) {
			url = url.replace('[/link]', '/' + args['link'])
			if (args['link']) delete args['link']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/link]') !== -1) url = url.replace('[/link]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getLinkComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{link}/comments'
		args = args || {}
		if (args['link'] == null) args['link'] = "114961875194024"
		var rgx = new RegExp('\{link\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link'])
			if (args['link']) delete args['link']
		}
		if (url.indexOf('[/link]') !== -1) {
			url = url.replace('[/link]', '/' + args['link'])
			if (args['link']) delete args['link']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/link]') !== -1) url = url.replace('[/link]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getNote': function(args, opts) {
		var url = 'https://graph.facebook.com/{note}'
		args = args || {}
		if (args['note'] == null) args['note'] = "122788341354"
		var rgx = new RegExp('\{note\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/note]') !== -1) {
			url = url.replace('[/note]', '/' + args['note'])
			if (args['note']) delete args['note']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/note]') !== -1) url = url.replace('[/note]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getNoteComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{note}/comments'
		args = args || {}
		if (args['note'] == null) args['note'] = "122788341354"
		var rgx = new RegExp('\{note\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/note]') !== -1) {
			url = url.replace('[/note]', '/' + args['note'])
			if (args['note']) delete args['note']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/note]') !== -1) url = url.replace('[/note]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getNoteLikes': function(args, opts) {
		var url = 'https://graph.facebook.com/{note}/likes'
		args = args || {}
		if (args['note'] == null) args['note'] = "122788341354"
		var rgx = new RegExp('\{note\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['note'])
			if (args['note']) delete args['note']
		}
		if (url.indexOf('[/note]') !== -1) {
			url = url.replace('[/note]', '/' + args['note'])
			if (args['note']) delete args['note']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/note]') !== -1) url = url.replace('[/note]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPage': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageFeed': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/feed'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPagePicture': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/picture'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageTagged': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/tagged'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageLinks': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/links'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPagePhotos': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/photos'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageGroups': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/groups'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageAlbums': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/albums'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageStatuses': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/statuses'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageVideos': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/videos'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageNotes': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/notes'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPagePosts': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/posts'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageEvents': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/events'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPageCheckins': function(args, opts) {
		var url = 'https://graph.facebook.com/{page}/checkins'
		args = args || {}
		if (args['page'] == null) args['page'] = "platform"
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPhoto': function(args, opts) {
		var url = 'https://graph.facebook.com/{photo}'
		args = args || {}
		if (args['photo'] == null) args['photo'] = "98423808305"
		var rgx = new RegExp('\{photo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo'])
			if (args['photo']) delete args['photo']
		}
		if (url.indexOf('[/photo]') !== -1) {
			url = url.replace('[/photo]', '/' + args['photo'])
			if (args['photo']) delete args['photo']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/photo]') !== -1) url = url.replace('[/photo]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPhotoComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{photo}/comments'
		args = args || {}
		if (args['photo'] == null) args['photo'] = "98423808305"
		var rgx = new RegExp('\{photo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo'])
			if (args['photo']) delete args['photo']
		}
		if (url.indexOf('[/photo]') !== -1) {
			url = url.replace('[/photo]', '/' + args['photo'])
			if (args['photo']) delete args['photo']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/photo]') !== -1) url = url.replace('[/photo]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPhotoLikes': function(args, opts) {
		var url = 'https://graph.facebook.com/{photo}/likes'
		args = args || {}
		if (args['photo'] == null) args['photo'] = "98423808305"
		var rgx = new RegExp('\{photo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['photo'])
			if (args['photo']) delete args['photo']
		}
		if (url.indexOf('[/photo]') !== -1) {
			url = url.replace('[/photo]', '/' + args['photo'])
			if (args['photo']) delete args['photo']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/photo]') !== -1) url = url.replace('[/photo]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPost': function(args, opts) {
		var url = 'https://graph.facebook.com/{post}'
		args = args || {}
		if (args['post'] == null) args['post'] = "19292868552_118464504835613"
		var rgx = new RegExp('\{post\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['post'])
			if (args['post']) delete args['post']
		}
		if (url.indexOf('[/post]') !== -1) {
			url = url.replace('[/post]', '/' + args['post'])
			if (args['post']) delete args['post']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/post]') !== -1) url = url.replace('[/post]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getPostComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{post}/comments'
		args = args || {}
		if (args['post'] == null) args['post'] = "19292868552_118464504835613"
		var rgx = new RegExp('\{post\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['post'])
			if (args['post']) delete args['post']
		}
		if (url.indexOf('[/post]') !== -1) {
			url = url.replace('[/post]', '/' + args['post'])
			if (args['post']) delete args['post']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/post]') !== -1) url = url.replace('[/post]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getStatus': function(args, opts) {
		var url = 'https://graph.facebook.com/{status}'
		args = args || {}
		if (args['status'] == null) args['status'] = "367501354973"
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getStatusComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{status}/comments'
		args = args || {}
		if (args['status'] == null) args['status'] = "367501354973"
		var rgx = new RegExp('\{status\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['status'])
			if (args['status']) delete args['status']
		}
		if (url.indexOf('[/status]') !== -1) {
			url = url.replace('[/status]', '/' + args['status'])
			if (args['status']) delete args['status']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/status]') !== -1) url = url.replace('[/status]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUser': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'me': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserSearch': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/home'
		args = args || {}
		if (args['user'] == null) args['user'] = "robertscoble"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserHome': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/home'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserFeed': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/feed'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserTagged': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/tagged'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserPosts': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/posts'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserPicture': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/picture'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserFriends': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/friends'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserActivities': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/activities'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserCheckins': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/checkins'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserInterests': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/interests'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserMusic': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/music'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserBooks': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/books'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserMovies': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/movies'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserTelevision': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/television'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserLikes': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/likes'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserPhotos': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/photos'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserAlbums': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/albums'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserVideos': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/videos'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserGroups': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/groups'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserStatuses': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/statuses'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserLinks': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/links'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserNotes': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/notes'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserEvents': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/events'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserInbox': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/inbox'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserOutbox': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/outbox'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserUpdates': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/updates'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getUserAccounts': function(args, opts) {
		var url = 'https://graph.facebook.com/{user}/accounts'
		args = args || {}
		if (args['user'] == null) args['user'] = "me"
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getVideo': function(args, opts) {
		var url = 'https://graph.facebook.com/{video}'
		args = args || {}
		if (args['video'] == null) args['video'] = "614004947048"
		var rgx = new RegExp('\{video\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['video'])
			if (args['video']) delete args['video']
		}
		if (url.indexOf('[/video]') !== -1) {
			url = url.replace('[/video]', '/' + args['video'])
			if (args['video']) delete args['video']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/video]') !== -1) url = url.replace('[/video]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getVideoComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{video}/comments'
		args = args || {}
		if (args['video'] == null) args['video'] = "614004947048"
		var rgx = new RegExp('\{video\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['video'])
			if (args['video']) delete args['video']
		}
		if (url.indexOf('[/video]') !== -1) {
			url = url.replace('[/video]', '/' + args['video'])
			if (args['video']) delete args['video']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/video]') !== -1) url = url.replace('[/video]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'postProfileIdFeed': function(args, opts) {
		var url = 'https://graph.facebook.com/{profile_id}/feed'
		args = args || {}
		if (args['profile_id'] == null) args['profile_id'] = "me"
		var rgx = new RegExp('\{profile_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (url.indexOf('[/profile_id]') !== -1) {
			url = url.replace('[/profile_id]', '/' + args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		var rgx = new RegExp('\{picture\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['picture'])
			if (args['picture']) delete args['picture']
		}
		if (url.indexOf('[/picture]') !== -1) {
			url = url.replace('[/picture]', '/' + args['picture'])
			if (args['picture']) delete args['picture']
		}
		var rgx = new RegExp('\{link\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link'])
			if (args['link']) delete args['link']
		}
		if (url.indexOf('[/link]') !== -1) {
			url = url.replace('[/link]', '/' + args['link'])
			if (args['link']) delete args['link']
		}
		var rgx = new RegExp('\{caption\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['caption'])
			if (args['caption']) delete args['caption']
		}
		if (url.indexOf('[/caption]') !== -1) {
			url = url.replace('[/caption]', '/' + args['caption'])
			if (args['caption']) delete args['caption']
		}
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		var rgx = new RegExp('\{description\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/description]') !== -1) {
			url = url.replace('[/description]', '/' + args['description'])
			if (args['description']) delete args['description']
		}
		if (url.indexOf('[/profile_id]') !== -1) url = url.replace('[/profile_id]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		if (url.indexOf('[/picture]') !== -1) url = url.replace('[/picture]', '')
		if (url.indexOf('[/link]') !== -1) url = url.replace('[/link]', '')
		if (url.indexOf('[/caption]') !== -1) url = url.replace('[/caption]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		if (url.indexOf('[/description]') !== -1) url = url.replace('[/description]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postPostIdComments': function(args, opts) {
		var url = 'https://graph.facebook.com/{post_id}/comments'
		args = args || {}
		if (args['post_id'] == null) args['post_id'] = "163046417207_399962632207"
		var rgx = new RegExp('\{post_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['post_id'])
			if (args['post_id']) delete args['post_id']
		}
		if (url.indexOf('[/post_id]') !== -1) {
			url = url.replace('[/post_id]', '/' + args['post_id'])
			if (args['post_id']) delete args['post_id']
		}
		if (args['message'] == null) args['message'] = "Test comment, please ignore!"
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/post_id]') !== -1) url = url.replace('[/post_id]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postPostIdLikes': function(args, opts) {
		var url = 'https://graph.facebook.com/{post_id}/likes'
		args = args || {}
		if (args['post_id'] == null) args['post_id'] = "163046417207_399962632207"
		var rgx = new RegExp('\{post_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['post_id'])
			if (args['post_id']) delete args['post_id']
		}
		if (url.indexOf('[/post_id]') !== -1) {
			url = url.replace('[/post_id]', '/' + args['post_id'])
			if (args['post_id']) delete args['post_id']
		}
		if (url.indexOf('[/post_id]') !== -1) url = url.replace('[/post_id]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postProfileIdNotes': function(args, opts) {
		var url = 'https://graph.facebook.com/{profile_id}/notes'
		args = args || {}
		if (args['profile_id'] == null) args['profile_id'] = "me"
		var rgx = new RegExp('\{profile_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (url.indexOf('[/profile_id]') !== -1) {
			url = url.replace('[/profile_id]', '/' + args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		if (args['subject'] == null) args['subject'] = "Test post"
		var rgx = new RegExp('\{subject\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (url.indexOf('[/subject]') !== -1) {
			url = url.replace('[/subject]', '/' + args['subject'])
			if (args['subject']) delete args['subject']
		}
		if (url.indexOf('[/profile_id]') !== -1) url = url.replace('[/profile_id]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		if (url.indexOf('[/subject]') !== -1) url = url.replace('[/subject]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postProfileIdLinks': function(args, opts) {
		var url = 'https://graph.facebook.com/{profile_id}/links'
		args = args || {}
		if (args['profile_id'] == null) args['profile_id'] = "me"
		var rgx = new RegExp('\{profile_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (url.indexOf('[/profile_id]') !== -1) {
			url = url.replace('[/profile_id]', '/' + args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		if (args['link'] == null) throw new Error('link is a required parameter')
		var rgx = new RegExp('\{link\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['link'])
			if (args['link']) delete args['link']
		}
		if (url.indexOf('[/link]') !== -1) {
			url = url.replace('[/link]', '/' + args['link'])
			if (args['link']) delete args['link']
		}
		if (url.indexOf('[/profile_id]') !== -1) url = url.replace('[/profile_id]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		if (url.indexOf('[/link]') !== -1) url = url.replace('[/link]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postProfileIdEvents': function(args, opts) {
		var url = 'https://graph.facebook.com/{profile_id}/events'
		args = args || {}
		if (args['profile_id'] == null) args['profile_id'] = "me"
		var rgx = new RegExp('\{profile_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (url.indexOf('[/profile_id]') !== -1) {
			url = url.replace('[/profile_id]', '/' + args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (url.indexOf('[/profile_id]') !== -1) url = url.replace('[/profile_id]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postEventIdAttending': function(args, opts) {
		var url = 'https://graph.facebook.com/{event_id}/attending'
		args = args || {}
		if (args['event_id'] == null) args['event_id'] = "331218348435"
		var rgx = new RegExp('\{event_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event_id'])
			if (args['event_id']) delete args['event_id']
		}
		if (url.indexOf('[/event_id]') !== -1) {
			url = url.replace('[/event_id]', '/' + args['event_id'])
			if (args['event_id']) delete args['event_id']
		}
		if (url.indexOf('[/event_id]') !== -1) url = url.replace('[/event_id]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postEventIdMaybe': function(args, opts) {
		var url = 'https://graph.facebook.com/{event_id}/maybe'
		args = args || {}
		if (args['event_id'] == null) args['event_id'] = "331218348435"
		var rgx = new RegExp('\{event_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event_id'])
			if (args['event_id']) delete args['event_id']
		}
		if (url.indexOf('[/event_id]') !== -1) {
			url = url.replace('[/event_id]', '/' + args['event_id'])
			if (args['event_id']) delete args['event_id']
		}
		if (url.indexOf('[/event_id]') !== -1) url = url.replace('[/event_id]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postEventIdDeclined': function(args, opts) {
		var url = 'https://graph.facebook.com/{event_id}/declined'
		args = args || {}
		if (args['event_id'] == null) args['event_id'] = "331218348435"
		var rgx = new RegExp('\{event_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['event_id'])
			if (args['event_id']) delete args['event_id']
		}
		if (url.indexOf('[/event_id]') !== -1) {
			url = url.replace('[/event_id]', '/' + args['event_id'])
			if (args['event_id']) delete args['event_id']
		}
		if (url.indexOf('[/event_id]') !== -1) url = url.replace('[/event_id]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postProfileIdAlbums': function(args, opts) {
		var url = 'https://graph.facebook.com/{profile_id}/albums'
		args = args || {}
		if (args['profile_id'] == null) args['profile_id'] = "me"
		var rgx = new RegExp('\{profile_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (url.indexOf('[/profile_id]') !== -1) {
			url = url.replace('[/profile_id]', '/' + args['profile_id'])
			if (args['profile_id']) delete args['profile_id']
		}
		if (args['message'] == null) throw new Error('message is a required parameter')
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		if (args['name'] == null) throw new Error('name is a required parameter')
		var rgx = new RegExp('\{name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/name]') !== -1) {
			url = url.replace('[/name]', '/' + args['name'])
			if (args['name']) delete args['name']
		}
		if (url.indexOf('[/profile_id]') !== -1) url = url.replace('[/profile_id]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		if (url.indexOf('[/name]') !== -1) url = url.replace('[/name]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'postAlbumIdPhotos': function(args, opts) {
		var url = 'https://graph.facebook.com/{album_id}/photos'
		args = args || {}
		if (args['album_id'] == null) args['album_id'] = "me"
		var rgx = new RegExp('\{album_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (url.indexOf('[/album_id]') !== -1) {
			url = url.replace('[/album_id]', '/' + args['album_id'])
			if (args['album_id']) delete args['album_id']
		}
		if (args['message'] == null) args['message'] = "{attachment}"
		var rgx = new RegExp('\{message\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/message]') !== -1) {
			url = url.replace('[/message]', '/' + args['message'])
			if (args['message']) delete args['message']
		}
		if (url.indexOf('[/album_id]') !== -1) url = url.replace('[/album_id]', '')
		if (url.indexOf('[/message]') !== -1) url = url.replace('[/message]', '')
		return http({provider:'facebook',url:url,method:'POST',params:args}, opts)
	},
	'deleteObjectId': function(args, opts) {
		var url = 'https://graph.facebook.com/{object_id}'
		args = args || {}
		if (args['object_id'] == null) args['object_id'] = "OBJECTID"
		var rgx = new RegExp('\{object_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['object_id'])
			if (args['object_id']) delete args['object_id']
		}
		if (url.indexOf('[/object_id]') !== -1) {
			url = url.replace('[/object_id]', '/' + args['object_id'])
			if (args['object_id']) delete args['object_id']
		}
		if (url.indexOf('[/object_id]') !== -1) url = url.replace('[/object_id]', '')
		return http({provider:'facebook',url:url,method:'DELETE',params:args}, opts)
	},
	'deletePostIdLikes': function(args, opts) {
		var url = 'https://graph.facebook.com/{post_id}/likes'
		args = args || {}
		if (args['post_id'] == null) args['post_id'] = "OBJECTID"
		var rgx = new RegExp('\{post_id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['post_id'])
			if (args['post_id']) delete args['post_id']
		}
		if (url.indexOf('[/post_id]') !== -1) {
			url = url.replace('[/post_id]', '/' + args['post_id'])
			if (args['post_id']) delete args['post_id']
		}
		if (url.indexOf('[/post_id]') !== -1) url = url.replace('[/post_id]', '')
		return http({provider:'facebook',url:url,method:'DELETE',params:args}, opts)
	},
	'getCheckin': function(args, opts) {
		var url = 'https://graph.facebook.com/{checkin}'
		args = args || {}
		if (args['checkin'] == null) args['checkin'] = "robertscoble"
		var rgx = new RegExp('\{checkin\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['checkin'])
			if (args['checkin']) delete args['checkin']
		}
		if (url.indexOf('[/checkin]') !== -1) {
			url = url.replace('[/checkin]', '/' + args['checkin'])
			if (args['checkin']) delete args['checkin']
		}
		var rgx = new RegExp('\{metadata\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/metadata]') !== -1) {
			url = url.replace('[/metadata]', '/' + args['metadata'])
			if (args['metadata']) delete args['metadata']
		}
		if (url.indexOf('[/checkin]') !== -1) url = url.replace('[/checkin]', '')
		if (url.indexOf('[/metadata]') !== -1) url = url.replace('[/metadata]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getApplication': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'getApplicationFeed': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/feed'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationPosts': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/posts'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationPicture': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/picture'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{type\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/type]') !== -1) {
			url = url.replace('[/type]', '/' + args['type'])
			if (args['type']) delete args['type']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/type]') !== -1) url = url.replace('[/type]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationTagged': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/tagged'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationLinks': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/links'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationPhotos': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/photos'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationAlbums': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/albums'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationStatuses': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/statuses'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationVideos': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/videos'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationNotes': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/notes'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationEvents': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/events'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	},
	'getApplicationInsights': function(args, opts) {
		var url = 'https://graph.facebook.com/{application}/insights'
		args = args || {}
		if (args['application'] == null) args['application'] = "2439131959"
		var rgx = new RegExp('\{application\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['application'])
			if (args['application']) delete args['application']
		}
		if (url.indexOf('[/application]') !== -1) {
			url = url.replace('[/application]', '/' + args['application'])
			if (args['application']) delete args['application']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		var rgx = new RegExp('\{until\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['until'])
			if (args['until']) delete args['until']
		}
		if (url.indexOf('[/until]') !== -1) {
			url = url.replace('[/until]', '/' + args['until'])
			if (args['until']) delete args['until']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/application]') !== -1) url = url.replace('[/application]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/until]') !== -1) url = url.replace('[/until]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		return http({provider:'facebook',url:url,method:'GET',params:args}, opts)
	}
})