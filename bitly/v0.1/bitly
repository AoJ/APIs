/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'bitly'})},
	'shorten': function(args, opts) {
		var url = 'http://api.bitly.com/v3/shorten'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['longUrl'] == null) throw new Error('longUrl is a required parameter')
		var rgx = new RegExp('\{longUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['longUrl'])
			if (args['longUrl']) delete args['longUrl']
		}
		if (url.indexOf('[/longUrl]') !== -1) {
			url = url.replace('[/longUrl]', '/' + args['longUrl'])
			if (args['longUrl']) delete args['longUrl']
		}
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/longUrl]') !== -1) url = url.replace('[/longUrl]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'expand': function(args, opts) {
		var url = 'http://api.bitly.com/v3/expand'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'bitlyProDomain': function(args, opts) {
		var url = 'http://api.bitly.com/v3/bitly_pro_domain'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['domain'] == null) throw new Error('domain is a required parameter')
		var rgx = new RegExp('\{domain\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/domain]') !== -1) {
			url = url.replace('[/domain]', '/' + args['domain'])
			if (args['domain']) delete args['domain']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/domain]') !== -1) url = url.replace('[/domain]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'lookup': function(args, opts) {
		var url = 'http://api.bitly.com/v3/lookup'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['url'] == null) throw new Error('url is a required parameter')
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'info': function(args, opts) {
		var url = 'http://api.bitly.com/v3/info'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'validate': function(args, opts) {
		var url = 'http://api.bitly.com/v3/validate'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (args['x_login'] == null) throw new Error('x_login is a required parameter')
		var rgx = new RegExp('\{x_login\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['x_login'])
			if (args['x_login']) delete args['x_login']
		}
		if (url.indexOf('[/x_login]') !== -1) {
			url = url.replace('[/x_login]', '/' + args['x_login'])
			if (args['x_login']) delete args['x_login']
		}
		if (args['x_apiKey'] == null) throw new Error('x_apiKey is a required parameter')
		var rgx = new RegExp('\{x_apiKey\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['x_apiKey'])
			if (args['x_apiKey']) delete args['x_apiKey']
		}
		if (url.indexOf('[/x_apiKey]') !== -1) {
			url = url.replace('[/x_apiKey]', '/' + args['x_apiKey'])
			if (args['x_apiKey']) delete args['x_apiKey']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/x_login]') !== -1) url = url.replace('[/x_login]', '')
		if (url.indexOf('[/x_apiKey]') !== -1) url = url.replace('[/x_apiKey]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'clicks': function(args, opts) {
		var url = 'http://api.bitly.com/v3/clicks'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'referrers': function(args, opts) {
		var url = 'http://api.bitly.com/v3/referrers'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'countries': function(args, opts) {
		var url = 'http://api.bitly.com/v3/countries'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'clicksByMinute': function(args, opts) {
		var url = 'http://api.bitly.com/v3/clicks_by_minute'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'clicksByDay': function(args, opts) {
		var url = 'http://api.bitly.com/v3/clicks_by_day'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{shortUrl\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		if (url.indexOf('[/shortUrl]') !== -1) {
			url = url.replace('[/shortUrl]', '/' + args['shortUrl'])
			if (args['shortUrl']) delete args['shortUrl']
		}
		var rgx = new RegExp('\{hash\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['hash'])
			if (args['hash']) delete args['hash']
		}
		if (url.indexOf('[/hash]') !== -1) {
			url = url.replace('[/hash]', '/' + args['hash'])
			if (args['hash']) delete args['hash']
		}
		var rgx = new RegExp('\{days\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/days]') !== -1) {
			url = url.replace('[/days]', '/' + args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/shortUrl]') !== -1) url = url.replace('[/shortUrl]', '')
		if (url.indexOf('[/hash]') !== -1) url = url.replace('[/hash]', '')
		if (url.indexOf('[/days]') !== -1) url = url.replace('[/days]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'userClicks': function(args, opts) {
		var url = 'https://api-ssl.bitly.com/v3/user/clicks'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{days\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/days]') !== -1) {
			url = url.replace('[/days]', '/' + args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/days]') !== -1) url = url.replace('[/days]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'userReferrers': function(args, opts) {
		var url = 'https://api-ssl.bitly.com/v3/user/referrers'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{days\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/days]') !== -1) {
			url = url.replace('[/days]', '/' + args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/days]') !== -1) url = url.replace('[/days]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'userCountries': function(args, opts) {
		var url = 'https://api-ssl.bitly.com/v3/user/countries'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		var rgx = new RegExp('\{days\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/days]') !== -1) {
			url = url.replace('[/days]', '/' + args['days'])
			if (args['days']) delete args['days']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		if (url.indexOf('[/days]') !== -1) url = url.replace('[/days]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	},
	'userRealtimeLinks': function(args, opts) {
		var url = 'https://api-ssl.bitly.com/v3/user/realtime_links'
		args = args || {}
		var rgx = new RegExp('\{format\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) {
			url = url.replace('[/format]', '/' + args['format'])
			if (args['format']) delete args['format']
		}
		if (url.indexOf('[/format]') !== -1) url = url.replace('[/format]', '')
		return http({provider:'bitly',url:url,method:'GET',params:args}, opts)
	}
})