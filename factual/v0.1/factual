/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'factual'})},
	'read': function(args, opts) {
		var url = 'http://api.v3.factual.com/t/{table_name}'
		args = args || {}
		if (args['table_name'] == null) args['table_name'] = "places-v3"
		var rgx = new RegExp('\{table_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['table_name'])
			if (args['table_name']) delete args['table_name']
		}
		if (url.indexOf('[/table_name]') !== -1) {
			url = url.replace('[/table_name]', '/' + args['table_name'])
			if (args['table_name']) delete args['table_name']
		}
		var rgx = new RegExp('\{filters\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) {
			url = url.replace('[/filters]', '/' + args['filters'])
			if (args['filters']) delete args['filters']
		}
		var rgx = new RegExp('\{include_count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_count'])
			if (args['include_count']) delete args['include_count']
		}
		if (url.indexOf('[/include_count]') !== -1) {
			url = url.replace('[/include_count]', '/' + args['include_count'])
			if (args['include_count']) delete args['include_count']
		}
		var rgx = new RegExp('\{geo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (url.indexOf('[/geo]') !== -1) {
			url = url.replace('[/geo]', '/' + args['geo'])
			if (args['geo']) delete args['geo']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{select\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['select'])
			if (args['select']) delete args['select']
		}
		if (url.indexOf('[/select]') !== -1) {
			url = url.replace('[/select]', '/' + args['select'])
			if (args['select']) delete args['select']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/table_name]') !== -1) url = url.replace('[/table_name]', '')
		if (url.indexOf('[/filters]') !== -1) url = url.replace('[/filters]', '')
		if (url.indexOf('[/include_count]') !== -1) url = url.replace('[/include_count]', '')
		if (url.indexOf('[/geo]') !== -1) url = url.replace('[/geo]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		if (url.indexOf('[/select]') !== -1) url = url.replace('[/select]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'facets': function(args, opts) {
		var url = 'http://api.v3.factual.com/t/{table_name}/facets'
		args = args || {}
		if (args['table_name'] == null) args['table_name'] = "restaurants-us"
		var rgx = new RegExp('\{table_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['table_name'])
			if (args['table_name']) delete args['table_name']
		}
		if (url.indexOf('[/table_name]') !== -1) {
			url = url.replace('[/table_name]', '/' + args['table_name'])
			if (args['table_name']) delete args['table_name']
		}
		if (args['select'] == null) args['select'] = "locality,region"
		var rgx = new RegExp('\{select\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['select'])
			if (args['select']) delete args['select']
		}
		if (url.indexOf('[/select]') !== -1) {
			url = url.replace('[/select]', '/' + args['select'])
			if (args['select']) delete args['select']
		}
		var rgx = new RegExp('\{filters\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) {
			url = url.replace('[/filters]', '/' + args['filters'])
			if (args['filters']) delete args['filters']
		}
		var rgx = new RegExp('\{geo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (url.indexOf('[/geo]') !== -1) {
			url = url.replace('[/geo]', '/' + args['geo'])
			if (args['geo']) delete args['geo']
		}
		var rgx = new RegExp('\{include_count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_count'])
			if (args['include_count']) delete args['include_count']
		}
		if (url.indexOf('[/include_count]') !== -1) {
			url = url.replace('[/include_count]', '/' + args['include_count'])
			if (args['include_count']) delete args['include_count']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{min_count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min_count'])
			if (args['min_count']) delete args['min_count']
		}
		if (url.indexOf('[/min_count]') !== -1) {
			url = url.replace('[/min_count]', '/' + args['min_count'])
			if (args['min_count']) delete args['min_count']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/table_name]') !== -1) url = url.replace('[/table_name]', '')
		if (url.indexOf('[/select]') !== -1) url = url.replace('[/select]', '')
		if (url.indexOf('[/filters]') !== -1) url = url.replace('[/filters]', '')
		if (url.indexOf('[/geo]') !== -1) url = url.replace('[/geo]', '')
		if (url.indexOf('[/include_count]') !== -1) url = url.replace('[/include_count]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/min_count]') !== -1) url = url.replace('[/min_count]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'schema': function(args, opts) {
		var url = 'http://api.v3.factual.com/t/{table_name}/schema'
		args = args || {}
		if (args['table_name'] == null) args['table_name'] = "restaurants-us"
		var rgx = new RegExp('\{table_name\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['table_name'])
			if (args['table_name']) delete args['table_name']
		}
		if (url.indexOf('[/table_name]') !== -1) {
			url = url.replace('[/table_name]', '/' + args['table_name'])
			if (args['table_name']) delete args['table_name']
		}
		if (url.indexOf('[/table_name]') !== -1) url = url.replace('[/table_name]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'multi': function(args, opts) {
		var url = 'http://api.v3.factual.com/multi'
		args = args || {}
		if (args['queries'] == null) throw new Error('queries is a required parameter')
		var rgx = new RegExp('\{queries\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['queries'])
			if (args['queries']) delete args['queries']
		}
		if (url.indexOf('[/queries]') !== -1) {
			url = url.replace('[/queries]', '/' + args['queries'])
			if (args['queries']) delete args['queries']
		}
		if (url.indexOf('[/queries]') !== -1) url = url.replace('[/queries]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'geocode': function(args, opts) {
		var url = 'http://api.v3.factual.com/places/geocode'
		args = args || {}
		if (args['geo'] == null) throw new Error('geo is a required parameter')
		var rgx = new RegExp('\{geo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (url.indexOf('[/geo]') !== -1) {
			url = url.replace('[/geo]', '/' + args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (url.indexOf('[/geo]') !== -1) url = url.replace('[/geo]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'geopulse': function(args, opts) {
		var url = 'http://api.v3.factual.com/places/geopulse'
		args = args || {}
		if (args['geo'] == null) throw new Error('geo is a required parameter')
		var rgx = new RegExp('\{geo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (url.indexOf('[/geo]') !== -1) {
			url = url.replace('[/geo]', '/' + args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (args['select'] == null) throw new Error('select is a required parameter')
		var rgx = new RegExp('\{select\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['select'])
			if (args['select']) delete args['select']
		}
		if (url.indexOf('[/select]') !== -1) {
			url = url.replace('[/select]', '/' + args['select'])
			if (args['select']) delete args['select']
		}
		if (url.indexOf('[/geo]') !== -1) url = url.replace('[/geo]', '')
		if (url.indexOf('[/select]') !== -1) url = url.replace('[/select]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'match': function(args, opts) {
		var url = 'http://api.v3.factual.com/places/match'
		args = args || {}
		if (args['values'] == null) args['values'] = "{'name':'McDonalds','address':'10451 Santa Monica Blvd','locality':'Los Angeles','region':'CA'}"
		var rgx = new RegExp('\{values\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/values]') !== -1) {
			url = url.replace('[/values]', '/' + args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/values]') !== -1) url = url.replace('[/values]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'monetize': function(args, opts) {
		var url = 'http://api.v3.factual.com/places/monetize'
		args = args || {}
		var rgx = new RegExp('\{filters\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) {
			url = url.replace('[/filters]', '/' + args['filters'])
			if (args['filters']) delete args['filters']
		}
		var rgx = new RegExp('\{include_count\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include_count'])
			if (args['include_count']) delete args['include_count']
		}
		if (url.indexOf('[/include_count]') !== -1) {
			url = url.replace('[/include_count]', '/' + args['include_count'])
			if (args['include_count']) delete args['include_count']
		}
		var rgx = new RegExp('\{geo\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['geo'])
			if (args['geo']) delete args['geo']
		}
		if (url.indexOf('[/geo]') !== -1) {
			url = url.replace('[/geo]', '/' + args['geo'])
			if (args['geo']) delete args['geo']
		}
		var rgx = new RegExp('\{limit\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['limit'])
			if (args['limit']) delete args['limit']
		}
		if (url.indexOf('[/limit]') !== -1) {
			url = url.replace('[/limit]', '/' + args['limit'])
			if (args['limit']) delete args['limit']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{offset\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['offset'])
			if (args['offset']) delete args['offset']
		}
		if (url.indexOf('[/offset]') !== -1) {
			url = url.replace('[/offset]', '/' + args['offset'])
			if (args['offset']) delete args['offset']
		}
		var rgx = new RegExp('\{select\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['select'])
			if (args['select']) delete args['select']
		}
		if (url.indexOf('[/select]') !== -1) {
			url = url.replace('[/select]', '/' + args['select'])
			if (args['select']) delete args['select']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/filters]') !== -1) url = url.replace('[/filters]', '')
		if (url.indexOf('[/include_count]') !== -1) url = url.replace('[/include_count]', '')
		if (url.indexOf('[/geo]') !== -1) url = url.replace('[/geo]', '')
		if (url.indexOf('[/limit]') !== -1) url = url.replace('[/limit]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/offset]') !== -1) url = url.replace('[/offset]', '')
		if (url.indexOf('[/select]') !== -1) url = url.replace('[/select]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	},
	'resolve': function(args, opts) {
		var url = 'http://api.v3.factual.com/places/resolve'
		args = args || {}
		if (args['values'] == null) args['values'] = "{'name':'McDonalds','address':'10451 Santa Monica Blvd','locality':'Los Angeles','region':'CA'}"
		var rgx = new RegExp('\{values\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['values'])
			if (args['values']) delete args['values']
		}
		if (url.indexOf('[/values]') !== -1) {
			url = url.replace('[/values]', '/' + args['values'])
			if (args['values']) delete args['values']
		}
		var rgx = new RegExp('\{debug\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['debug'])
			if (args['debug']) delete args['debug']
		}
		if (url.indexOf('[/debug]') !== -1) {
			url = url.replace('[/debug]', '/' + args['debug'])
			if (args['debug']) delete args['debug']
		}
		if (url.indexOf('[/values]') !== -1) url = url.replace('[/values]', '')
		if (url.indexOf('[/debug]') !== -1) url = url.replace('[/debug]', '')
		return http({provider:'factual',url:url,method:'GET',params:args}, opts)
	}
})