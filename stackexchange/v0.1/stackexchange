/* 
# Webshell APIs
# Copyright (C) 2013 Webshell SAS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

({
	auth:function(){return auth({provider:'stackexchange'})},
	'answersList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//answers'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'answersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//answers/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'answersCommentsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//answers/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'badgesList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//badges'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'badgesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//badges/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'namedBadgesList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//badges/name'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'recipientsBadgesList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//badges/recipients'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'recipientsBadgesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//badges/{id}/recipients'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagBadgesList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//badges/tags'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'commentsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//comments'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'commentsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//comments/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'deleteComment': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//comments/{id}/delete'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{preview\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/preview]') !== -1) {
			url = url.replace('[/preview]', '/' + args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/preview]') !== -1) url = url.replace('[/preview]', '')
		return http({provider:'stackexchange',url:url,method:'DELETE',params:args, auth:'oauth2'}, opts)
	},
	'editComment': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//comments/{id}/edit'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{preview\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/preview]') !== -1) {
			url = url.replace('[/preview]', '/' + args['preview'])
			if (args['preview']) delete args['preview']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/preview]') !== -1) url = url.replace('[/preview]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		return http({provider:'stackexchange',url:url,method:'POST',params:args, auth:'oauth2'}, opts)
	},
	'eventsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//events'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'siteInfo': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//info'
		args = args || {}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'postsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//posts'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'postsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//posts/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'commentsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//posts/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'newComment': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//posts/{id}/comments/add'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{preview\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/preview]') !== -1) {
			url = url.replace('[/preview]', '/' + args['preview'])
			if (args['preview']) delete args['preview']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/preview]') !== -1) url = url.replace('[/preview]', '')
		return http({provider:'stackexchange',url:url,method:'POST',params:args, auth:'oauth2'}, opts)
	},
	'postsRevisions': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//posts/{id}/revisions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'postsSuggestedEdits': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//posts/{id}/suggested-edits'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'error': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//errors'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'error': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//errors/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'privilegesList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//privileges'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'questionsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'questionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'questionAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/{id}/answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'questionCommentsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'linkedQuestionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/{id}/linked'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'relatedQuestionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/{id}/related'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'questionTimelinesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/{id}/timeline'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'featuredQuestionsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/featured'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'unansweredQuestionsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/unanswered'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'questionsWithNoAnswersList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//questions/no-answers'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'revisionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//revisions/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'search': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//search'
		args = args || {}
		var rgx = new RegExp('\{nottagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		if (url.indexOf('[/nottagged]') !== -1) {
			url = url.replace('[/nottagged]', '/' + args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{intitle\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['intitle'])
			if (args['intitle']) delete args['intitle']
		}
		if (url.indexOf('[/intitle]') !== -1) {
			url = url.replace('[/intitle]', '/' + args['intitle'])
			if (args['intitle']) delete args['intitle']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/nottagged]') !== -1) url = url.replace('[/nottagged]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/intitle]') !== -1) url = url.replace('[/intitle]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'advancedSearch': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//search/advanced'
		args = args || {}
		var rgx = new RegExp('\{nottagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		if (url.indexOf('[/nottagged]') !== -1) {
			url = url.replace('[/nottagged]', '/' + args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		var rgx = new RegExp('\{q\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['q'])
			if (args['q']) delete args['q']
		}
		if (url.indexOf('[/q]') !== -1) {
			url = url.replace('[/q]', '/' + args['q'])
			if (args['q']) delete args['q']
		}
		var rgx = new RegExp('\{accepted\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accepted'])
			if (args['accepted']) delete args['accepted']
		}
		if (url.indexOf('[/accepted]') !== -1) {
			url = url.replace('[/accepted]', '/' + args['accepted'])
			if (args['accepted']) delete args['accepted']
		}
		var rgx = new RegExp('\{answers\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['answers'])
			if (args['answers']) delete args['answers']
		}
		if (url.indexOf('[/answers]') !== -1) {
			url = url.replace('[/answers]', '/' + args['answers'])
			if (args['answers']) delete args['answers']
		}
		var rgx = new RegExp('\{body\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['body'])
			if (args['body']) delete args['body']
		}
		if (url.indexOf('[/body]') !== -1) {
			url = url.replace('[/body]', '/' + args['body'])
			if (args['body']) delete args['body']
		}
		var rgx = new RegExp('\{closed\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['closed'])
			if (args['closed']) delete args['closed']
		}
		if (url.indexOf('[/closed]') !== -1) {
			url = url.replace('[/closed]', '/' + args['closed'])
			if (args['closed']) delete args['closed']
		}
		var rgx = new RegExp('\{migrated\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['migrated'])
			if (args['migrated']) delete args['migrated']
		}
		if (url.indexOf('[/migrated]') !== -1) {
			url = url.replace('[/migrated]', '/' + args['migrated'])
			if (args['migrated']) delete args['migrated']
		}
		var rgx = new RegExp('\{notice\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['notice'])
			if (args['notice']) delete args['notice']
		}
		if (url.indexOf('[/notice]') !== -1) {
			url = url.replace('[/notice]', '/' + args['notice'])
			if (args['notice']) delete args['notice']
		}
		var rgx = new RegExp('\{user\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['user'])
			if (args['user']) delete args['user']
		}
		if (url.indexOf('[/user]') !== -1) {
			url = url.replace('[/user]', '/' + args['user'])
			if (args['user']) delete args['user']
		}
		var rgx = new RegExp('\{url\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['url'])
			if (args['url']) delete args['url']
		}
		if (url.indexOf('[/url]') !== -1) {
			url = url.replace('[/url]', '/' + args['url'])
			if (args['url']) delete args['url']
		}
		var rgx = new RegExp('\{views\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['views'])
			if (args['views']) delete args['views']
		}
		if (url.indexOf('[/views]') !== -1) {
			url = url.replace('[/views]', '/' + args['views'])
			if (args['views']) delete args['views']
		}
		var rgx = new RegExp('\{wiki\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['wiki'])
			if (args['wiki']) delete args['wiki']
		}
		if (url.indexOf('[/wiki]') !== -1) {
			url = url.replace('[/wiki]', '/' + args['wiki'])
			if (args['wiki']) delete args['wiki']
		}
		if (url.indexOf('[/nottagged]') !== -1) url = url.replace('[/nottagged]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		if (url.indexOf('[/q]') !== -1) url = url.replace('[/q]', '')
		if (url.indexOf('[/accepted]') !== -1) url = url.replace('[/accepted]', '')
		if (url.indexOf('[/answers]') !== -1) url = url.replace('[/answers]', '')
		if (url.indexOf('[/body]') !== -1) url = url.replace('[/body]', '')
		if (url.indexOf('[/closed]') !== -1) url = url.replace('[/closed]', '')
		if (url.indexOf('[/migrated]') !== -1) url = url.replace('[/migrated]', '')
		if (url.indexOf('[/notice]') !== -1) url = url.replace('[/notice]', '')
		if (url.indexOf('[/user]') !== -1) url = url.replace('[/user]', '')
		if (url.indexOf('[/url]') !== -1) url = url.replace('[/url]', '')
		if (url.indexOf('[/views]') !== -1) url = url.replace('[/views]', '')
		if (url.indexOf('[/wiki]') !== -1) url = url.replace('[/wiki]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'similar': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//similar'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{nottagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		if (url.indexOf('[/nottagged]') !== -1) {
			url = url.replace('[/nottagged]', '/' + args['nottagged'])
			if (args['nottagged']) delete args['nottagged']
		}
		var rgx = new RegExp('\{tagged\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (url.indexOf('[/tagged]') !== -1) {
			url = url.replace('[/tagged]', '/' + args['tagged'])
			if (args['tagged']) delete args['tagged']
		}
		if (args['title'] == null) throw new Error('title is a required parameter')
		var rgx = new RegExp('\{title\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['title'])
			if (args['title']) delete args['title']
		}
		if (url.indexOf('[/title]') !== -1) {
			url = url.replace('[/title]', '/' + args['title'])
			if (args['title']) delete args['title']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/nottagged]') !== -1) url = url.replace('[/nottagged]', '')
		if (url.indexOf('[/tagged]') !== -1) url = url.replace('[/tagged]', '')
		if (url.indexOf('[/title]') !== -1) url = url.replace('[/title]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'suggestedEdit': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//suggested-edits'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'suggestedEditGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//suggested-edits/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagInfoGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tags}/info'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagModeratorOnlyList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/moderator-only'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagRequiredList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/required'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagSynonymsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/synonyms'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagFaqGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tags}/faq'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagRelatedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tags}/related'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagSynonymsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tags}/synonyms'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'tagWikisGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tags}/wikis'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'topAnswerersInTagGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tag}/top-answerers/{period}'
		args = args || {}
		if (args['period'] == null) throw new Error('period is a required parameter')
		var rgx = new RegExp('\{period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['period'])
			if (args['period']) delete args['period']
		}
		if (url.indexOf('[/period]') !== -1) {
			url = url.replace('[/period]', '/' + args['period'])
			if (args['period']) delete args['period']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/period]') !== -1) url = url.replace('[/period]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'topAskersInTagGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//tags/{tag}/top-askers/{period}'
		args = args || {}
		if (args['period'] == null) throw new Error('period is a required parameter')
		var rgx = new RegExp('\{period\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['period'])
			if (args['period']) delete args['period']
		}
		if (url.indexOf('[/period]') !== -1) {
			url = url.replace('[/period]', '/' + args['period'])
			if (args['period']) delete args['period']
		}
		if (args['tag'] == null) throw new Error('tag is a required parameter')
		var rgx = new RegExp('\{tag\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tag'])
			if (args['tag']) delete args['tag']
		}
		if (url.indexOf('[/tag]') !== -1) {
			url = url.replace('[/tag]', '/' + args['tag'])
			if (args['tag']) delete args['tag']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/period]') !== -1) url = url.replace('[/period]', '')
		if (url.indexOf('[/tag]') !== -1) url = url.replace('[/tag]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'usersList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users'
		args = args || {}
		var rgx = new RegExp('\{filter\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filter'])
			if (args['filter']) delete args['filter']
		}
		if (url.indexOf('[/filter]') !== -1) {
			url = url.replace('[/filter]', '/' + args['filter'])
			if (args['filter']) delete args['filter']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		var rgx = new RegExp('\{inname\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (url.indexOf('[/inname]') !== -1) {
			url = url.replace('[/inname]', '/' + args['inname'])
			if (args['inname']) delete args['inname']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/filter]') !== -1) url = url.replace('[/filter]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/inname]') !== -1) url = url.replace('[/inname]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'usersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/answers'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userBadgesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/badges'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meBadgesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/badges'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userCommentsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/comments'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meCommentsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/comments'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userCommentsToUserGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/comments/{toid}'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['toid'] == null) throw new Error('toid is a required parameter')
		var rgx = new RegExp('\{toid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['toid'])
			if (args['toid']) delete args['toid']
		}
		if (url.indexOf('[/toid]') !== -1) {
			url = url.replace('[/toid]', '/' + args['toid'])
			if (args['toid']) delete args['toid']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/toid]') !== -1) url = url.replace('[/toid]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meCommentsToUserGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/comments/{toid}'
		args = args || {}
		if (args['toid'] == null) throw new Error('toid is a required parameter')
		var rgx = new RegExp('\{toid\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['toid'])
			if (args['toid']) delete args['toid']
		}
		if (url.indexOf('[/toid]') !== -1) {
			url = url.replace('[/toid]', '/' + args['toid'])
			if (args['toid']) delete args['toid']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/toid]') !== -1) url = url.replace('[/toid]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userFavoritesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/favorites'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meFavoritesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/favorites'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userMentionedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/mentioned'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meMentionedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/mentioned'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userMergesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/merges'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meMergesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/merges'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userNotificationsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/notifications'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meNotificationsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/notifications'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userNotificationsUnreadGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/notifications/unread'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meNotificationsUnreadGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/notifications/unread'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userPrivilegesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/privileges'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'mePrivilegesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/privileges'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userQuestionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/questions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meQuestionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/questions'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userQuestionsFeaturedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/questions/featured'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meQuestionsFeaturedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/questions/featured'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userQuestionsNoAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/questions/no-answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meQuestionsNoAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/questions/no-answers'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userQuestionsUnacceptedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/questions/unaccepted'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meQuestionsUnacceptedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/questions/unaccepted'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userQuestionsUnansweredGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/questions/unanswered'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meQuestionsUnansweredGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/questions/unanswered'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userReputationGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/reputation'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meReputationGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/reputation'
		args = args || {}
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userReputationHistoryGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/reputation-history'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meReputationHistoryGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/reputation-history'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userFullReputationHistoryGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/reputation-history/full'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'meFullReputationHistoryGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/reputation-history/full'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'userSuggestedEditGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/suggested-edits'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meSuggestedEditGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/suggested-edits'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userTagsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/tags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meTagsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/tags'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userTopTaggedAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/tags/{tags}/top-answers'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meTopTaggedAnswersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/tags/{tags}/top-answers'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userTopTaggedQuestionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/tags/{tags}/top-questions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meTopTaggedQuestionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/tags/{tags}/top-questions'
		args = args || {}
		if (args['tags'] == null) throw new Error('tags is a required parameter')
		var rgx = new RegExp('\{tags\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['tags'])
			if (args['tags']) delete args['tags']
		}
		if (url.indexOf('[/tags]') !== -1) {
			url = url.replace('[/tags]', '/' + args['tags'])
			if (args['tags']) delete args['tags']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/tags]') !== -1) url = url.replace('[/tags]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userTimelinesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/timeline'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meTimelinesGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/timeline'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userTopAnswerTagsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/top-answer-tags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meTopAnswerTagsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/top-answer-tags'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userTopQuestionTagsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/top-question-tags'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meTopQuestionTagsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/top-question-tags'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'userWritePermissionGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/write-permissions'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meWritePermissionsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/write-permissions'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	},
	'moderatorsGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/moderators'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'moderatorsElectedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/moderators/elected'
		args = args || {}
		var rgx = new RegExp('\{fromdate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		if (url.indexOf('[/fromdate]') !== -1) {
			url = url.replace('[/fromdate]', '/' + args['fromdate'])
			if (args['fromdate']) delete args['fromdate']
		}
		var rgx = new RegExp('\{max\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['max'])
			if (args['max']) delete args['max']
		}
		if (url.indexOf('[/max]') !== -1) {
			url = url.replace('[/max]', '/' + args['max'])
			if (args['max']) delete args['max']
		}
		var rgx = new RegExp('\{min\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['min'])
			if (args['min']) delete args['min']
		}
		if (url.indexOf('[/min]') !== -1) {
			url = url.replace('[/min]', '/' + args['min'])
			if (args['min']) delete args['min']
		}
		var rgx = new RegExp('\{order\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['order'])
			if (args['order']) delete args['order']
		}
		if (url.indexOf('[/order]') !== -1) {
			url = url.replace('[/order]', '/' + args['order'])
			if (args['order']) delete args['order']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{sort\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['sort'])
			if (args['sort']) delete args['sort']
		}
		if (url.indexOf('[/sort]') !== -1) {
			url = url.replace('[/sort]', '/' + args['sort'])
			if (args['sort']) delete args['sort']
		}
		var rgx = new RegExp('\{todate\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (url.indexOf('[/todate]') !== -1) {
			url = url.replace('[/todate]', '/' + args['todate'])
			if (args['todate']) delete args['todate']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/fromdate]') !== -1) url = url.replace('[/fromdate]', '')
		if (url.indexOf('[/max]') !== -1) url = url.replace('[/max]', '')
		if (url.indexOf('[/min]') !== -1) url = url.replace('[/min]', '')
		if (url.indexOf('[/order]') !== -1) url = url.replace('[/order]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/sort]') !== -1) url = url.replace('[/sort]', '')
		if (url.indexOf('[/todate]') !== -1) url = url.replace('[/todate]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userInboxGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/inbox'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'meInboxGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/inbox'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'userInboxUnreadGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/inbox/unread'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'meInboxUnreadGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/inbox/unread'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (args['site'] == null) args['site'] = "stackoverflow"
		var rgx = new RegExp('\{site\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['site'])
			if (args['site']) delete args['site']
		}
		if (url.indexOf('[/site]') !== -1) {
			url = url.replace('[/site]', '/' + args['site'])
			if (args['site']) delete args['site']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/site]') !== -1) url = url.replace('[/site]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'accessTokensInvalidateGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//access-tokens/{accessTokens}/invalidate'
		args = args || {}
		if (args['accessTokens'] == null) throw new Error('accessTokens is a required parameter')
		var rgx = new RegExp('\{accessTokens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accessTokens'])
			if (args['accessTokens']) delete args['accessTokens']
		}
		if (url.indexOf('[/accessTokens]') !== -1) {
			url = url.replace('[/accessTokens]', '/' + args['accessTokens'])
			if (args['accessTokens']) delete args['accessTokens']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/accessTokens]') !== -1) url = url.replace('[/accessTokens]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'accessTokensGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//access-tokens/{accessTokens}'
		args = args || {}
		if (args['accessTokens'] == null) throw new Error('accessTokens is a required parameter')
		var rgx = new RegExp('\{accessTokens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accessTokens'])
			if (args['accessTokens']) delete args['accessTokens']
		}
		if (url.indexOf('[/accessTokens]') !== -1) {
			url = url.replace('[/accessTokens]', '/' + args['accessTokens'])
			if (args['accessTokens']) delete args['accessTokens']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/accessTokens]') !== -1) url = url.replace('[/accessTokens]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'appsDeAuthenticateGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//apps/{accessTokens}/de-authenticate'
		args = args || {}
		if (args['accessTokens'] == null) throw new Error('accessTokens is a required parameter')
		var rgx = new RegExp('\{accessTokens\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['accessTokens'])
			if (args['accessTokens']) delete args['accessTokens']
		}
		if (url.indexOf('[/accessTokens]') !== -1) {
			url = url.replace('[/accessTokens]', '/' + args['accessTokens'])
			if (args['accessTokens']) delete args['accessTokens']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/accessTokens]') !== -1) url = url.replace('[/accessTokens]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'filtersCreate': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//filters/create'
		args = args || {}
		var rgx = new RegExp('\{include\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['include'])
			if (args['include']) delete args['include']
		}
		if (url.indexOf('[/include]') !== -1) {
			url = url.replace('[/include]', '/' + args['include'])
			if (args['include']) delete args['include']
		}
		var rgx = new RegExp('\{base\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['base'])
			if (args['base']) delete args['base']
		}
		if (url.indexOf('[/base]') !== -1) {
			url = url.replace('[/base]', '/' + args['base'])
			if (args['base']) delete args['base']
		}
		var rgx = new RegExp('\{exclude\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['exclude'])
			if (args['exclude']) delete args['exclude']
		}
		if (url.indexOf('[/exclude]') !== -1) {
			url = url.replace('[/exclude]', '/' + args['exclude'])
			if (args['exclude']) delete args['exclude']
		}
		var rgx = new RegExp('\{unsafe\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['unsafe'])
			if (args['unsafe']) delete args['unsafe']
		}
		if (url.indexOf('[/unsafe]') !== -1) {
			url = url.replace('[/unsafe]', '/' + args['unsafe'])
			if (args['unsafe']) delete args['unsafe']
		}
		if (url.indexOf('[/include]') !== -1) url = url.replace('[/include]', '')
		if (url.indexOf('[/base]') !== -1) url = url.replace('[/base]', '')
		if (url.indexOf('[/exclude]') !== -1) url = url.replace('[/exclude]', '')
		if (url.indexOf('[/unsafe]') !== -1) url = url.replace('[/unsafe]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'filtersGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//filters/{filters}'
		args = args || {}
		if (args['filters'] == null) throw new Error('filters is a required parameter')
		var rgx = new RegExp('\{filters\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) {
			url = url.replace('[/filters]', '/' + args['filters'])
			if (args['filters']) delete args['filters']
		}
		if (url.indexOf('[/filters]') !== -1) url = url.replace('[/filters]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'inboxList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//inbox'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'inboxUnreadList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//inbox/unread'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		var rgx = new RegExp('\{since\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/since]') !== -1) {
			url = url.replace('[/since]', '/' + args['since'])
			if (args['since']) delete args['since']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		if (url.indexOf('[/since]') !== -1) url = url.replace('[/since]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'notificationsList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//notifications'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'notificationsUnreadList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//notifications/unread'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args}, opts)
	},
	'sitesList': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//sites'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'userAssociatedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//users/{id}/associated'
		args = args || {}
		if (args['id'] == null) throw new Error('id is a required parameter')
		var rgx = new RegExp('\{id\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['id'])
			if (args['id']) delete args['id']
		}
		if (url.indexOf('[/id]') !== -1) {
			url = url.replace('[/id]', '/' + args['id'])
			if (args['id']) delete args['id']
		}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/id]') !== -1) url = url.replace('[/id]', '')
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'none'}, opts)
	},
	'meAssociatedGet': function(args, opts) {
		var url = 'https://api.stackexchange.com/2.1//me/associated'
		args = args || {}
		var rgx = new RegExp('\{page\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['page'])
			if (args['page']) delete args['page']
		}
		if (url.indexOf('[/page]') !== -1) {
			url = url.replace('[/page]', '/' + args['page'])
			if (args['page']) delete args['page']
		}
		var rgx = new RegExp('\{pagesize\}', 'g')
		if (url.match(rgx)) {
			url = url.replace(rgx, args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/pagesize]') !== -1) {
			url = url.replace('[/pagesize]', '/' + args['pagesize'])
			if (args['pagesize']) delete args['pagesize']
		}
		if (url.indexOf('[/page]') !== -1) url = url.replace('[/page]', '')
		if (url.indexOf('[/pagesize]') !== -1) url = url.replace('[/pagesize]', '')
		return http({provider:'stackexchange',url:url,method:'GET',params:args, auth:'oauth2'}, opts)
	}
})